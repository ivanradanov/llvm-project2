; NOTE: Assertions have been autogenerated by utils/update_test_checks.py UTC_ARGS: --include-generated-funcs --version 4
; RUN: opt -S -input-gen-entry-point=0 -passes=inputgen %s | FileCheck %s --check-prefix=LOAD
; RUN: opt -S -input-gen-entry-point=1 -passes=inputgen %s | FileCheck %s --check-prefix=STORE

define dso_local <4 x i32>  @load(ptr noundef %p, <4 x i1> %mask, <4 x i32> %pt) local_unnamed_addr #0 {
entry:
  %a = call <4 x i32> @llvm.masked.load.v4i32.p0(ptr %p, i32 1, <4 x i1> %mask, <4 x i32> %pt)
  ret <4 x i32> %a
}

define dso_local void @store(ptr noundef %p, <4 x i1> %mask, <4 x i32> %pt) local_unnamed_addr #0 {
entry:
  call void @llvm.masked.store.v4i32.p0(<4 x i32> %pt, ptr %p, i32 1, <4 x i1> %mask)
  ret void
}

declare void @llvm.masked.store.v4i32.p0(<4 x i32>, ptr nocapture, i32 immarg, <4 x i1>)
declare <4 x i32> @llvm.masked.load.v4i32.p0(ptr nocapture, i32 immarg, <4 x i1>, <4 x i32>)


; LOAD-LABEL: define private <4 x i32> @__inputgen_renamed_load(
; LOAD-SAME: ptr nocapture noundef readonly [[P:%.*]], <4 x i1> [[MASK:%.*]], <4 x i32> [[PT:%.*]]) local_unnamed_addr #[[ATTR0:[0-9]+]] {
; LOAD-NEXT:  entry:
; LOAD-NEXT:    [[TMP0:%.*]] = extractelement <4 x i1> [[MASK]], i64 0
; LOAD-NEXT:    [[TMP1:%.*]] = extractelement <4 x i1> [[MASK]], i64 1
; LOAD-NEXT:    [[TMP2:%.*]] = extractelement <4 x i1> [[MASK]], i64 2
; LOAD-NEXT:    [[TMP3:%.*]] = extractelement <4 x i1> [[MASK]], i64 3
; LOAD-NEXT:    [[A:%.*]] = call <4 x i32> @llvm.masked.load.v4i32.p0(ptr nocapture readonly [[P]], i32 1, <4 x i1> [[MASK]], <4 x i32> [[PT]]) #[[ATTR5:[0-9]+]]
; LOAD-NEXT:    br i1 [[TMP3]], label [[TMP4:%.*]], label [[TMP6:%.*]]
; LOAD:       4:
; LOAD-NEXT:    [[TMP5:%.*]] = getelementptr <4 x i32>, ptr [[P]], i64 3
; LOAD-NEXT:    call void @__inputgen_access_i32(ptr [[TMP5]], i64 0, i32 4, ptr [[P]], i32 0, ptr null, i32 0)
; LOAD-NEXT:    br label [[TMP6]]
; LOAD:       6:
; LOAD-NEXT:    br i1 [[TMP2]], label [[TMP7:%.*]], label [[TMP9:%.*]]
; LOAD:       7:
; LOAD-NEXT:    [[TMP8:%.*]] = getelementptr <4 x i32>, ptr [[P]], i64 2
; LOAD-NEXT:    call void @__inputgen_access_i32(ptr [[TMP8]], i64 0, i32 4, ptr [[P]], i32 0, ptr null, i32 0)
; LOAD-NEXT:    br label [[TMP9]]
; LOAD:       9:
; LOAD-NEXT:    br i1 [[TMP1]], label [[TMP10:%.*]], label [[TMP12:%.*]]
; LOAD:       10:
; LOAD-NEXT:    [[TMP11:%.*]] = getelementptr <4 x i32>, ptr [[P]], i64 1
; LOAD-NEXT:    call void @__inputgen_access_i32(ptr [[TMP11]], i64 0, i32 4, ptr [[P]], i32 0, ptr null, i32 0)
; LOAD-NEXT:    br label [[TMP12]]
; LOAD:       12:
; LOAD-NEXT:    br i1 [[TMP0]], label [[TMP13:%.*]], label [[TMP15:%.*]]
; LOAD:       13:
; LOAD-NEXT:    [[TMP14:%.*]] = getelementptr <4 x i32>, ptr [[P]], i64 0
; LOAD-NEXT:    call void @__inputgen_access_i32(ptr [[TMP14]], i64 0, i32 4, ptr [[P]], i32 0, ptr null, i32 0)
; LOAD-NEXT:    br label [[TMP15]]
; LOAD:       15:
; LOAD-NEXT:    ret <4 x i32> [[A]]
;
; STORE-LABEL: define private void @__inputgen_renamed_store(
; STORE-SAME: ptr nocapture noundef writeonly [[P:%.*]], <4 x i1> [[MASK:%.*]], <4 x i32> [[PT:%.*]]) local_unnamed_addr #[[ATTR1:[0-9]+]] {
; STORE-NEXT:  entry:
; STORE-NEXT:    [[TMP0:%.*]] = extractelement <4 x i1> [[MASK]], i64 0
; STORE-NEXT:    [[TMP1:%.*]] = extractelement <4 x i1> [[MASK]], i64 1
; STORE-NEXT:    [[TMP2:%.*]] = extractelement <4 x i1> [[MASK]], i64 2
; STORE-NEXT:    [[TMP3:%.*]] = extractelement <4 x i1> [[MASK]], i64 3
; STORE-NEXT:    call void @llvm.masked.store.v4i32.p0(<4 x i32> [[PT]], ptr nocapture writeonly [[P]], i32 1, <4 x i1> [[MASK]]) #[[ATTR6:[0-9]+]]
; STORE-NEXT:    br i1 [[TMP3]], label [[TMP4:%.*]], label [[TMP8:%.*]]
; STORE:       4:
; STORE-NEXT:    [[TMP5:%.*]] = getelementptr <4 x i32>, ptr [[P]], i64 3
; STORE-NEXT:    [[TMP6:%.*]] = extractelement <4 x i32> [[PT]], i64 3
; STORE-NEXT:    [[TMP7:%.*]] = zext i32 [[TMP6]] to i64
; STORE-NEXT:    call void @__inputgen_access_i32(ptr [[TMP5]], i64 [[TMP7]], i32 4, ptr [[P]], i32 1, ptr null, i32 0)
; STORE-NEXT:    br label [[TMP8]]
; STORE:       8:
; STORE-NEXT:    br i1 [[TMP2]], label [[TMP9:%.*]], label [[TMP13:%.*]]
; STORE:       9:
; STORE-NEXT:    [[TMP10:%.*]] = getelementptr <4 x i32>, ptr [[P]], i64 2
; STORE-NEXT:    [[TMP11:%.*]] = extractelement <4 x i32> [[PT]], i64 2
; STORE-NEXT:    [[TMP12:%.*]] = zext i32 [[TMP11]] to i64
; STORE-NEXT:    call void @__inputgen_access_i32(ptr [[TMP10]], i64 [[TMP12]], i32 4, ptr [[P]], i32 1, ptr null, i32 0)
; STORE-NEXT:    br label [[TMP13]]
; STORE:       13:
; STORE-NEXT:    br i1 [[TMP1]], label [[TMP14:%.*]], label [[TMP18:%.*]]
; STORE:       14:
; STORE-NEXT:    [[TMP15:%.*]] = getelementptr <4 x i32>, ptr [[P]], i64 1
; STORE-NEXT:    [[TMP16:%.*]] = extractelement <4 x i32> [[PT]], i64 1
; STORE-NEXT:    [[TMP17:%.*]] = zext i32 [[TMP16]] to i64
; STORE-NEXT:    call void @__inputgen_access_i32(ptr [[TMP15]], i64 [[TMP17]], i32 4, ptr [[P]], i32 1, ptr null, i32 0)
; STORE-NEXT:    br label [[TMP18]]
; STORE:       18:
; STORE-NEXT:    br i1 [[TMP0]], label [[TMP19:%.*]], label [[TMP23:%.*]]
; STORE:       19:
; STORE-NEXT:    [[TMP20:%.*]] = getelementptr <4 x i32>, ptr [[P]], i64 0
; STORE-NEXT:    [[TMP21:%.*]] = extractelement <4 x i32> [[PT]], i64 0
; STORE-NEXT:    [[TMP22:%.*]] = zext i32 [[TMP21]] to i64
; STORE-NEXT:    call void @__inputgen_access_i32(ptr [[TMP20]], i64 [[TMP22]], i32 4, ptr [[P]], i32 1, ptr null, i32 0)
; STORE-NEXT:    br label [[TMP23]]
; STORE:       23:
; STORE-NEXT:    ret void
