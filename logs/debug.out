gpu-affine-opt: Before opt:
llvm.func private local_unnamed_addr @__mlir.par.kernel._Z13MatrixMulCUDAILi16EEvPfS0_S0_ii_32764(%arg0: i64, %arg1: i64, %arg2: i64, %arg3: i64, %arg4: i64, %arg5: i64, %arg6: i32, %arg7: !llvm.ptr {llvm.nocapture, llvm.noundef, llvm.writeonly}, %arg8: !llvm.ptr {llvm.nocapture, llvm.noundef, llvm.readonly}, %arg9: !llvm.ptr {llvm.nocapture, llvm.noundef, llvm.readonly}, %arg10: i32 {llvm.noundef}, %arg11: i32 {llvm.noundef}) comdat(@__llvm_global_comdat::@_Z13MatrixMulCUDAILi16EEvPfS0_S0_ii) attributes {gpu.par.kernel, sym_visibility = "private"} {
  %c4_i32 = arith.constant 4 : i32
  %0 = llvm.mlir.constant(0.000000e+00 : f32) : f32
  %c16_i32 = arith.constant 16 : i32
  %c0_i32 = arith.constant 0 : i32
  %c1_i32 = arith.constant 1 : i32
  %1 = arith.index_cast %arg1 : i64 to index
  %2 = arith.index_cast %arg0 : i64 to index
  affine.parallel (%arg12, %arg13, %arg14) = (0, 0, 0) to (symbol(%2), symbol(%1), 1) {
    %3 = llvm.alloca %c1_i32 x !llvm.array<16 x array<16 x f32>> : (i32) -> !llvm.ptr<3>
    %4 = llvm.alloca %c1_i32 x !llvm.array<16 x array<16 x f32>> : (i32) -> !llvm.ptr<3>
    affine.parallel (%arg15, %arg16, %arg17) = (0, 0, 0) to (16, 16, 1) {
      %5 = llvm.addrspacecast %3 : !llvm.ptr<3> to !llvm.ptr
      %6 = llvm.addrspacecast %4 : !llvm.ptr<3> to !llvm.ptr
      %7 = arith.index_cast %arg12 : index to i32
      %8 = arith.index_cast %arg13 : index to i32
      %9 = arith.index_cast %arg15 : index to i32
      %10 = arith.index_cast %arg16 : index to i32
      %11 = arith.shli %arg10, %c4_i32 : i32
      %12 = arith.muli %11, %8 : i32
      %13 = arith.addi %12, %arg10 : i32
      %14 = arith.shli %7, %c4_i32 : i32
      %15 = arith.shli %arg11, %c4_i32 : i32
      %16 = arith.muli %10, %arg10 : i32
      %17 = arith.addi %16, %9 : i32
      %18 = arith.extui %10 : i32 to i64
      %19 = arith.extui %9 : i32 to i64
      %20 = llvm.getelementptr inbounds %5[0, %18, %19] : (!llvm.ptr, i64, i64) -> !llvm.ptr, !llvm.array<16 x array<16 x f32>>
      %21 = arith.muli %10, %arg11 : i32
      %22 = arith.addi %21, %9 : i32
      %23 = llvm.getelementptr inbounds %6[0, %18, %19] : (!llvm.ptr, i64, i64) -> !llvm.ptr, !llvm.array<16 x array<16 x f32>>
      %24:2 = scf.for %arg18 = %12 to %13 step %c16_i32 iter_args(%arg19 = %14, %arg20 = %0) -> (i32, f32)  : i32 {
        %31 = arith.addi %17, %arg18 : i32
        %32 = arith.extsi %31 : i32 to i64
        %33 = llvm.getelementptr inbounds %arg8[%32] : (!llvm.ptr, i64) -> !llvm.ptr, f32
        %34 = llvm.load %33 {alignment = 4 : i64, tbaa = [#llvm.tbaa_tag<base_type = <id = "float", members = {<#llvm.tbaa_type_desc<id = "omnipotent char", members = {<#llvm.tbaa_root<id = "Simple C++ TBAA">, 0>}>, 0>}>, access_type = <id = "float", members = {<#llvm.tbaa_type_desc<id = "omnipotent char", members = {<#llvm.tbaa_root<id = "Simple C++ TBAA">, 0>}>, 0>}>, offset = 0>]} : !llvm.ptr -> f32
        llvm.store %34, %20 {alignment = 4 : i64, tbaa = [#llvm.tbaa_tag<base_type = <id = "float", members = {<#llvm.tbaa_type_desc<id = "omnipotent char", members = {<#llvm.tbaa_root<id = "Simple C++ TBAA">, 0>}>, 0>}>, access_type = <id = "float", members = {<#llvm.tbaa_type_desc<id = "omnipotent char", members = {<#llvm.tbaa_root<id = "Simple C++ TBAA">, 0>}>, 0>}>, offset = 0>]} : f32, !llvm.ptr
        %35 = arith.addi %22, %arg19 : i32
        %36 = arith.extsi %35 : i32 to i64
        %37 = llvm.getelementptr inbounds %arg9[%36] : (!llvm.ptr, i64) -> !llvm.ptr, f32
        %38 = llvm.load %37 {alignment = 4 : i64, tbaa = [#llvm.tbaa_tag<base_type = <id = "float", members = {<#llvm.tbaa_type_desc<id = "omnipotent char", members = {<#llvm.tbaa_root<id = "Simple C++ TBAA">, 0>}>, 0>}>, access_type = <id = "float", members = {<#llvm.tbaa_type_desc<id = "omnipotent char", members = {<#llvm.tbaa_root<id = "Simple C++ TBAA">, 0>}>, 0>}>, offset = 0>]} : !llvm.ptr -> f32
        llvm.store %38, %23 {alignment = 4 : i64, tbaa = [#llvm.tbaa_tag<base_type = <id = "float", members = {<#llvm.tbaa_type_desc<id = "omnipotent char", members = {<#llvm.tbaa_root<id = "Simple C++ TBAA">, 0>}>, 0>}>, access_type = <id = "float", members = {<#llvm.tbaa_type_desc<id = "omnipotent char", members = {<#llvm.tbaa_root<id = "Simple C++ TBAA">, 0>}>, 0>}>, offset = 0>]} : f32, !llvm.ptr
        "affine.barrier"(%arg15, %arg16, %arg17) : (index, index, index) -> ()
        %39 = scf.for %arg21 = %c0_i32 to %c16_i32 step %c1_i32 iter_args(%arg22 = %arg20) -> (f32)  : i32 {
          %41 = arith.extui %arg21 : i32 to i64
          %42 = llvm.getelementptr inbounds %5[0, %18, %41] : (!llvm.ptr, i64, i64) -> !llvm.ptr, !llvm.array<16 x array<16 x f32>>
          %43 = llvm.load %42 {alignment = 4 : i64, tbaa = [#llvm.tbaa_tag<base_type = <id = "float", members = {<#llvm.tbaa_type_desc<id = "omnipotent char", members = {<#llvm.tbaa_root<id = "Simple C++ TBAA">, 0>}>, 0>}>, access_type = <id = "float", members = {<#llvm.tbaa_type_desc<id = "omnipotent char", members = {<#llvm.tbaa_root<id = "Simple C++ TBAA">, 0>}>, 0>}>, offset = 0>]} : !llvm.ptr -> f32
          %44 = llvm.getelementptr inbounds %6[0, %41, %19] : (!llvm.ptr, i64, i64) -> !llvm.ptr, !llvm.array<16 x array<16 x f32>>
          %45 = llvm.load %44 {alignment = 4 : i64, tbaa = [#llvm.tbaa_tag<base_type = <id = "float", members = {<#llvm.tbaa_type_desc<id = "omnipotent char", members = {<#llvm.tbaa_root<id = "Simple C++ TBAA">, 0>}>, 0>}>, access_type = <id = "float", members = {<#llvm.tbaa_type_desc<id = "omnipotent char", members = {<#llvm.tbaa_root<id = "Simple C++ TBAA">, 0>}>, 0>}>, offset = 0>]} : !llvm.ptr -> f32
          %46 = llvm.fmul %43, %45  {fastmathFlags = #llvm.fastmath<contract>} : f32
          %47 = llvm.fadd %arg22, %46  {fastmathFlags = #llvm.fastmath<contract>} : f32
          scf.yield %47 : f32
        }
        "affine.barrier"(%arg15, %arg16, %arg17) : (index, index, index) -> ()
        %40 = arith.addi %arg19, %15 : i32
        scf.yield %40, %39 : i32, f32
      }
      %25 = arith.muli %15, %8 : i32
      %26 = arith.addi %14, %9 : i32
      %27 = arith.addi %26, %21 : i32
      %28 = arith.addi %27, %25 : i32
      %29 = arith.extsi %28 : i32 to i64
      %30 = llvm.getelementptr inbounds %arg7[%29] : (!llvm.ptr, i64) -> !llvm.ptr, f32
      llvm.store %24#1, %30 {alignment = 4 : i64, tbaa = [#llvm.tbaa_tag<base_type = <id = "float", members = {<#llvm.tbaa_type_desc<id = "omnipotent char", members = {<#llvm.tbaa_root<id = "Simple C++ TBAA">, 0>}>, 0>}>, access_type = <id = "float", members = {<#llvm.tbaa_type_desc<id = "omnipotent char", members = {<#llvm.tbaa_root<id = "Simple C++ TBAA">, 0>}>, 0>}>, offset = 0>]} : f32, !llvm.ptr
    } {gpu.par.block}
  } {gpu.par.grid}
  llvm.return
}
gpu-affine-opt: Removed IVs:
llvm.func private local_unnamed_addr @__mlir.par.kernel._Z13MatrixMulCUDAILi16EEvPfS0_S0_ii_32764(%arg0: i64, %arg1: i64, %arg2: i64, %arg3: i64, %arg4: i64, %arg5: i64, %arg6: i32, %arg7: !llvm.ptr {llvm.nocapture, llvm.noundef, llvm.writeonly}, %arg8: !llvm.ptr {llvm.nocapture, llvm.noundef, llvm.readonly}, %arg9: !llvm.ptr {llvm.nocapture, llvm.noundef, llvm.readonly}, %arg10: i32 {llvm.noundef}, %arg11: i32 {llvm.noundef}) comdat(@__llvm_global_comdat::@_Z13MatrixMulCUDAILi16EEvPfS0_S0_ii) attributes {gpu.par.kernel, sym_visibility = "private"} {
  %c4_i32 = arith.constant 4 : i32
  %0 = llvm.mlir.constant(0.000000e+00 : f32) : f32
  %c16_i32 = arith.constant 16 : i32
  %c0_i32 = arith.constant 0 : i32
  %c1_i32 = arith.constant 1 : i32
  %1 = arith.index_cast %arg1 : i64 to index
  %2 = arith.index_cast %arg0 : i64 to index
  affine.parallel (%arg12, %arg13, %arg14) = (0, 0, 0) to (symbol(%2), symbol(%1), 1) {
    %3 = llvm.alloca %c1_i32 x !llvm.array<16 x array<16 x f32>> : (i32) -> !llvm.ptr<3>
    %4 = llvm.alloca %c1_i32 x !llvm.array<16 x array<16 x f32>> : (i32) -> !llvm.ptr<3>
    affine.parallel (%arg15, %arg16, %arg17) = (0, 0, 0) to (16, 16, 1) {
      %5 = llvm.addrspacecast %3 : !llvm.ptr<3> to !llvm.ptr
      %6 = llvm.addrspacecast %4 : !llvm.ptr<3> to !llvm.ptr
      %7 = arith.index_cast %arg12 : index to i32
      %8 = arith.index_cast %arg13 : index to i32
      %9 = arith.index_cast %arg15 : index to i32
      %10 = arith.index_cast %arg16 : index to i32
      %11 = arith.shli %arg10, %c4_i32 : i32
      %12 = arith.muli %11, %8 : i32
      %13 = arith.shli %7, %c4_i32 : i32
      %14 = arith.shli %arg11, %c4_i32 : i32
      %15 = arith.muli %10, %arg10 : i32
      %16 = arith.addi %15, %9 : i32
      %17 = arith.extui %10 : i32 to i64
      %18 = arith.extui %9 : i32 to i64
      %19 = llvm.getelementptr inbounds %5[0, %17, %18] : (!llvm.ptr, i64, i64) -> !llvm.ptr, !llvm.array<16 x array<16 x f32>>
      %20 = arith.muli %10, %arg11 : i32
      %21 = arith.addi %20, %9 : i32
      %22 = llvm.getelementptr inbounds %6[0, %17, %18] : (!llvm.ptr, i64, i64) -> !llvm.ptr, !llvm.array<16 x array<16 x f32>>
      %23 = arith.subi %arg10, %c1_i32 : i32
      %24 = arith.divui %23, %c16_i32 : i32
      %25 = arith.addi %24, %c1_i32 : i32
      %26 = scf.for %arg18 = %c0_i32 to %25 step %c1_i32 iter_args(%arg19 = %0) -> (f32)  : i32 {
        %33 = arith.muli %arg18, %14 : i32
        %34 = arith.addi %33, %13 : i32
        %35 = arith.muli %arg18, %c16_i32 : i32
        %36 = arith.addi %12, %35 : i32
        %37 = arith.addi %16, %36 : i32
        %38 = arith.extsi %37 : i32 to i64
        %39 = llvm.getelementptr inbounds %arg8[%38] : (!llvm.ptr, i64) -> !llvm.ptr, f32
        %40 = llvm.load %39 {alignment = 4 : i64, tbaa = [#llvm.tbaa_tag<base_type = <id = "float", members = {<#llvm.tbaa_type_desc<id = "omnipotent char", members = {<#llvm.tbaa_root<id = "Simple C++ TBAA">, 0>}>, 0>}>, access_type = <id = "float", members = {<#llvm.tbaa_type_desc<id = "omnipotent char", members = {<#llvm.tbaa_root<id = "Simple C++ TBAA">, 0>}>, 0>}>, offset = 0>]} : !llvm.ptr -> f32
        llvm.store %40, %19 {alignment = 4 : i64, tbaa = [#llvm.tbaa_tag<base_type = <id = "float", members = {<#llvm.tbaa_type_desc<id = "omnipotent char", members = {<#llvm.tbaa_root<id = "Simple C++ TBAA">, 0>}>, 0>}>, access_type = <id = "float", members = {<#llvm.tbaa_type_desc<id = "omnipotent char", members = {<#llvm.tbaa_root<id = "Simple C++ TBAA">, 0>}>, 0>}>, offset = 0>]} : f32, !llvm.ptr
        %41 = arith.addi %21, %34 : i32
        %42 = arith.extsi %41 : i32 to i64
        %43 = llvm.getelementptr inbounds %arg9[%42] : (!llvm.ptr, i64) -> !llvm.ptr, f32
        %44 = llvm.load %43 {alignment = 4 : i64, tbaa = [#llvm.tbaa_tag<base_type = <id = "float", members = {<#llvm.tbaa_type_desc<id = "omnipotent char", members = {<#llvm.tbaa_root<id = "Simple C++ TBAA">, 0>}>, 0>}>, access_type = <id = "float", members = {<#llvm.tbaa_type_desc<id = "omnipotent char", members = {<#llvm.tbaa_root<id = "Simple C++ TBAA">, 0>}>, 0>}>, offset = 0>]} : !llvm.ptr -> f32
        llvm.store %44, %22 {alignment = 4 : i64, tbaa = [#llvm.tbaa_tag<base_type = <id = "float", members = {<#llvm.tbaa_type_desc<id = "omnipotent char", members = {<#llvm.tbaa_root<id = "Simple C++ TBAA">, 0>}>, 0>}>, access_type = <id = "float", members = {<#llvm.tbaa_type_desc<id = "omnipotent char", members = {<#llvm.tbaa_root<id = "Simple C++ TBAA">, 0>}>, 0>}>, offset = 0>]} : f32, !llvm.ptr
        "affine.barrier"(%arg15, %arg16, %arg17) : (index, index, index) -> ()
        %45 = scf.for %arg20 = %c0_i32 to %c16_i32 step %c1_i32 iter_args(%arg21 = %arg19) -> (f32)  : i32 {
          %46 = arith.extui %arg20 : i32 to i64
          %47 = llvm.getelementptr inbounds %5[0, %17, %46] : (!llvm.ptr, i64, i64) -> !llvm.ptr, !llvm.array<16 x array<16 x f32>>
          %48 = llvm.load %47 {alignment = 4 : i64, tbaa = [#llvm.tbaa_tag<base_type = <id = "float", members = {<#llvm.tbaa_type_desc<id = "omnipotent char", members = {<#llvm.tbaa_root<id = "Simple C++ TBAA">, 0>}>, 0>}>, access_type = <id = "float", members = {<#llvm.tbaa_type_desc<id = "omnipotent char", members = {<#llvm.tbaa_root<id = "Simple C++ TBAA">, 0>}>, 0>}>, offset = 0>]} : !llvm.ptr -> f32
          %49 = llvm.getelementptr inbounds %6[0, %46, %18] : (!llvm.ptr, i64, i64) -> !llvm.ptr, !llvm.array<16 x array<16 x f32>>
          %50 = llvm.load %49 {alignment = 4 : i64, tbaa = [#llvm.tbaa_tag<base_type = <id = "float", members = {<#llvm.tbaa_type_desc<id = "omnipotent char", members = {<#llvm.tbaa_root<id = "Simple C++ TBAA">, 0>}>, 0>}>, access_type = <id = "float", members = {<#llvm.tbaa_type_desc<id = "omnipotent char", members = {<#llvm.tbaa_root<id = "Simple C++ TBAA">, 0>}>, 0>}>, offset = 0>]} : !llvm.ptr -> f32
          %51 = llvm.fmul %48, %50  {fastmathFlags = #llvm.fastmath<contract>} : f32
          %52 = llvm.fadd %arg21, %51  {fastmathFlags = #llvm.fastmath<contract>} : f32
          scf.yield %52 : f32
        }
        "affine.barrier"(%arg15, %arg16, %arg17) : (index, index, index) -> ()
        scf.yield %45 : f32
      }
      %27 = arith.muli %14, %8 : i32
      %28 = arith.addi %13, %9 : i32
      %29 = arith.addi %28, %20 : i32
      %30 = arith.addi %29, %27 : i32
      %31 = arith.extsi %30 : i32 to i64
      %32 = llvm.getelementptr inbounds %arg7[%31] : (!llvm.ptr, i64) -> !llvm.ptr, f32
      llvm.store %26, %32 {alignment = 4 : i64, tbaa = [#llvm.tbaa_tag<base_type = <id = "float", members = {<#llvm.tbaa_type_desc<id = "omnipotent char", members = {<#llvm.tbaa_root<id = "Simple C++ TBAA">, 0>}>, 0>}>, access_type = <id = "float", members = {<#llvm.tbaa_type_desc<id = "omnipotent char", members = {<#llvm.tbaa_root<id = "Simple C++ TBAA">, 0>}>, 0>}>, offset = 0>]} : f32, !llvm.ptr
    } {gpu.par.block}
  } {gpu.par.grid}
  llvm.return
}
gpu-affine-opt: To Affine:
llvm.func private local_unnamed_addr @__mlir.par.kernel._Z13MatrixMulCUDAILi16EEvPfS0_S0_ii_32764(%arg0: i64, %arg1: i64, %arg2: i64, %arg3: i64, %arg4: i64, %arg5: i64, %arg6: i32, %arg7: !llvm.ptr {llvm.nocapture, llvm.noundef, llvm.writeonly}, %arg8: !llvm.ptr {llvm.nocapture, llvm.noundef, llvm.readonly}, %arg9: !llvm.ptr {llvm.nocapture, llvm.noundef, llvm.readonly}, %arg10: i32 {llvm.noundef}, %arg11: i32 {llvm.noundef}) comdat(@__llvm_global_comdat::@_Z13MatrixMulCUDAILi16EEvPfS0_S0_ii) attributes {gpu.par.kernel, sym_visibility = "private"} {
  %0 = llvm.mlir.constant(0.000000e+00 : f32) : f32
  %1 = "memref.ataddr"(%arg9) : (!llvm.ptr) -> memref<?xi8>
  %2 = "memref.ataddr"(%arg8) : (!llvm.ptr) -> memref<?xi8>
  %3 = "memref.ataddr"(%arg7) : (!llvm.ptr) -> memref<?xi8>
  %4 = arith.index_cast %arg11 : i32 to index
  %5 = arith.index_cast %arg11 : i32 to index
  %6 = arith.index_cast %arg10 : i32 to index
  %7 = arith.index_cast %arg10 : i32 to index
  %8 = arith.index_cast %arg11 : i32 to index
  %9 = arith.index_cast %arg11 : i32 to index
  %10 = arith.index_cast %arg10 : i32 to index
  %11 = arith.index_cast %arg1 : i64 to index
  %12 = arith.index_cast %arg0 : i64 to index
  affine.parallel (%arg12, %arg13, %arg14) = (0, 0, 0) to (symbol(%12), symbol(%11), 1) {
    %alloca = memref.alloca() : memref<1024xi8, 3>
    %alloca_0 = memref.alloca() : memref<1024xi8, 3>
    affine.parallel (%arg15, %arg16, %arg17) = (0, 0, 0) to (16, 16, 1) {
      %13 = affine.for %arg18 = 0 to affine_map<()[s0] -> ((s0 - 1) floordiv 16 + 1)>()[%10] iter_args(%arg19 = %0) -> (f32) {
        %15 = affine.vector_load %2[(%arg16 * symbol(%7)) * 4 + %arg15 * 4 + %arg18 * 64 + (%arg13 * (symbol(%6) * 16)) * 4] {polymer.access.type = f32} : memref<?xi8>, vector<4xi8>
        affine.vector_store %15, %alloca[%arg16 * 64 + %arg15 * 4] {polymer.access.type = f32} : memref<1024xi8, 3>, vector<4xi8>
        %16 = affine.vector_load %1[(%arg16 * symbol(%5)) * 4 + %arg15 * 4 + %arg12 * 64 + (%arg18 * (symbol(%4) * 16)) * 4] {polymer.access.type = f32} : memref<?xi8>, vector<4xi8>
        affine.vector_store %16, %alloca_0[%arg16 * 64 + %arg15 * 4] {polymer.access.type = f32} : memref<1024xi8, 3>, vector<4xi8>
        "affine.barrier"(%arg15, %arg16, %arg17) : (index, index, index) -> ()
        %17 = affine.for %arg20 = 0 to 16 iter_args(%arg21 = %arg19) -> (f32) {
          %18 = affine.vector_load %alloca[%arg16 * 64 + %arg20 * 4] {polymer.access.type = f32} : memref<1024xi8, 3>, vector<4xi8>
          %19 = llvm.bitcast %18 : vector<4xi8> to f32
          %20 = affine.vector_load %alloca_0[%arg20 * 64 + %arg15 * 4] {polymer.access.type = f32} : memref<1024xi8, 3>, vector<4xi8>
          %21 = llvm.bitcast %20 : vector<4xi8> to f32
          %22 = llvm.fmul %19, %21  {fastmathFlags = #llvm.fastmath<contract>} : f32
          %23 = llvm.fadd %arg21, %22  {fastmathFlags = #llvm.fastmath<contract>} : f32
          affine.yield %23 : f32
        }
        "affine.barrier"(%arg15, %arg16, %arg17) : (index, index, index) -> ()
        affine.yield %17 : f32
      }
      %14 = llvm.bitcast %13 : f32 to vector<4xi8>
      affine.vector_store %14, %3[%arg12 * 64 + %arg15 * 4 + (%arg16 * symbol(%9)) * 4 + (%arg13 * (symbol(%8) * 16)) * 4] {polymer.access.type = f32} : memref<?xi8>, vector<4xi8>
    } {gpu.par.block}
  } {gpu.par.grid}
  llvm.return
}
gpu-affine-opt: Distributed:
llvm.func private local_unnamed_addr @__mlir.par.kernel._Z13MatrixMulCUDAILi16EEvPfS0_S0_ii_32764(%arg0: i64, %arg1: i64, %arg2: i64, %arg3: i64, %arg4: i64, %arg5: i64, %arg6: i32, %arg7: !llvm.ptr {llvm.nocapture, llvm.noundef, llvm.writeonly}, %arg8: !llvm.ptr {llvm.nocapture, llvm.noundef, llvm.readonly}, %arg9: !llvm.ptr {llvm.nocapture, llvm.noundef, llvm.readonly}, %arg10: i32 {llvm.noundef}, %arg11: i32 {llvm.noundef}) comdat(@__llvm_global_comdat::@_Z13MatrixMulCUDAILi16EEvPfS0_S0_ii) attributes {gpu.par.kernel, sym_visibility = "private"} {
  %c1 = arith.constant 1 : index
  %c16 = arith.constant 16 : index
  %0 = llvm.mlir.constant(0.000000e+00 : f32) : f32
  %1 = "memref.ataddr"(%arg9) : (!llvm.ptr) -> memref<?xi8>
  %2 = "memref.ataddr"(%arg8) : (!llvm.ptr) -> memref<?xi8>
  %3 = "memref.ataddr"(%arg7) : (!llvm.ptr) -> memref<?xi8>
  %4 = arith.index_cast %arg11 : i32 to index
  %5 = arith.index_cast %arg11 : i32 to index
  %6 = arith.index_cast %arg10 : i32 to index
  %7 = arith.index_cast %arg10 : i32 to index
  %8 = arith.index_cast %arg11 : i32 to index
  %9 = arith.index_cast %arg11 : i32 to index
  %10 = arith.index_cast %arg10 : i32 to index
  %11 = arith.index_cast %arg1 : i64 to index
  %12 = arith.index_cast %arg0 : i64 to index
  affine.parallel (%arg12, %arg13, %arg14) = (0, 0, 0) to (symbol(%12), symbol(%11), 1) {
    %alloca = memref.alloca() : memref<1024xi8, 3>
    %alloca_0 = memref.alloca() : memref<1024xi8, 3>
    %alloca_1 = memref.alloca(%c16, %c16, %c1) : memref<?x?x?xf32, 16>
    affine.parallel (%arg15, %arg16, %arg17) = (0, 0, 0) to (16, 16, 1) {
      affine.store %0, %alloca_1[%arg15, %arg16, %arg17] : memref<?x?x?xf32, 16>
    } {gpu.par.block}
    affine.for %arg15 = 0 to affine_map<()[s0] -> ((s0 - 1) floordiv 16 + 1)>()[%10] {
      affine.parallel (%arg16, %arg17, %arg18) = (0, 0, 0) to (16, 16, 1) {
        %13 = affine.vector_load %2[(%arg17 * symbol(%7)) * 4 + %arg16 * 4 + %arg15 * 64 + (%arg13 * (symbol(%6) * 16)) * 4] {polymer.access.type = f32} : memref<?xi8>, vector<4xi8>
        affine.vector_store %13, %alloca[%arg17 * 64 + %arg16 * 4] {polymer.access.type = f32} : memref<1024xi8, 3>, vector<4xi8>
        %14 = affine.vector_load %1[(%arg17 * symbol(%5)) * 4 + %arg16 * 4 + %arg12 * 64 + (%arg15 * (symbol(%4) * 16)) * 4] {polymer.access.type = f32} : memref<?xi8>, vector<4xi8>
        affine.vector_store %14, %alloca_0[%arg17 * 64 + %arg16 * 4] {polymer.access.type = f32} : memref<1024xi8, 3>, vector<4xi8>
      } {gpu.par.block}
      affine.parallel (%arg16, %arg17, %arg18) = (0, 0, 0) to (16, 16, 1) {
        %13 = affine.load %alloca_1[%arg16, %arg17, %arg18] : memref<?x?x?xf32, 16>
        %14 = affine.for %arg19 = 0 to 16 iter_args(%arg20 = %13) -> (f32) {
          %15 = affine.vector_load %alloca[%arg17 * 64 + %arg19 * 4] {polymer.access.type = f32} : memref<1024xi8, 3>, vector<4xi8>
          %16 = llvm.bitcast %15 : vector<4xi8> to f32
          %17 = affine.vector_load %alloca_0[%arg19 * 64 + %arg16 * 4] {polymer.access.type = f32} : memref<1024xi8, 3>, vector<4xi8>
          %18 = llvm.bitcast %17 : vector<4xi8> to f32
          %19 = llvm.fmul %16, %18  {fastmathFlags = #llvm.fastmath<contract>} : f32
          %20 = llvm.fadd %arg20, %19  {fastmathFlags = #llvm.fastmath<contract>} : f32
          affine.yield %20 : f32
        }
        affine.store %14, %alloca_1[%arg16, %arg17, %arg18] : memref<?x?x?xf32, 16>
      } {gpu.par.block}
    }
    affine.parallel (%arg15, %arg16, %arg17) = (0, 0, 0) to (16, 16, 1) {
      %13 = affine.load %alloca_1[%arg15, %arg16, %arg17] : memref<?x?x?xf32, 16>
      %14 = llvm.bitcast %13 : f32 to vector<4xi8>
      affine.vector_store %14, %3[%arg12 * 64 + %arg15 * 4 + (%arg16 * symbol(%9)) * 4 + (%arg13 * (symbol(%8) * 16)) * 4] {polymer.access.type = f32} : memref<?xi8>, vector<4xi8>
    } {gpu.par.block}
  } {gpu.par.grid}
  llvm.return
}
gpu-affine-opt: Canonicalized:
llvm.func private local_unnamed_addr @__mlir.par.kernel._Z13MatrixMulCUDAILi16EEvPfS0_S0_ii_32764(%arg0: i64, %arg1: i64, %arg2: i64, %arg3: i64, %arg4: i64, %arg5: i64, %arg6: i32, %arg7: !llvm.ptr {llvm.nocapture, llvm.noundef, llvm.writeonly}, %arg8: !llvm.ptr {llvm.nocapture, llvm.noundef, llvm.readonly}, %arg9: !llvm.ptr {llvm.nocapture, llvm.noundef, llvm.readonly}, %arg10: i32 {llvm.noundef}, %arg11: i32 {llvm.noundef}) comdat(@__llvm_global_comdat::@_Z13MatrixMulCUDAILi16EEvPfS0_S0_ii) attributes {gpu.par.kernel, sym_visibility = "private"} {
  %0 = llvm.mlir.constant(0.000000e+00 : f32) : f32
  %1 = "memref.ataddr"(%arg9) : (!llvm.ptr) -> memref<?xi8>
  %2 = "memref.ataddr"(%arg8) : (!llvm.ptr) -> memref<?xi8>
  %3 = "memref.ataddr"(%arg7) : (!llvm.ptr) -> memref<?xi8>
  %4 = arith.index_cast %arg11 : i32 to index
  %5 = arith.index_cast %arg10 : i32 to index
  %6 = arith.index_cast %arg1 : i64 to index
  %7 = arith.index_cast %arg0 : i64 to index
  affine.parallel (%arg12, %arg13, %arg14) = (0, 0, 0) to (symbol(%7), symbol(%6), 1) {
    %alloca = memref.alloca() : memref<1024xi8, 3>
    %alloca_0 = memref.alloca() : memref<1024xi8, 3>
    %alloca_1 = memref.alloca() : memref<16x16x1xf32, 16>
    affine.parallel (%arg15, %arg16, %arg17) = (0, 0, 0) to (16, 16, 1) {
      affine.store %0, %alloca_1[%arg15, %arg16, %arg17] : memref<16x16x1xf32, 16>
    } {gpu.par.block}
    affine.for %arg15 = 0 to affine_map<()[s0] -> ((s0 - 1) floordiv 16 + 1)>()[%5] {
      affine.parallel (%arg16, %arg17, %arg18) = (0, 0, 0) to (16, 16, 1) {
        %8 = affine.vector_load %2[(%arg17 * symbol(%5)) * 4 + %arg16 * 4 + %arg15 * 64 + (%arg13 * (symbol(%5) * 16)) * 4] {polymer.access.type = f32} : memref<?xi8>, vector<4xi8>
        affine.vector_store %8, %alloca[%arg17 * 64 + %arg16 * 4] {polymer.access.type = f32} : memref<1024xi8, 3>, vector<4xi8>
        %9 = affine.vector_load %1[(%arg17 * symbol(%4)) * 4 + %arg16 * 4 + %arg12 * 64 + (%arg15 * (symbol(%4) * 16)) * 4] {polymer.access.type = f32} : memref<?xi8>, vector<4xi8>
        affine.vector_store %9, %alloca_0[%arg17 * 64 + %arg16 * 4] {polymer.access.type = f32} : memref<1024xi8, 3>, vector<4xi8>
      } {gpu.par.block}
      affine.parallel (%arg16, %arg17, %arg18) = (0, 0, 0) to (16, 16, 1) {
        %8 = affine.load %alloca_1[%arg16, %arg17, %arg18] : memref<16x16x1xf32, 16>
        %9 = affine.for %arg19 = 0 to 16 iter_args(%arg20 = %8) -> (f32) {
          %10 = affine.vector_load %alloca[%arg17 * 64 + %arg19 * 4] {polymer.access.type = f32} : memref<1024xi8, 3>, vector<4xi8>
          %11 = llvm.bitcast %10 : vector<4xi8> to f32
          %12 = affine.vector_load %alloca_0[%arg19 * 64 + %arg16 * 4] {polymer.access.type = f32} : memref<1024xi8, 3>, vector<4xi8>
          %13 = llvm.bitcast %12 : vector<4xi8> to f32
          %14 = llvm.fmul %11, %13  {fastmathFlags = #llvm.fastmath<contract>} : f32
          %15 = llvm.fadd %arg20, %14  {fastmathFlags = #llvm.fastmath<contract>} : f32
          affine.yield %15 : f32
        }
        affine.store %9, %alloca_1[%arg16, %arg17, %arg18] : memref<16x16x1xf32, 16>
      } {gpu.par.block}
    }
    affine.parallel (%arg15, %arg16, %arg17) = (0, 0, 0) to (16, 16, 1) {
      %8 = affine.load %alloca_1[%arg15, %arg16, %arg17] : memref<16x16x1xf32, 16>
      %9 = llvm.bitcast %8 : f32 to vector<4xi8>
      affine.vector_store %9, %3[%arg12 * 64 + %arg15 * 4 + (%arg16 * symbol(%4)) * 4 + (%arg13 * (symbol(%4) * 16)) * 4] {polymer.access.type = f32} : memref<?xi8>, vector<4xi8>
    } {gpu.par.block}
  } {gpu.par.grid}
  llvm.return
}
Schedule:
domain: "[P0, P1, P2, P3] -> { S6_arith_index_cast[]; S2_memref_ataddr[]; S29_affine_yield[i0, i1, 0, i3] : 0 <= i0 < P3 and 0 <= i1 < P2 and i3 >= 0 and 16i3 < P0; S28_affine_yield[i0, i1, 0, i3, i4, i5, 0] : 0 <= i0 < P3 and 0 <= i1 < P2 and i3 >= 0 and 16i3 < P0 and 0 <= i4 <= 15 and 0 <= i5 <= 15; S25_llvm_fadd[i0, i1, 0, i3, i4, i5, 0, i7] : 0 <= i0 < P3 and 0 <= i1 < P2 and i3 >= 0 and 16i3 < P0 and 0 <= i4 <= 15 and 0 <= i5 <= 15 and 0 <= i7 <= 15; S7_arith_index_cast[]; S32_affine_vector_store[i0, i1, 0, i3, i4, 0] : 0 <= i0 < P3 and 0 <= i1 < P2 and 0 <= i3 <= 15 and 0 <= i4 <= 15; S17_affine_yield[i0, i1, 0, i3, i4, i5, 0] : 0 <= i0 < P3 and 0 <= i1 < P2 and i3 >= 0 and 16i3 < P0 and 0 <= i4 <= 15 and 0 <= i5 <= 15; S18_affine_load[i0, i1, 0, i3, i4, i5, 0] : 0 <= i0 < P3 and 0 <= i1 < P2 and i3 >= 0 and 16i3 < P0 and 0 <= i4 <= 15 and 0 <= i5 <= 15; S19_affine_store_var[i0, i1, 0, i3, i4, i5, 0] : 0 <= i0 < P3 and 0 <= i1 < P2 and i3 >= 0 and 16i3 < P0 and 0 <= i4 <= 15 and 0 <= i5 <= 15; S31_llvm_bitcast[i0, i1, 0, i3, i4, 0] : 0 <= i0 < P3 and 0 <= i1 < P2 and 0 <= i3 <= 15 and 0 <= i4 <= 15; S1_memref_ataddr[]; S21_llvm_bitcast[i0, i1, 0, i3, i4, i5, 0, i7] : 0 <= i0 < P3 and 0 <= i1 < P2 and i3 >= 0 and 16i3 < P0 and 0 <= i4 <= 15 and 0 <= i5 <= 15 and 0 <= i7 <= 15; S23_llvm_bitcast[i0, i1, 0, i3, i4, i5, 0, i7] : 0 <= i0 < P3 and 0 <= i1 < P2 and i3 >= 0 and 16i3 < P0 and 0 <= i4 <= 15 and 0 <= i5 <= 15 and 0 <= i7 <= 15; S10_memref_alloca[i0, i1, 0] : 0 <= i0 < P3 and 0 <= i1 < P2; S24_llvm_fmul[i0, i1, 0, i3, i4, i5, 0, i7] : 0 <= i0 < P3 and 0 <= i1 < P2 and i3 >= 0 and 16i3 < P0 and 0 <= i4 <= 15 and 0 <= i5 <= 15 and 0 <= i7 <= 15; S5_arith_index_cast[]; S14_affine_vector_store[i0, i1, 0, i3, i4, i5, 0] : 0 <= i0 < P3 and 0 <= i1 < P2 and i3 >= 0 and 16i3 < P0 and 0 <= i4 <= 15 and 0 <= i5 <= 15; S30_affine_load[i0, i1, 0, i3, i4, 0] : 0 <= i0 < P3 and 0 <= i1 < P2 and 0 <= i3 <= 15 and 0 <= i4 <= 15; S26_affine_yield[i0, i1, 0, i3, i4, i5, 0, i7] : 0 <= i0 < P3 and 0 <= i1 < P2 and i3 >= 0 and 16i3 < P0 and 0 <= i4 <= 15 and 0 <= i5 <= 15 and 0 <= i7 <= 15; S34_affine_yield[i0, i1, 0] : 0 <= i0 < P3 and 0 <= i1 < P2; S8_memref_alloca[i0, i1, 0] : 0 <= i0 < P3 and 0 <= i1 < P2; S22_affine_vector_load[i0, i1, 0, i3, i4, i5, 0, i7] : 0 <= i0 < P3 and 0 <= i1 < P2 and i3 >= 0 and 16i3 < P0 and 0 <= i4 <= 15 and 0 <= i5 <= 15 and 0 <= i7 <= 15; S16_affine_vector_store[i0, i1, 0, i3, i4, i5, 0] : 0 <= i0 < P3 and 0 <= i1 < P2 and i3 >= 0 and 16i3 < P0 and 0 <= i4 <= 15 and 0 <= i5 <= 15; S11_affine_store[i0, i1, 0, i3, i4, 0] : 0 <= i0 < P3 and 0 <= i1 < P2 and 0 <= i3 <= 15 and 0 <= i4 <= 15; S4_arith_index_cast[]; S27_affine_store[i0, i1, 0, i3, i4, i5, 0] : 0 <= i0 < P3 and 0 <= i1 < P2 and i3 >= 0 and 16i3 < P0 and 0 <= i4 <= 15 and 0 <= i5 <= 15; S33_affine_yield[i0, i1, 0, i3, i4, 0] : 0 <= i0 < P3 and 0 <= i1 < P2 and 0 <= i3 <= 15 and 0 <= i4 <= 15; S15_affine_vector_load[i0, i1, 0, i3, i4, i5, 0] : 0 <= i0 < P3 and 0 <= i1 < P2 and i3 >= 0 and 16i3 < P0 and 0 <= i4 <= 15 and 0 <= i5 <= 15; S0_llvm_mlir_constant[]; S12_affine_yield[i0, i1, 0, i3, i4, 0] : 0 <= i0 < P3 and 0 <= i1 < P2 and 0 <= i3 <= 15 and 0 <= i4 <= 15; S9_memref_alloca[i0, i1, 0] : 0 <= i0 < P3 and 0 <= i1 < P2; S20_affine_vector_load[i0, i1, 0, i3, i4, i5, 0, i7] : 0 <= i0 < P3 and 0 <= i1 < P2 and i3 >= 0 and 16i3 < P0 and 0 <= i4 <= 15 and 0 <= i5 <= 15 and 0 <= i7 <= 15; S3_memref_ataddr[]; S13_affine_vector_load[i0, i1, 0, i3, i4, i5, 0] : 0 <= i0 < P3 and 0 <= i1 < P2 and i3 >= 0 and 16i3 < P0 and 0 <= i4 <= 15 and 0 <= i5 <= 15 }"
child:
  sequence:
  - filter: "[P0, P1, P2, P3] -> { S0_llvm_mlir_constant[] }"
  - filter: "[P0, P1, P2, P3] -> { S1_memref_ataddr[] }"
  - filter: "[P0, P1, P2, P3] -> { S2_memref_ataddr[] }"
  - filter: "[P0, P1, P2, P3] -> { S3_memref_ataddr[] }"
  - filter: "[P0, P1, P2, P3] -> { S4_arith_index_cast[] }"
  - filter: "[P0, P1, P2, P3] -> { S5_arith_index_cast[] }"
  - filter: "[P0, P1, P2, P3] -> { S6_arith_index_cast[] }"
  - filter: "[P0, P1, P2, P3] -> { S7_arith_index_cast[] }"
  - filter: "[P0, P1, P2, P3] -> { S29_affine_yield[i0, i1, i2, i3]; S28_affine_yield[i0, i1, i2, i3, i4, i5, i6]; S25_llvm_fadd[i0, i1, i2, i3, i4, i5, i6, i7]; S32_affine_vector_store[i0, i1, i2, i3, i4, i5]; S17_affine_yield[i0, i1, i2, i3, i4, i5, i6]; S18_affine_load[i0, i1, i2, i3, i4, i5, i6]; S19_affine_store_var[i0, i1, i2, i3, i4, i5, i6]; S31_llvm_bitcast[i0, i1, i2, i3, i4, i5]; S21_llvm_bitcast[i0, i1, i2, i3, i4, i5, i6, i7]; S24_llvm_fmul[i0, i1, i2, i3, i4, i5, i6, i7]; S10_memref_alloca[i0, i1, i2]; S23_llvm_bitcast[i0, i1, i2, i3, i4, i5, i6, i7]; S14_affine_vector_store[i0, i1, i2, i3, i4, i5, i6]; S30_affine_load[i0, i1, i2, i3, i4, i5]; S26_affine_yield[i0, i1, i2, i3, i4, i5, i6, i7]; S34_affine_yield[i0, i1, i2]; S8_memref_alloca[i0, i1, i2]; S22_affine_vector_load[i0, i1, i2, i3, i4, i5, i6, i7]; S16_affine_vector_store[i0, i1, i2, i3, i4, i5, i6]; S11_affine_store[i0, i1, i2, i3, i4, i5]; S27_affine_store[i0, i1, i2, i3, i4, i5, i6]; S33_affine_yield[i0, i1, i2, i3, i4, i5]; S15_affine_vector_load[i0, i1, i2, i3, i4, i5, i6]; S12_affine_yield[i0, i1, i2, i3, i4, i5]; S9_memref_alloca[i0, i1, i2]; S20_affine_vector_load[i0, i1, i2, i3, i4, i5, i6, i7]; S13_affine_vector_load[i0, i1, i2, i3, i4, i5, i6] }"
    child:
      schedule: "[P0, P1, P2, P3] -> L16_affine_parallel[{ S29_affine_yield[i0, i1, i2, i3] -> [(i0)]; S28_affine_yield[i0, i1, i2, i3, i4, i5, i6] -> [(i0)]; S25_llvm_fadd[i0, i1, i2, i3, i4, i5, i6, i7] -> [(i0)]; S32_affine_vector_store[i0, i1, i2, i3, i4, i5] -> [(i0)]; S17_affine_yield[i0, i1, i2, i3, i4, i5, i6] -> [(i0)]; S18_affine_load[i0, i1, i2, i3, i4, i5, i6] -> [(i0)]; S19_affine_store_var[i0, i1, i2, i3, i4, i5, i6] -> [(i0)]; S31_llvm_bitcast[i0, i1, i2, i3, i4, i5] -> [(i0)]; S21_llvm_bitcast[i0, i1, i2, i3, i4, i5, i6, i7] -> [(i0)]; S24_llvm_fmul[i0, i1, i2, i3, i4, i5, i6, i7] -> [(i0)]; S10_memref_alloca[i0, i1, i2] -> [(i0)]; S23_llvm_bitcast[i0, i1, i2, i3, i4, i5, i6, i7] -> [(i0)]; S14_affine_vector_store[i0, i1, i2, i3, i4, i5, i6] -> [(i0)]; S30_affine_load[i0, i1, i2, i3, i4, i5] -> [(i0)]; S26_affine_yield[i0, i1, i2, i3, i4, i5, i6, i7] -> [(i0)]; S34_affine_yield[i0, i1, i2] -> [(i0)]; S8_memref_alloca[i0, i1, i2] -> [(i0)]; S22_affine_vector_load[i0, i1, i2, i3, i4, i5, i6, i7] -> [(i0)]; S16_affine_vector_store[i0, i1, i2, i3, i4, i5, i6] -> [(i0)]; S11_affine_store[i0, i1, i2, i3, i4, i5] -> [(i0)]; S27_affine_store[i0, i1, i2, i3, i4, i5, i6] -> [(i0)]; S33_affine_yield[i0, i1, i2, i3, i4, i5] -> [(i0)]; S15_affine_vector_load[i0, i1, i2, i3, i4, i5, i6] -> [(i0)]; S12_affine_yield[i0, i1, i2, i3, i4, i5] -> [(i0)]; S9_memref_alloca[i0, i1, i2] -> [(i0)]; S20_affine_vector_load[i0, i1, i2, i3, i4, i5, i6, i7] -> [(i0)]; S13_affine_vector_load[i0, i1, i2, i3, i4, i5, i6] -> [(i0)] }]"
      permutable: 1
      array_expansion: [ none ]
      child:
        schedule: "[P0, P1, P2, P3] -> L15_affine_parallel[{ S29_affine_yield[i0, i1, i2, i3] -> [(i1)]; S28_affine_yield[i0, i1, i2, i3, i4, i5, i6] -> [(i1)]; S25_llvm_fadd[i0, i1, i2, i3, i4, i5, i6, i7] -> [(i1)]; S32_affine_vector_store[i0, i1, i2, i3, i4, i5] -> [(i1)]; S17_affine_yield[i0, i1, i2, i3, i4, i5, i6] -> [(i1)]; S18_affine_load[i0, i1, i2, i3, i4, i5, i6] -> [(i1)]; S19_affine_store_var[i0, i1, i2, i3, i4, i5, i6] -> [(i1)]; S31_llvm_bitcast[i0, i1, i2, i3, i4, i5] -> [(i1)]; S21_llvm_bitcast[i0, i1, i2, i3, i4, i5, i6, i7] -> [(i1)]; S24_llvm_fmul[i0, i1, i2, i3, i4, i5, i6, i7] -> [(i1)]; S10_memref_alloca[i0, i1, i2] -> [(i1)]; S23_llvm_bitcast[i0, i1, i2, i3, i4, i5, i6, i7] -> [(i1)]; S14_affine_vector_store[i0, i1, i2, i3, i4, i5, i6] -> [(i1)]; S30_affine_load[i0, i1, i2, i3, i4, i5] -> [(i1)]; S26_affine_yield[i0, i1, i2, i3, i4, i5, i6, i7] -> [(i1)]; S34_affine_yield[i0, i1, i2] -> [(i1)]; S8_memref_alloca[i0, i1, i2] -> [(i1)]; S22_affine_vector_load[i0, i1, i2, i3, i4, i5, i6, i7] -> [(i1)]; S16_affine_vector_store[i0, i1, i2, i3, i4, i5, i6] -> [(i1)]; S11_affine_store[i0, i1, i2, i3, i4, i5] -> [(i1)]; S27_affine_store[i0, i1, i2, i3, i4, i5, i6] -> [(i1)]; S33_affine_yield[i0, i1, i2, i3, i4, i5] -> [(i1)]; S15_affine_vector_load[i0, i1, i2, i3, i4, i5, i6] -> [(i1)]; S12_affine_yield[i0, i1, i2, i3, i4, i5] -> [(i1)]; S9_memref_alloca[i0, i1, i2] -> [(i1)]; S20_affine_vector_load[i0, i1, i2, i3, i4, i5, i6, i7] -> [(i1)]; S13_affine_vector_load[i0, i1, i2, i3, i4, i5, i6] -> [(i1)] }]"
        permutable: 1
        array_expansion: [ none ]
        child:
          schedule: "[P0, P1, P2, P3] -> L14_affine_parallel[{ S29_affine_yield[i0, i1, i2, i3] -> [(i2)]; S28_affine_yield[i0, i1, i2, i3, i4, i5, i6] -> [(i2)]; S25_llvm_fadd[i0, i1, i2, i3, i4, i5, i6, i7] -> [(i2)]; S32_affine_vector_store[i0, i1, i2, i3, i4, i5] -> [(i2)]; S17_affine_yield[i0, i1, i2, i3, i4, i5, i6] -> [(i2)]; S18_affine_load[i0, i1, i2, i3, i4, i5, i6] -> [(i2)]; S19_affine_store_var[i0, i1, i2, i3, i4, i5, i6] -> [(i2)]; S31_llvm_bitcast[i0, i1, i2, i3, i4, i5] -> [(i2)]; S21_llvm_bitcast[i0, i1, i2, i3, i4, i5, i6, i7] -> [(i2)]; S24_llvm_fmul[i0, i1, i2, i3, i4, i5, i6, i7] -> [(i2)]; S10_memref_alloca[i0, i1, i2] -> [(i2)]; S23_llvm_bitcast[i0, i1, i2, i3, i4, i5, i6, i7] -> [(i2)]; S14_affine_vector_store[i0, i1, i2, i3, i4, i5, i6] -> [(i2)]; S30_affine_load[i0, i1, i2, i3, i4, i5] -> [(i2)]; S26_affine_yield[i0, i1, i2, i3, i4, i5, i6, i7] -> [(i2)]; S34_affine_yield[i0, i1, i2] -> [(i2)]; S8_memref_alloca[i0, i1, i2] -> [(i2)]; S22_affine_vector_load[i0, i1, i2, i3, i4, i5, i6, i7] -> [(i2)]; S16_affine_vector_store[i0, i1, i2, i3, i4, i5, i6] -> [(i2)]; S11_affine_store[i0, i1, i2, i3, i4, i5] -> [(i2)]; S27_affine_store[i0, i1, i2, i3, i4, i5, i6] -> [(i2)]; S33_affine_yield[i0, i1, i2, i3, i4, i5] -> [(i2)]; S15_affine_vector_load[i0, i1, i2, i3, i4, i5, i6] -> [(i2)]; S12_affine_yield[i0, i1, i2, i3, i4, i5] -> [(i2)]; S9_memref_alloca[i0, i1, i2] -> [(i2)]; S20_affine_vector_load[i0, i1, i2, i3, i4, i5, i6, i7] -> [(i2)]; S13_affine_vector_load[i0, i1, i2, i3, i4, i5, i6] -> [(i2)] }]"
          permutable: 1
          array_expansion: [ none ]
          child:
            sequence:
            - filter: "[P0, P1, P2, P3] -> { S8_memref_alloca[i0, i1, i2] }"
            - filter: "[P0, P1, P2, P3] -> { S9_memref_alloca[i0, i1, i2] }"
            - filter: "[P0, P1, P2, P3] -> { S10_memref_alloca[i0, i1, i2] }"
            - filter: "[P0, P1, P2, P3] -> { S12_affine_yield[i0, i1, i2, i3, i4, i5]; S11_affine_store[i0, i1, i2, i3, i4, i5] }"
              child:
                schedule: "[P0, P1, P2, P3] -> L2_affine_parallel[{ S12_affine_yield[i0, i1, i2, i3, i4, i5] -> [(i3)]; S11_affine_store[i0, i1, i2, i3, i4, i5] -> [(i3)] }]"
                permutable: 1
                array_expansion: [ none ]
                child:
                  schedule: "[P0, P1, P2, P3] -> L1_affine_parallel[{ S12_affine_yield[i0, i1, i2, i3, i4, i5] -> [(i4)]; S11_affine_store[i0, i1, i2, i3, i4, i5] -> [(i4)] }]"
                  permutable: 1
                  array_expansion: [ none ]
                  child:
                    schedule: "[P0, P1, P2, P3] -> L0_affine_parallel[{ S12_affine_yield[i0, i1, i2, i3, i4, i5] -> [(i5)]; S11_affine_store[i0, i1, i2, i3, i4, i5] -> [(i5)] }]"
                    permutable: 1
                    array_expansion: [ none ]
                    child:
                      sequence:
                      - filter: "[P0, P1, P2, P3] -> { S11_affine_store[i0, i1, i2, i3, i4, i5] }"
                      - filter: "[P0, P1, P2, P3] -> { S12_affine_yield[i0, i1, i2, i3, i4, i5] }"
            - filter: "[P0, P1, P2, P3] -> { S27_affine_store[i0, i1, i2, i3, i4, i5, i6]; S14_affine_vector_store[i0, i1, i2, i3, i4, i5, i6]; S15_affine_vector_load[i0, i1, i2, i3, i4, i5, i6]; S16_affine_vector_store[i0, i1, i2, i3, i4, i5, i6]; S24_llvm_fmul[i0, i1, i2, i3, i4, i5, i6, i7]; S22_affine_vector_load[i0, i1, i2, i3, i4, i5, i6, i7]; S21_llvm_bitcast[i0, i1, i2, i3, i4, i5, i6, i7]; S17_affine_yield[i0, i1, i2, i3, i4, i5, i6]; S18_affine_load[i0, i1, i2, i3, i4, i5, i6]; S20_affine_vector_load[i0, i1, i2, i3, i4, i5, i6, i7]; S29_affine_yield[i0, i1, i2, i3]; S19_affine_store_var[i0, i1, i2, i3, i4, i5, i6]; S13_affine_vector_load[i0, i1, i2, i3, i4, i5, i6]; S25_llvm_fadd[i0, i1, i2, i3, i4, i5, i6, i7]; S23_llvm_bitcast[i0, i1, i2, i3, i4, i5, i6, i7]; S28_affine_yield[i0, i1, i2, i3, i4, i5, i6]; S26_affine_yield[i0, i1, i2, i3, i4, i5, i6, i7] }"
              child:
                schedule: "[P0, P1, P2, P3] -> L10_affine_for[{ S27_affine_store[i0, i1, i2, i3, i4, i5, i6] -> [(i3)]; S14_affine_vector_store[i0, i1, i2, i3, i4, i5, i6] -> [(i3)]; S15_affine_vector_load[i0, i1, i2, i3, i4, i5, i6] -> [(i3)]; S16_affine_vector_store[i0, i1, i2, i3, i4, i5, i6] -> [(i3)]; S24_llvm_fmul[i0, i1, i2, i3, i4, i5, i6, i7] -> [(i3)]; S22_affine_vector_load[i0, i1, i2, i3, i4, i5, i6, i7] -> [(i3)]; S21_llvm_bitcast[i0, i1, i2, i3, i4, i5, i6, i7] -> [(i3)]; S17_affine_yield[i0, i1, i2, i3, i4, i5, i6] -> [(i3)]; S18_affine_load[i0, i1, i2, i3, i4, i5, i6] -> [(i3)]; S20_affine_vector_load[i0, i1, i2, i3, i4, i5, i6, i7] -> [(i3)]; S29_affine_yield[i0, i1, i2, i3] -> [(i3)]; S19_affine_store_var[i0, i1, i2, i3, i4, i5, i6] -> [(i3)]; S13_affine_vector_load[i0, i1, i2, i3, i4, i5, i6] -> [(i3)]; S25_llvm_fadd[i0, i1, i2, i3, i4, i5, i6, i7] -> [(i3)]; S23_llvm_bitcast[i0, i1, i2, i3, i4, i5, i6, i7] -> [(i3)]; S28_affine_yield[i0, i1, i2, i3, i4, i5, i6] -> [(i3)]; S26_affine_yield[i0, i1, i2, i3, i4, i5, i6, i7] -> [(i3)] }]"
                array_expansion: [ none ]
                child:
                  sequence:
                  - filter: "[P0, P1, P2, P3] -> { S15_affine_vector_load[i0, i1, i2, i3, i4, i5, i6]; S13_affine_vector_load[i0, i1, i2, i3, i4, i5, i6]; S14_affine_vector_store[i0, i1, i2, i3, i4, i5, i6]; S16_affine_vector_store[i0, i1, i2, i3, i4, i5, i6]; S17_affine_yield[i0, i1, i2, i3, i4, i5, i6] }"
                    child:
                      schedule: "[P0, P1, P2, P3] -> L5_affine_parallel[{ S14_affine_vector_store[i0, i1, i2, i3, i4, i5, i6] -> [(i4)]; S15_affine_vector_load[i0, i1, i2, i3, i4, i5, i6] -> [(i4)]; S16_affine_vector_store[i0, i1, i2, i3, i4, i5, i6] -> [(i4)]; S17_affine_yield[i0, i1, i2, i3, i4, i5, i6] -> [(i4)]; S13_affine_vector_load[i0, i1, i2, i3, i4, i5, i6] -> [(i4)] }]"
                      permutable: 1
                      array_expansion: [ none ]
                      child:
                        schedule: "[P0, P1, P2, P3] -> L4_affine_parallel[{ S14_affine_vector_store[i0, i1, i2, i3, i4, i5, i6] -> [(i5)]; S15_affine_vector_load[i0, i1, i2, i3, i4, i5, i6] -> [(i5)]; S16_affine_vector_store[i0, i1, i2, i3, i4, i5, i6] -> [(i5)]; S17_affine_yield[i0, i1, i2, i3, i4, i5, i6] -> [(i5)]; S13_affine_vector_load[i0, i1, i2, i3, i4, i5, i6] -> [(i5)] }]"
                        permutable: 1
                        array_expansion: [ none ]
                        child:
                          schedule: "[P0, P1, P2, P3] -> L3_affine_parallel[{ S14_affine_vector_store[i0, i1, i2, i3, i4, i5, i6] -> [(i6)]; S15_affine_vector_load[i0, i1, i2, i3, i4, i5, i6] -> [(i6)]; S16_affine_vector_store[i0, i1, i2, i3, i4, i5, i6] -> [(i6)]; S17_affine_yield[i0, i1, i2, i3, i4, i5, i6] -> [(i6)]; S13_affine_vector_load[i0, i1, i2, i3, i4, i5, i6] -> [(i6)] }]"
                          permutable: 1
                          array_expansion: [ none ]
                          child:
                            sequence:
                            - filter: "[P0, P1, P2, P3] -> { S13_affine_vector_load[i0, i1, i2, i3, i4, i5, i6] }"
                            - filter: "[P0, P1, P2, P3] -> { S14_affine_vector_store[i0, i1, i2, i3, i4, i5, i6] }"
                            - filter: "[P0, P1, P2, P3] -> { S15_affine_vector_load[i0, i1, i2, i3, i4, i5, i6] }"
                            - filter: "[P0, P1, P2, P3] -> { S16_affine_vector_store[i0, i1, i2, i3, i4, i5, i6] }"
                            - filter: "[P0, P1, P2, P3] -> { S17_affine_yield[i0, i1, i2, i3, i4, i5, i6] }"
                  - filter: "[P0, P1, P2, P3] -> { S23_llvm_bitcast[i0, i1, i2, i3, i4, i5, i6, i7]; S19_affine_store_var[i0, i1, i2, i3, i4, i5, i6]; S24_llvm_fmul[i0, i1, i2, i3, i4, i5, i6, i7]; S22_affine_vector_load[i0, i1, i2, i3, i4, i5, i6, i7]; S26_affine_yield[i0, i1, i2, i3, i4, i5, i6, i7]; S20_affine_vector_load[i0, i1, i2, i3, i4, i5, i6, i7]; S27_affine_store[i0, i1, i2, i3, i4, i5, i6]; S28_affine_yield[i0, i1, i2, i3, i4, i5, i6]; S21_llvm_bitcast[i0, i1, i2, i3, i4, i5, i6, i7]; S25_llvm_fadd[i0, i1, i2, i3, i4, i5, i6, i7]; S18_affine_load[i0, i1, i2, i3, i4, i5, i6] }"
                    child:
                      schedule: "[P0, P1, P2, P3] -> L9_affine_parallel[{ S27_affine_store[i0, i1, i2, i3, i4, i5, i6] -> [(i4)]; S24_llvm_fmul[i0, i1, i2, i3, i4, i5, i6, i7] -> [(i4)]; S22_affine_vector_load[i0, i1, i2, i3, i4, i5, i6, i7] -> [(i4)]; S21_llvm_bitcast[i0, i1, i2, i3, i4, i5, i6, i7] -> [(i4)]; S18_affine_load[i0, i1, i2, i3, i4, i5, i6] -> [(i4)]; S20_affine_vector_load[i0, i1, i2, i3, i4, i5, i6, i7] -> [(i4)]; S19_affine_store_var[i0, i1, i2, i3, i4, i5, i6] -> [(i4)]; S25_llvm_fadd[i0, i1, i2, i3, i4, i5, i6, i7] -> [(i4)]; S23_llvm_bitcast[i0, i1, i2, i3, i4, i5, i6, i7] -> [(i4)]; S28_affine_yield[i0, i1, i2, i3, i4, i5, i6] -> [(i4)]; S26_affine_yield[i0, i1, i2, i3, i4, i5, i6, i7] -> [(i4)] }]"
                      permutable: 1
                      array_expansion: [ none ]
                      child:
                        schedule: "[P0, P1, P2, P3] -> L8_affine_parallel[{ S27_affine_store[i0, i1, i2, i3, i4, i5, i6] -> [(i5)]; S24_llvm_fmul[i0, i1, i2, i3, i4, i5, i6, i7] -> [(i5)]; S22_affine_vector_load[i0, i1, i2, i3, i4, i5, i6, i7] -> [(i5)]; S21_llvm_bitcast[i0, i1, i2, i3, i4, i5, i6, i7] -> [(i5)]; S18_affine_load[i0, i1, i2, i3, i4, i5, i6] -> [(i5)]; S20_affine_vector_load[i0, i1, i2, i3, i4, i5, i6, i7] -> [(i5)]; S19_affine_store_var[i0, i1, i2, i3, i4, i5, i6] -> [(i5)]; S25_llvm_fadd[i0, i1, i2, i3, i4, i5, i6, i7] -> [(i5)]; S23_llvm_bitcast[i0, i1, i2, i3, i4, i5, i6, i7] -> [(i5)]; S28_affine_yield[i0, i1, i2, i3, i4, i5, i6] -> [(i5)]; S26_affine_yield[i0, i1, i2, i3, i4, i5, i6, i7] -> [(i5)] }]"
                        permutable: 1
                        array_expansion: [ none ]
                        child:
                          schedule: "[P0, P1, P2, P3] -> L7_affine_parallel[{ S27_affine_store[i0, i1, i2, i3, i4, i5, i6] -> [(i6)]; S24_llvm_fmul[i0, i1, i2, i3, i4, i5, i6, i7] -> [(i6)]; S22_affine_vector_load[i0, i1, i2, i3, i4, i5, i6, i7] -> [(i6)]; S21_llvm_bitcast[i0, i1, i2, i3, i4, i5, i6, i7] -> [(i6)]; S18_affine_load[i0, i1, i2, i3, i4, i5, i6] -> [(i6)]; S20_affine_vector_load[i0, i1, i2, i3, i4, i5, i6, i7] -> [(i6)]; S19_affine_store_var[i0, i1, i2, i3, i4, i5, i6] -> [(i6)]; S25_llvm_fadd[i0, i1, i2, i3, i4, i5, i6, i7] -> [(i6)]; S23_llvm_bitcast[i0, i1, i2, i3, i4, i5, i6, i7] -> [(i6)]; S28_affine_yield[i0, i1, i2, i3, i4, i5, i6] -> [(i6)]; S26_affine_yield[i0, i1, i2, i3, i4, i5, i6, i7] -> [(i6)] }]"
                          permutable: 1
                          array_expansion: [ none ]
                          child:
                            sequence:
                            - filter: "[P0, P1, P2, P3] -> { S18_affine_load[i0, i1, i2, i3, i4, i5, i6] }"
                            - filter: "[P0, P1, P2, P3] -> { S19_affine_store_var[i0, i1, i2, i3, i4, i5, i6] }"
                            - filter: "[P0, P1, P2, P3] -> { S24_llvm_fmul[i0, i1, i2, i3, i4, i5, i6, i7]; S22_affine_vector_load[i0, i1, i2, i3, i4, i5, i6, i7]; S26_affine_yield[i0, i1, i2, i3, i4, i5, i6, i7]; S20_affine_vector_load[i0, i1, i2, i3, i4, i5, i6, i7]; S23_llvm_bitcast[i0, i1, i2, i3, i4, i5, i6, i7]; S21_llvm_bitcast[i0, i1, i2, i3, i4, i5, i6, i7]; S25_llvm_fadd[i0, i1, i2, i3, i4, i5, i6, i7] }"
                              child:
                                schedule: "[P0, P1, P2, P3] -> L6_affine_for[{ S24_llvm_fmul[i0, i1, i2, i3, i4, i5, i6, i7] -> [(i7)]; S22_affine_vector_load[i0, i1, i2, i3, i4, i5, i6, i7] -> [(i7)]; S21_llvm_bitcast[i0, i1, i2, i3, i4, i5, i6, i7] -> [(i7)]; S20_affine_vector_load[i0, i1, i2, i3, i4, i5, i6, i7] -> [(i7)]; S25_llvm_fadd[i0, i1, i2, i3, i4, i5, i6, i7] -> [(i7)]; S23_llvm_bitcast[i0, i1, i2, i3, i4, i5, i6, i7] -> [(i7)]; S26_affine_yield[i0, i1, i2, i3, i4, i5, i6, i7] -> [(i7)] }]"
                                array_expansion: [ none ]
                                child:
                                  sequence:
                                  - filter: "[P0, P1, P2, P3] -> { S20_affine_vector_load[i0, i1, i2, i3, i4, i5, i6, i7] }"
                                  - filter: "[P0, P1, P2, P3] -> { S21_llvm_bitcast[i0, i1, i2, i3, i4, i5, i6, i7] }"
                                  - filter: "[P0, P1, P2, P3] -> { S22_affine_vector_load[i0, i1, i2, i3, i4, i5, i6, i7] }"
                                  - filter: "[P0, P1, P2, P3] -> { S23_llvm_bitcast[i0, i1, i2, i3, i4, i5, i6, i7] }"
                                  - filter: "[P0, P1, P2, P3] -> { S24_llvm_fmul[i0, i1, i2, i3, i4, i5, i6, i7] }"
                                  - filter: "[P0, P1, P2, P3] -> { S25_llvm_fadd[i0, i1, i2, i3, i4, i5, i6, i7] }"
                                  - filter: "[P0, P1, P2, P3] -> { S26_affine_yield[i0, i1, i2, i3, i4, i5, i6, i7] }"
                            - filter: "[P0, P1, P2, P3] -> { S27_affine_store[i0, i1, i2, i3, i4, i5, i6] }"
                            - filter: "[P0, P1, P2, P3] -> { S28_affine_yield[i0, i1, i2, i3, i4, i5, i6] }"
                  - filter: "[P0, P1, P2, P3] -> { S29_affine_yield[i0, i1, i2, i3] }"
            - filter: "[P0, P1, P2, P3] -> { S33_affine_yield[i0, i1, i2, i3, i4, i5]; S31_llvm_bitcast[i0, i1, i2, i3, i4, i5]; S32_affine_vector_store[i0, i1, i2, i3, i4, i5]; S30_affine_load[i0, i1, i2, i3, i4, i5] }"
              child:
                schedule: "[P0, P1, P2, P3] -> L13_affine_parallel[{ S30_affine_load[i0, i1, i2, i3, i4, i5] -> [(i3)]; S32_affine_vector_store[i0, i1, i2, i3, i4, i5] -> [(i3)]; S33_affine_yield[i0, i1, i2, i3, i4, i5] -> [(i3)]; S31_llvm_bitcast[i0, i1, i2, i3, i4, i5] -> [(i3)] }]"
                permutable: 1
                array_expansion: [ none ]
                child:
                  schedule: "[P0, P1, P2, P3] -> L12_affine_parallel[{ S30_affine_load[i0, i1, i2, i3, i4, i5] -> [(i4)]; S32_affine_vector_store[i0, i1, i2, i3, i4, i5] -> [(i4)]; S33_affine_yield[i0, i1, i2, i3, i4, i5] -> [(i4)]; S31_llvm_bitcast[i0, i1, i2, i3, i4, i5] -> [(i4)] }]"
                  permutable: 1
                  array_expansion: [ none ]
                  child:
                    schedule: "[P0, P1, P2, P3] -> L11_affine_parallel[{ S30_affine_load[i0, i1, i2, i3, i4, i5] -> [(i5)]; S32_affine_vector_store[i0, i1, i2, i3, i4, i5] -> [(i5)]; S33_affine_yield[i0, i1, i2, i3, i4, i5] -> [(i5)]; S31_llvm_bitcast[i0, i1, i2, i3, i4, i5] -> [(i5)] }]"
                    permutable: 1
                    array_expansion: [ none ]
                    child:
                      sequence:
                      - filter: "[P0, P1, P2, P3] -> { S30_affine_load[i0, i1, i2, i3, i4, i5] }"
                      - filter: "[P0, P1, P2, P3] -> { S31_llvm_bitcast[i0, i1, i2, i3, i4, i5] }"
                      - filter: "[P0, P1, P2, P3] -> { S32_affine_vector_store[i0, i1, i2, i3, i4, i5] }"
                      - filter: "[P0, P1, P2, P3] -> { S33_affine_yield[i0, i1, i2, i3, i4, i5] }"
            - filter: "[P0, P1, P2, P3] -> { S34_affine_yield[i0, i1, i2] }"
Accesses:
domain: "[P0, P1, P2, P3] -> { S6_arith_index_cast[]; S2_memref_ataddr[]; S29_affine_yield[i0, i1, 0, i3] : 0 <= i0 < P3 and 0 <= i1 < P2 and i3 >= 0 and 16i3 < P0; S28_affine_yield[i0, i1, 0, i3, i4, i5, 0] : 0 <= i0 < P3 and 0 <= i1 < P2 and i3 >= 0 and 16i3 < P0 and 0 <= i4 <= 15 and 0 <= i5 <= 15; S25_llvm_fadd[i0, i1, 0, i3, i4, i5, 0, i7] : 0 <= i0 < P3 and 0 <= i1 < P2 and i3 >= 0 and 16i3 < P0 and 0 <= i4 <= 15 and 0 <= i5 <= 15 and 0 <= i7 <= 15; S7_arith_index_cast[]; S32_affine_vector_store[i0, i1, 0, i3, i4, 0] : 0 <= i0 < P3 and 0 <= i1 < P2 and 0 <= i3 <= 15 and 0 <= i4 <= 15; S17_affine_yield[i0, i1, 0, i3, i4, i5, 0] : 0 <= i0 < P3 and 0 <= i1 < P2 and i3 >= 0 and 16i3 < P0 and 0 <= i4 <= 15 and 0 <= i5 <= 15; S18_affine_load[i0, i1, 0, i3, i4, i5, 0] : 0 <= i0 < P3 and 0 <= i1 < P2 and i3 >= 0 and 16i3 < P0 and 0 <= i4 <= 15 and 0 <= i5 <= 15; S19_affine_store_var[i0, i1, 0, i3, i4, i5, 0] : 0 <= i0 < P3 and 0 <= i1 < P2 and i3 >= 0 and 16i3 < P0 and 0 <= i4 <= 15 and 0 <= i5 <= 15; S31_llvm_bitcast[i0, i1, 0, i3, i4, 0] : 0 <= i0 < P3 and 0 <= i1 < P2 and 0 <= i3 <= 15 and 0 <= i4 <= 15; S1_memref_ataddr[]; S21_llvm_bitcast[i0, i1, 0, i3, i4, i5, 0, i7] : 0 <= i0 < P3 and 0 <= i1 < P2 and i3 >= 0 and 16i3 < P0 and 0 <= i4 <= 15 and 0 <= i5 <= 15 and 0 <= i7 <= 15; S23_llvm_bitcast[i0, i1, 0, i3, i4, i5, 0, i7] : 0 <= i0 < P3 and 0 <= i1 < P2 and i3 >= 0 and 16i3 < P0 and 0 <= i4 <= 15 and 0 <= i5 <= 15 and 0 <= i7 <= 15; S10_memref_alloca[i0, i1, 0] : 0 <= i0 < P3 and 0 <= i1 < P2; S24_llvm_fmul[i0, i1, 0, i3, i4, i5, 0, i7] : 0 <= i0 < P3 and 0 <= i1 < P2 and i3 >= 0 and 16i3 < P0 and 0 <= i4 <= 15 and 0 <= i5 <= 15 and 0 <= i7 <= 15; S5_arith_index_cast[]; S14_affine_vector_store[i0, i1, 0, i3, i4, i5, 0] : 0 <= i0 < P3 and 0 <= i1 < P2 and i3 >= 0 and 16i3 < P0 and 0 <= i4 <= 15 and 0 <= i5 <= 15; S30_affine_load[i0, i1, 0, i3, i4, 0] : 0 <= i0 < P3 and 0 <= i1 < P2 and 0 <= i3 <= 15 and 0 <= i4 <= 15; S26_affine_yield[i0, i1, 0, i3, i4, i5, 0, i7] : 0 <= i0 < P3 and 0 <= i1 < P2 and i3 >= 0 and 16i3 < P0 and 0 <= i4 <= 15 and 0 <= i5 <= 15 and 0 <= i7 <= 15; S34_affine_yield[i0, i1, 0] : 0 <= i0 < P3 and 0 <= i1 < P2; S8_memref_alloca[i0, i1, 0] : 0 <= i0 < P3 and 0 <= i1 < P2; S22_affine_vector_load[i0, i1, 0, i3, i4, i5, 0, i7] : 0 <= i0 < P3 and 0 <= i1 < P2 and i3 >= 0 and 16i3 < P0 and 0 <= i4 <= 15 and 0 <= i5 <= 15 and 0 <= i7 <= 15; S16_affine_vector_store[i0, i1, 0, i3, i4, i5, 0] : 0 <= i0 < P3 and 0 <= i1 < P2 and i3 >= 0 and 16i3 < P0 and 0 <= i4 <= 15 and 0 <= i5 <= 15; S11_affine_store[i0, i1, 0, i3, i4, 0] : 0 <= i0 < P3 and 0 <= i1 < P2 and 0 <= i3 <= 15 and 0 <= i4 <= 15; S4_arith_index_cast[]; S27_affine_store[i0, i1, 0, i3, i4, i5, 0] : 0 <= i0 < P3 and 0 <= i1 < P2 and i3 >= 0 and 16i3 < P0 and 0 <= i4 <= 15 and 0 <= i5 <= 15; S33_affine_yield[i0, i1, 0, i3, i4, 0] : 0 <= i0 < P3 and 0 <= i1 < P2 and 0 <= i3 <= 15 and 0 <= i4 <= 15; S15_affine_vector_load[i0, i1, 0, i3, i4, i5, 0] : 0 <= i0 < P3 and 0 <= i1 < P2 and i3 >= 0 and 16i3 < P0 and 0 <= i4 <= 15 and 0 <= i5 <= 15; S0_llvm_mlir_constant[]; S12_affine_yield[i0, i1, 0, i3, i4, 0] : 0 <= i0 < P3 and 0 <= i1 < P2 and 0 <= i3 <= 15 and 0 <= i4 <= 15; S9_memref_alloca[i0, i1, 0] : 0 <= i0 < P3 and 0 <= i1 < P2; S20_affine_vector_load[i0, i1, 0, i3, i4, i5, 0, i7] : 0 <= i0 < P3 and 0 <= i1 < P2 and i3 >= 0 and 16i3 < P0 and 0 <= i4 <= 15 and 0 <= i5 <= 15 and 0 <= i7 <= 15; S3_memref_ataddr[]; S13_affine_vector_load[i0, i1, 0, i3, i4, i5, 0] : 0 <= i0 < P3 and 0 <= i1 < P2 and i3 >= 0 and 16i3 < P0 and 0 <= i4 <= 15 and 0 <= i5 <= 15 }"
accesses:
  - S0_llvm_mlir_constant:
  - S1_memref_ataddr:
  - S2_memref_ataddr:
  - S3_memref_ataddr:
  - S4_arith_index_cast:
        - read "[P0, P1, P2, P3] -> { S4_arith_index_cast[] -> A_llvm_func_arg_11_0[] }"
  - S5_arith_index_cast:
        - read "[P0, P1, P2, P3] -> { S5_arith_index_cast[] -> A_llvm_func_arg_10_1[] }"
  - S6_arith_index_cast:
        - read "[P0, P1, P2, P3] -> { S6_arith_index_cast[] -> A_llvm_func_arg_1_2[] }"
  - S7_arith_index_cast:
        - read "[P0, P1, P2, P3] -> { S7_arith_index_cast[] -> A_llvm_func_arg_0_3[] }"
  - S8_memref_alloca:
  - S9_memref_alloca:
  - S10_memref_alloca:
  - S11_affine_store:
        - must_write "[P0, P1, P2, P3] -> { S11_affine_store[i0, i1, i2, i3, i4, i5] -> A_memref_alloca_res_4[i3, i4, i5] }"
  - S12_affine_yield:
  - S13_affine_vector_load:
        - read "[P0, P1, P2, P3] -> { S13_affine_vector_load[i0, i1, 0, i3, i4, i5, 0] -> A_memref_ataddr_res_5[o0] : 0 <= i0 < P3 and 0 <= i1 < P2 and i3 >= 0 and 16i3 < P0 and 0 <= i4 <= 15 and 0 <= i5 <= 15 }"
        - must_write "[P0, P1, P2, P3] -> { S13_affine_vector_load[i0, i1, i2, i3, i4, i5, i6] -> A_affine_vector_load_res_6[] }"
  - S14_affine_vector_store:
        - must_write "[P0, P1, P2, P3] -> { S14_affine_vector_store[i0, i1, i2, i3, i4, i5, i6] -> A_memref_alloca_res_7[4i4 + 64i5] }"
        - read "[P0, P1, P2, P3] -> { S14_affine_vector_store[i0, i1, i2, i3, i4, i5, i6] -> A_affine_vector_load_res_6[] }"
  - S15_affine_vector_load:
        - read "[P0, P1, P2, P3] -> { S15_affine_vector_load[i0, i1, 0, i3, i4, i5, 0] -> A_memref_ataddr_res_8[o0] : 0 <= i0 < P3 and 0 <= i1 < P2 and i3 >= 0 and 16i3 < P0 and 0 <= i4 <= 15 and 0 <= i5 <= 15 }"
        - must_write "[P0, P1, P2, P3] -> { S15_affine_vector_load[i0, i1, i2, i3, i4, i5, i6] -> A_affine_vector_load_res_9[] }"
  - S16_affine_vector_store:
        - must_write "[P0, P1, P2, P3] -> { S16_affine_vector_store[i0, i1, i2, i3, i4, i5, i6] -> A_memref_alloca_res_10[4i4 + 64i5] }"
        - read "[P0, P1, P2, P3] -> { S16_affine_vector_store[i0, i1, i2, i3, i4, i5, i6] -> A_affine_vector_load_res_9[] }"
  - S17_affine_yield:
        - kill "[P0, P1, P2, P3] -> { S17_affine_yield[i0, i1, 0, i3, i4, i5, 0] -> A_affine_vector_load_res_6[] : 0 <= i0 < P3 and 0 <= i1 < P2 and i3 >= 0 and 16i3 < P0 and 0 <= i4 <= 15 and 0 <= i5 <= 15 }"
        - kill "[P0, P1, P2, P3] -> { S17_affine_yield[i0, i1, 0, i3, i4, i5, 0] -> A_affine_vector_load_res_9[] : 0 <= i0 < P3 and 0 <= i1 < P2 and i3 >= 0 and 16i3 < P0 and 0 <= i4 <= 15 and 0 <= i5 <= 15 }"
  - S18_affine_load:
        - read "[P0, P1, P2, P3] -> { S18_affine_load[i0, i1, i2, i3, i4, i5, i6] -> A_memref_alloca_res_4[i4, i5, i6] }"
        - must_write "[P0, P1, P2, P3] -> { S18_affine_load[i0, i1, i2, i3, i4, i5, i6] -> A_affine_load_res_11[] }"
  - S19_affine_store_var:
        - read "[P0, P1, P2, P3] -> { S19_affine_store_var[i0, i1, i2, i3, i4, i5, i6] -> A_affine_load_res_11[] }"
        - must_write "[P0, P1, P2, P3] -> { S19_affine_store_var[i0, i1, i2, i3, i4, i5, i6] -> A_affine_for_res_12[] }"
  - S20_affine_vector_load:
        - read "[P0, P1, P2, P3] -> { S20_affine_vector_load[i0, i1, i2, i3, i4, i5, i6, i7] -> A_memref_alloca_res_7[64i5 + 4i7] }"
        - must_write "[P0, P1, P2, P3] -> { S20_affine_vector_load[i0, i1, i2, i3, i4, i5, i6, i7] -> A_affine_vector_load_res_13[] }"
  - S21_llvm_bitcast:
        - must_write "[P0, P1, P2, P3] -> { S21_llvm_bitcast[i0, i1, i2, i3, i4, i5, i6, i7] -> A_llvm_bitcast_res_14[] }"
        - read "[P0, P1, P2, P3] -> { S21_llvm_bitcast[i0, i1, i2, i3, i4, i5, i6, i7] -> A_affine_vector_load_res_13[] }"
  - S22_affine_vector_load:
        - read "[P0, P1, P2, P3] -> { S22_affine_vector_load[i0, i1, i2, i3, i4, i5, i6, i7] -> A_memref_alloca_res_10[4i4 + 64i7] }"
        - must_write "[P0, P1, P2, P3] -> { S22_affine_vector_load[i0, i1, i2, i3, i4, i5, i6, i7] -> A_affine_vector_load_res_15[] }"
  - S23_llvm_bitcast:
        - must_write "[P0, P1, P2, P3] -> { S23_llvm_bitcast[i0, i1, i2, i3, i4, i5, i6, i7] -> A_llvm_bitcast_res_16[] }"
        - read "[P0, P1, P2, P3] -> { S23_llvm_bitcast[i0, i1, i2, i3, i4, i5, i6, i7] -> A_affine_vector_load_res_15[] }"
  - S24_llvm_fmul:
        - must_write "[P0, P1, P2, P3] -> { S24_llvm_fmul[i0, i1, i2, i3, i4, i5, i6, i7] -> A_llvm_fmul_res_17[] }"
        - read "[P0, P1, P2, P3] -> { S24_llvm_fmul[i0, i1, i2, i3, i4, i5, i6, i7] -> A_llvm_bitcast_res_14[] }"
        - read "[P0, P1, P2, P3] -> { S24_llvm_fmul[i0, i1, i2, i3, i4, i5, i6, i7] -> A_llvm_bitcast_res_16[] }"
  - S25_llvm_fadd:
        - must_write "[P0, P1, P2, P3] -> { S25_llvm_fadd[i0, i1, i2, i3, i4, i5, i6, i7] -> A_llvm_fadd_res_18[] }"
        - read "[P0, P1, P2, P3] -> { S25_llvm_fadd[i0, i1, i2, i3, i4, i5, i6, i7] -> A_affine_for_res_12[] }"
        - read "[P0, P1, P2, P3] -> { S25_llvm_fadd[i0, i1, i2, i3, i4, i5, i6, i7] -> A_llvm_fmul_res_17[] }"
  - S26_affine_yield:
        - must_write "[P0, P1, P2, P3] -> { S26_affine_yield[i0, i1, i2, i3, i4, i5, i6, i7] -> A_affine_for_res_12[] }"
        - read "[P0, P1, P2, P3] -> { S26_affine_yield[i0, i1, i2, i3, i4, i5, i6, i7] -> A_llvm_fadd_res_18[] }"
        - kill "[P0, P1, P2, P3] -> { S26_affine_yield[i0, i1, 0, i3, i4, i5, 0, i7] -> A_affine_vector_load_res_13[] : 0 <= i0 < P3 and 0 <= i1 < P2 and i3 >= 0 and 16i3 < P0 and 0 <= i4 <= 15 and 0 <= i5 <= 15 and 0 <= i7 <= 15 }"
        - kill "[P0, P1, P2, P3] -> { S26_affine_yield[i0, i1, 0, i3, i4, i5, 0, i7] -> A_llvm_bitcast_res_14[] : 0 <= i0 < P3 and 0 <= i1 < P2 and i3 >= 0 and 16i3 < P0 and 0 <= i4 <= 15 and 0 <= i5 <= 15 and 0 <= i7 <= 15 }"
        - kill "[P0, P1, P2, P3] -> { S26_affine_yield[i0, i1, 0, i3, i4, i5, 0, i7] -> A_affine_vector_load_res_15[] : 0 <= i0 < P3 and 0 <= i1 < P2 and i3 >= 0 and 16i3 < P0 and 0 <= i4 <= 15 and 0 <= i5 <= 15 and 0 <= i7 <= 15 }"
        - kill "[P0, P1, P2, P3] -> { S26_affine_yield[i0, i1, 0, i3, i4, i5, 0, i7] -> A_llvm_bitcast_res_16[] : 0 <= i0 < P3 and 0 <= i1 < P2 and i3 >= 0 and 16i3 < P0 and 0 <= i4 <= 15 and 0 <= i5 <= 15 and 0 <= i7 <= 15 }"
        - kill "[P0, P1, P2, P3] -> { S26_affine_yield[i0, i1, 0, i3, i4, i5, 0, i7] -> A_llvm_fmul_res_17[] : 0 <= i0 < P3 and 0 <= i1 < P2 and i3 >= 0 and 16i3 < P0 and 0 <= i4 <= 15 and 0 <= i5 <= 15 and 0 <= i7 <= 15 }"
        - kill "[P0, P1, P2, P3] -> { S26_affine_yield[i0, i1, 0, i3, i4, i5, 0, i7] -> A_llvm_fadd_res_18[] : 0 <= i0 < P3 and 0 <= i1 < P2 and i3 >= 0 and 16i3 < P0 and 0 <= i4 <= 15 and 0 <= i5 <= 15 and 0 <= i7 <= 15 }"
  - S27_affine_store:
        - must_write "[P0, P1, P2, P3] -> { S27_affine_store[i0, i1, i2, i3, i4, i5, i6] -> A_memref_alloca_res_4[i4, i5, i6] }"
        - read "[P0, P1, P2, P3] -> { S27_affine_store[i0, i1, i2, i3, i4, i5, i6] -> A_affine_for_res_12[] }"
  - S28_affine_yield:
        - kill "[P0, P1, P2, P3] -> { S28_affine_yield[i0, i1, 0, i3, i4, i5, 0] -> A_affine_load_res_11[] : 0 <= i0 < P3 and 0 <= i1 < P2 and i3 >= 0 and 16i3 < P0 and 0 <= i4 <= 15 and 0 <= i5 <= 15 }"
        - kill "[P0, P1, P2, P3] -> { S28_affine_yield[i0, i1, 0, i3, i4, i5, 0] -> A_affine_for_res_12[] : 0 <= i0 < P3 and 0 <= i1 < P2 and i3 >= 0 and 16i3 < P0 and 0 <= i4 <= 15 and 0 <= i5 <= 15 }"
  - S29_affine_yield:
  - S30_affine_load:
        - read "[P0, P1, P2, P3] -> { S30_affine_load[i0, i1, i2, i3, i4, i5] -> A_memref_alloca_res_4[i3, i4, i5] }"
        - must_write "[P0, P1, P2, P3] -> { S30_affine_load[i0, i1, i2, i3, i4, i5] -> A_affine_load_res_19[] }"
  - S31_llvm_bitcast:
        - must_write "[P0, P1, P2, P3] -> { S31_llvm_bitcast[i0, i1, i2, i3, i4, i5] -> A_llvm_bitcast_res_20[] }"
        - read "[P0, P1, P2, P3] -> { S31_llvm_bitcast[i0, i1, i2, i3, i4, i5] -> A_affine_load_res_19[] }"
  - S32_affine_vector_store:
        - may_write "[P0, P1, P2, P3] -> { S32_affine_vector_store[i0, i1, 0, i3, i4, 0] -> A_memref_ataddr_res_21[o0] : 0 <= i0 < P3 and 0 <= i1 < P2 and 0 <= i3 <= 15 and 0 <= i4 <= 15 }"
        - read "[P0, P1, P2, P3] -> { S32_affine_vector_store[i0, i1, i2, i3, i4, i5] -> A_llvm_bitcast_res_20[] }"
  - S33_affine_yield:
        - kill "[P0, P1, P2, P3] -> { S33_affine_yield[i0, i1, 0, i3, i4, 0] -> A_affine_load_res_19[] : 0 <= i0 < P3 and 0 <= i1 < P2 and 0 <= i3 <= 15 and 0 <= i4 <= 15 }"
        - kill "[P0, P1, P2, P3] -> { S33_affine_yield[i0, i1, 0, i3, i4, 0] -> A_llvm_bitcast_res_20[] : 0 <= i0 < P3 and 0 <= i1 < P2 and 0 <= i3 <= 15 and 0 <= i4 <= 15 }"
  - S34_affine_yield:
        - kill "[P0, P1, P2, P3] -> { S34_affine_yield[i0, i1, 0] -> A_memref_alloca_res_7[o0] : 0 <= i0 < P3 and 0 <= i1 < P2 }"
        - kill "[P0, P1, P2, P3] -> { S34_affine_yield[i0, i1, 0] -> A_memref_alloca_res_10[o0] : 0 <= i0 < P3 and 0 <= i1 < P2 }"
        - kill "[P0, P1, P2, P3] -> { S34_affine_yield[i0, i1, 0] -> A_memref_alloca_res_4[o0, o1, o2] : 0 <= i0 < P3 and 0 <= i1 < P2 }"
  - S35_llvm_return:
Schedule:
domain: "[P0, P1, P2, P3] -> { S4_arith_index_cast[]; S10_memref_alloca[i0, i1, 0] : 0 <= i0 < P3 and 0 <= i1 < P2; S1_memref_ataddr[]; RS0_affine_parallel[i0, i1, 0] : 0 <= i0 < P3 and 0 <= i1 < P2; RS2_affine_parallel[i0, i1, 0, i3] : 0 <= i0 < P3 and 0 <= i1 < P2 and i3 >= 0 and 16i3 < P0; S9_memref_alloca[i0, i1, 0] : 0 <= i0 < P3 and 0 <= i1 < P2; S8_memref_alloca[i0, i1, 0] : 0 <= i0 < P3 and 0 <= i1 < P2; S5_arith_index_cast[]; S3_memref_ataddr[]; S6_arith_index_cast[]; S2_memref_ataddr[]; RS1_affine_parallel[i0, i1, 0, i3] : 0 <= i0 < P3 and 0 <= i1 < P2 and i3 >= 0 and 16i3 < P0; S29_affine_yield[i0, i1, 0, i3] : 0 <= i0 < P3 and 0 <= i1 < P2 and i3 >= 0 and 16i3 < P0; S7_arith_index_cast[]; S34_affine_yield[i0, i1, 0] : 0 <= i0 < P3 and 0 <= i1 < P2; S0_llvm_mlir_constant[]; RS3_affine_parallel[i0, i1, 0] : 0 <= i0 < P3 and 0 <= i1 < P2 }"
child:
  sequence:
  - filter: "[P0, P1, P2, P3] -> { S0_llvm_mlir_constant[] }"
  - filter: "[P0, P1, P2, P3] -> { S1_memref_ataddr[] }"
  - filter: "[P0, P1, P2, P3] -> { S2_memref_ataddr[] }"
  - filter: "[P0, P1, P2, P3] -> { S3_memref_ataddr[] }"
  - filter: "[P0, P1, P2, P3] -> { S4_arith_index_cast[] }"
  - filter: "[P0, P1, P2, P3] -> { S5_arith_index_cast[] }"
  - filter: "[P0, P1, P2, P3] -> { S6_arith_index_cast[] }"
  - filter: "[P0, P1, P2, P3] -> { S7_arith_index_cast[] }"
  - filter: "[P0, P1, P2, P3] -> { S34_affine_yield[i0, i1, i2]; RS2_affine_parallel[i0, i1, i2, i3]; RS1_affine_parallel[i0, i1, i2, i3]; S8_memref_alloca[i0, i1, i2]; RS3_affine_parallel[i0, i1, i2]; S29_affine_yield[i0, i1, i2, i3]; S10_memref_alloca[i0, i1, i2]; S9_memref_alloca[i0, i1, i2]; RS0_affine_parallel[i0, i1, i2] }"
    child:
      schedule: "[P0, P1, P2, P3] -> L3_affine_parallel[{ RS0_affine_parallel[i0, i1, i2] -> [(i0)]; RS2_affine_parallel[i0, i1, i2, i3] -> [(i0)]; S9_memref_alloca[i0, i1, i2] -> [(i0)]; S8_memref_alloca[i0, i1, i2] -> [(i0)]; RS1_affine_parallel[i0, i1, i2, i3] -> [(i0)]; S29_affine_yield[i0, i1, i2, i3] -> [(i0)]; S34_affine_yield[i0, i1, i2] -> [(i0)]; RS3_affine_parallel[i0, i1, i2] -> [(i0)]; S10_memref_alloca[i0, i1, i2] -> [(i0)] }]"
      permutable: 1
      array_expansion: [ none ]
      child:
        schedule: "[P0, P1, P2, P3] -> L2_affine_parallel[{ RS0_affine_parallel[i0, i1, i2] -> [(i1)]; RS2_affine_parallel[i0, i1, i2, i3] -> [(i1)]; S9_memref_alloca[i0, i1, i2] -> [(i1)]; S8_memref_alloca[i0, i1, i2] -> [(i1)]; RS1_affine_parallel[i0, i1, i2, i3] -> [(i1)]; S29_affine_yield[i0, i1, i2, i3] -> [(i1)]; S34_affine_yield[i0, i1, i2] -> [(i1)]; RS3_affine_parallel[i0, i1, i2] -> [(i1)]; S10_memref_alloca[i0, i1, i2] -> [(i1)] }]"
        permutable: 1
        array_expansion: [ none ]
        child:
          schedule: "[P0, P1, P2, P3] -> L1_affine_parallel[{ RS0_affine_parallel[i0, i1, i2] -> [(i2)]; RS2_affine_parallel[i0, i1, i2, i3] -> [(i2)]; S9_memref_alloca[i0, i1, i2] -> [(i2)]; S8_memref_alloca[i0, i1, i2] -> [(i2)]; RS1_affine_parallel[i0, i1, i2, i3] -> [(i2)]; S29_affine_yield[i0, i1, i2, i3] -> [(i2)]; S34_affine_yield[i0, i1, i2] -> [(i2)]; RS3_affine_parallel[i0, i1, i2] -> [(i2)]; S10_memref_alloca[i0, i1, i2] -> [(i2)] }]"
          permutable: 1
          array_expansion: [ none ]
          child:
            sequence:
            - filter: "[P0, P1, P2, P3] -> { S8_memref_alloca[i0, i1, i2] }"
            - filter: "[P0, P1, P2, P3] -> { S9_memref_alloca[i0, i1, i2] }"
            - filter: "[P0, P1, P2, P3] -> { S10_memref_alloca[i0, i1, i2] }"
            - filter: "[P0, P1, P2, P3] -> { RS0_affine_parallel[i0, i1, i2] }"
            - filter: "[P0, P1, P2, P3] -> { S29_affine_yield[i0, i1, i2, i3]; RS2_affine_parallel[i0, i1, i2, i3]; RS1_affine_parallel[i0, i1, i2, i3] }"
              child:
                schedule: "[P0, P1, P2, P3] -> L0_affine_for[{ RS2_affine_parallel[i0, i1, i2, i3] -> [(i3)]; RS1_affine_parallel[i0, i1, i2, i3] -> [(i3)]; S29_affine_yield[i0, i1, i2, i3] -> [(i3)] }]"
                array_expansion: [ none ]
                child:
                  sequence:
                  - filter: "[P0, P1, P2, P3] -> { RS1_affine_parallel[i0, i1, i2, i3] }"
                  - filter: "[P0, P1, P2, P3] -> { RS2_affine_parallel[i0, i1, i2, i3] }"
                  - filter: "[P0, P1, P2, P3] -> { S29_affine_yield[i0, i1, i2, i3] }"
            - filter: "[P0, P1, P2, P3] -> { RS3_affine_parallel[i0, i1, i2] }"
            - filter: "[P0, P1, P2, P3] -> { S34_affine_yield[i0, i1, i2] }"
Accesses:
domain: "[P0, P1, P2, P3] -> { S4_arith_index_cast[]; S10_memref_alloca[i0, i1, 0] : 0 <= i0 < P3 and 0 <= i1 < P2; S1_memref_ataddr[]; RS0_affine_parallel[i0, i1, 0] : 0 <= i0 < P3 and 0 <= i1 < P2; RS2_affine_parallel[i0, i1, 0, i3] : 0 <= i0 < P3 and 0 <= i1 < P2 and i3 >= 0 and 16i3 < P0; S9_memref_alloca[i0, i1, 0] : 0 <= i0 < P3 and 0 <= i1 < P2; S8_memref_alloca[i0, i1, 0] : 0 <= i0 < P3 and 0 <= i1 < P2; S5_arith_index_cast[]; S3_memref_ataddr[]; S6_arith_index_cast[]; S2_memref_ataddr[]; RS1_affine_parallel[i0, i1, 0, i3] : 0 <= i0 < P3 and 0 <= i1 < P2 and i3 >= 0 and 16i3 < P0; S29_affine_yield[i0, i1, 0, i3] : 0 <= i0 < P3 and 0 <= i1 < P2 and i3 >= 0 and 16i3 < P0; S7_arith_index_cast[]; S34_affine_yield[i0, i1, 0] : 0 <= i0 < P3 and 0 <= i1 < P2; S0_llvm_mlir_constant[]; RS3_affine_parallel[i0, i1, 0] : 0 <= i0 < P3 and 0 <= i1 < P2 }"
accesses:
  - S0_llvm_mlir_constant:
  - S1_memref_ataddr:
  - S2_memref_ataddr:
  - S3_memref_ataddr:
  - S4_arith_index_cast:
        - read "[P0, P1, P2, P3] -> { S4_arith_index_cast[] -> A_llvm_func_arg_11_0[] }"
  - S5_arith_index_cast:
        - read "[P0, P1, P2, P3] -> { S5_arith_index_cast[] -> A_llvm_func_arg_10_1[] }"
  - S6_arith_index_cast:
        - read "[P0, P1, P2, P3] -> { S6_arith_index_cast[] -> A_llvm_func_arg_1_2[] }"
  - S7_arith_index_cast:
        - read "[P0, P1, P2, P3] -> { S7_arith_index_cast[] -> A_llvm_func_arg_0_3[] }"
  - S8_memref_alloca:
  - S9_memref_alloca:
  - S10_memref_alloca:
  - S29_affine_yield:
  - S34_affine_yield:
        - kill "[P0, P1, P2, P3] -> { S34_affine_yield[i0, i1, 0] -> A_memref_alloca_res_7[o0] : 0 <= i0 < P3 and 0 <= i1 < P2 }"
        - kill "[P0, P1, P2, P3] -> { S34_affine_yield[i0, i1, 0] -> A_memref_alloca_res_10[o0] : 0 <= i0 < P3 and 0 <= i1 < P2 }"
        - kill "[P0, P1, P2, P3] -> { S34_affine_yield[i0, i1, 0] -> A_memref_alloca_res_4[o0, o1, o2] : 0 <= i0 < P3 and 0 <= i1 < P2 }"
  - S35_llvm_return:
  - RS0_affine_parallel:
        - must_write "[P0, P1, P2, P3] -> { RS0_affine_parallel[i0, i1, i2] -> A_memref_alloca_res_4[o0, o1, 0] : P2 > 0 and P3 > 0 and 0 <= o0 <= 15 and 0 <= o1 <= 15 }"
  - RS1_affine_parallel:
        - read "[P0, P1, P2, P3] -> { RS1_affine_parallel[i0, i1, 0, i3] -> A_memref_ataddr_res_5[o0] : 0 <= i0 < P3 and 0 <= i1 < P2 and i3 >= 0 and 16i3 < P0 }"
        - must_write "[P0, P1, P2, P3] -> { RS1_affine_parallel[i0, i1, i2, i3] -> A_memref_alloca_res_7[o0] : (o0) mod 4 = 0 and P0 > 0 and P2 > 0 and P3 > 0 and -3 <= o0 <= 1020 and 64*floor((3 + o0)/64) <= o0 }"
        - read "[P0, P1, P2, P3] -> { RS1_affine_parallel[i0, i1, 0, i3] -> A_memref_ataddr_res_8[o0] : 0 <= i0 < P3 and 0 <= i1 < P2 and i3 >= 0 and 16i3 < P0 }"
        - must_write "[P0, P1, P2, P3] -> { RS1_affine_parallel[i0, i1, i2, i3] -> A_memref_alloca_res_10[o0] : (o0) mod 4 = 0 and P0 > 0 and P2 > 0 and P3 > 0 and -3 <= o0 <= 1020 and 64*floor((3 + o0)/64) <= o0 }"
  - RS2_affine_parallel:
        - read "[P0, P1, P2, P3] -> { RS2_affine_parallel[i0, i1, i2, i3] -> A_memref_alloca_res_4[o0, o1, 0] : P0 > 0 and P2 > 0 and P3 > 0 and 0 <= o0 <= 15 and 0 <= o1 <= 15 }"
        - read "[P0, P1, P2, P3] -> { RS2_affine_parallel[i0, i1, i2, i3] -> A_memref_alloca_res_7[o0] : (o0) mod 4 = 0 and P0 > 0 and P2 > 0 and P3 > 0 and -3 <= o0 <= 1020 and 64*floor((3 + o0)/64) <= o0 }"
        - read "[P0, P1, P2, P3] -> { RS2_affine_parallel[i0, i1, i2, i3] -> A_memref_alloca_res_10[o0] : (o0) mod 4 = 0 and P0 > 0 and P2 > 0 and P3 > 0 and -3 <= o0 <= 1020 and 64*floor((3 + o0)/64) <= o0 }"
        - must_write "[P0, P1, P2, P3] -> { RS2_affine_parallel[i0, i1, i2, i3] -> A_memref_alloca_res_4[o0, o1, 0] : P0 > 0 and P2 > 0 and P3 > 0 and 0 <= o0 <= 15 and 0 <= o1 <= 15 }"
  - RS3_affine_parallel:
        - read "[P0, P1, P2, P3] -> { RS3_affine_parallel[i0, i1, i2] -> A_memref_alloca_res_4[o0, o1, 0] : P2 > 0 and P3 > 0 and 0 <= o0 <= 15 and 0 <= o1 <= 15 }"
        - may_write "[P0, P1, P2, P3] -> { RS3_affine_parallel[i0, i1, 0] -> A_memref_ataddr_res_21[o0] : 0 <= i0 < P3 and 0 <= i1 < P2 }"
ReductionTagMap: [P0, P1, P2, P3] -> {  }
TaggedStmtDomain: [P2, P3, P0, P1] -> { [RS2_affine_parallel[i0, i1, i2, i3] -> S18_affine_load_Read0[]]; [RS0_affine_parallel[i0, i1, i2] -> S11_affine_store_Write0[]]; [RS1_affine_parallel[i0, i1, i2, i3] -> S14_affine_vector_store_Write0[]]; [S6_arith_index_cast[] -> S6_arith_index_cast_Read0[]]; [S4_arith_index_cast[] -> S4_arith_index_cast_Read0[]]; [RS2_affine_parallel[i0, i1, i2, i3] -> S27_affine_store_Write0[]]; [S34_affine_yield[i0, i1, i2] -> S34_affine_yield2[]]; [RS2_affine_parallel[i0, i1, i2, i3] -> S20_affine_vector_load_Read0[]]; [S34_affine_yield[i0, i1, i2] -> S34_affine_yield1[]]; [RS1_affine_parallel[i0, i1, i2, i3] -> S15_affine_vector_load_Read0[]]; [S34_affine_yield[i0, i1, i2] -> S34_affine_yield0[]]; [RS2_affine_parallel[i0, i1, i2, i3] -> S22_affine_vector_load_Read0[]]; [S7_arith_index_cast[] -> S7_arith_index_cast_Read0[]]; [RS3_affine_parallel[i0, i1, i2] -> S32_affine_vector_store_MayWrite0[]]; [RS3_affine_parallel[i0, i1, i2] -> S30_affine_load_Read0[]]; [RS1_affine_parallel[i0, i1, i2, i3] -> S16_affine_vector_store_Write0[]]; [RS1_affine_parallel[i0, i1, i2, i3] -> S13_affine_vector_load_Read0[]]; [S5_arith_index_cast[] -> S5_arith_index_cast_Read0[]] }
dep_order for A_llvm_func_arg_11_0 [P2, P3, P0, P1] -> {  }
dep_order for A_llvm_func_arg_10_1 [P2, P3, P0, P1] -> {  }
dep_order for A_llvm_func_arg_1_2 [P2, P3, P0, P1] -> {  }
dep_order for A_llvm_func_arg_0_3 [P2, P3, P0, P1] -> {  }
dep_order for A_memref_alloca_res_4 [P2, P3, P0, P1] -> { RS3_affine_parallel[i0, i1, i2] -> RS2_affine_parallel[o0, o1, o2, o3] : (i2 = 0 and o2 = 0 and i0 >= 0 and i1 >= 0 and i1 < P2 and o0 > i0 and o0 < P3 and o1 >= 0 and o1 < P2 and o3 >= 0 and 16o3 < P0) or (i2 = 0 and o0 = i0 and o2 = 0 and i0 >= 0 and i0 < P3 and i1 >= 0 and o1 > i1 and o1 < P2 and o3 >= 0 and 16o3 < P0); RS2_affine_parallel[i0, i1, i2, i3] -> RS2_affine_parallel[o0, o1, o2, o3] : (i2 = 0 and o2 = 0 and i0 >= 0 and i1 >= 0 and i1 < P2 and 16i3 < P0 and o0 > i0 and o0 < P3 and o1 >= 0 and o1 < P2 and o3 >= 0 and o3 < i3) or (i2 = 0 and o2 = 0 and i0 >= 0 and i1 >= 0 and i1 < P2 and i3 >= 0 and o0 > i0 and o0 < P3 and o1 >= 0 and o1 < P2 and o3 > i3 and 16o3 < P0) or (i2 = 0 and o0 = i0 and o2 = 0 and i0 >= 0 and i0 < P3 and i1 >= 0 and 16i3 < P0 and o1 > i1 and o1 < P2 and o3 >= 0 and o3 < i3) or (i2 = 0 and o0 = i0 and o2 = 0 and i0 >= 0 and i0 < P3 and i1 >= 0 and i3 >= 0 and o1 > i1 and o1 < P2 and o3 > i3 and 16o3 < P0); RS2_affine_parallel[i0, i1, i2, i3] -> RS0_affine_parallel[o0, o1, o2] : (i2 = 0 and o2 = 0 and i0 >= 0 and i1 >= 0 and i1 < P2 and i3 >= 0 and 16i3 < P0 and o0 > i0 and o0 < P3 and o1 >= 0 and o1 < P2) or (i2 = 0 and o0 = i0 and o2 = 0 and i0 >= 0 and i0 < P3 and i1 >= 0 and i3 >= 0 and 16i3 < P0 and o1 > i1 and o1 < P2); RS3_affine_parallel[i0, i1, i2] -> RS0_affine_parallel[o0, o1, o2] : (i2 = 0 and o2 = 0 and i0 >= 0 and i1 >= 0 and i1 < P2 and o0 > i0 and o0 < P3 and o1 >= 0 and o1 < P2) or (i2 = 0 and o0 = i0 and o2 = 0 and i0 >= 0 and i0 < P3 and i1 >= 0 and o1 > i1 and o1 < P2) }
dep_order for A_memref_ataddr_res_5 [P2, P3, P0, P1] -> {  }
dep_order for A_affine_vector_load_res_6 [P2, P3, P0, P1] -> {  }
dep_order for A_memref_alloca_res_7 [P2, P3, P0, P1] -> { RS2_affine_parallel[i0, i1, i2, i3] -> RS1_affine_parallel[o0, o1, o2, o3] : (i2 = 0 and o2 = 0 and i0 >= 0 and i1 >= 0 and i1 < P2 and i3 >= 0 and 16i3 < P0 and o0 > i0 and o0 < P3 and o1 >= 0 and o1 < P2 and o3 >= 0 and 16o3 < P0) or (i2 = 0 and o0 = i0 and o2 = 0 and i0 >= 0 and i0 < P3 and i1 >= 0 and i3 >= 0 and 16i3 < P0 and o1 > i1 and o1 < P2 and o3 >= 0 and 16o3 < P0) or (i2 = 0 and o0 = i0 and o1 = i1 and o2 = 0 and i0 >= 0 and i0 < P3 and i1 >= 0 and i1 < P2 and i3 >= 0 and o3 > i3 and 16o3 < P0) }
dep_order for A_memref_ataddr_res_8 [P2, P3, P0, P1] -> {  }
dep_order for A_affine_vector_load_res_9 [P2, P3, P0, P1] -> {  }
dep_order for A_memref_alloca_res_10 [P2, P3, P0, P1] -> { RS2_affine_parallel[i0, i1, i2, i3] -> RS1_affine_parallel[o0, o1, o2, o3] : (i2 = 0 and o2 = 0 and i0 >= 0 and i1 >= 0 and i1 < P2 and i3 >= 0 and 16i3 < P0 and o0 > i0 and o0 < P3 and o1 >= 0 and o1 < P2 and o3 >= 0 and 16o3 < P0) or (i2 = 0 and o0 = i0 and o2 = 0 and i0 >= 0 and i0 < P3 and i1 >= 0 and i3 >= 0 and 16i3 < P0 and o1 > i1 and o1 < P2 and o3 >= 0 and 16o3 < P0) or (i2 = 0 and o0 = i0 and o1 = i1 and o2 = 0 and i0 >= 0 and i0 < P3 and i1 >= 0 and i1 < P2 and i3 >= 0 and o3 > i3 and 16o3 < P0) }
dep_order for A_affine_load_res_11 [P2, P3, P0, P1] -> {  }
dep_order for A_affine_for_res_12 [P2, P3, P0, P1] -> {  }
dep_order for A_affine_vector_load_res_13 [P2, P3, P0, P1] -> {  }
dep_order for A_llvm_bitcast_res_14 [P2, P3, P0, P1] -> {  }
dep_order for A_affine_vector_load_res_15 [P2, P3, P0, P1] -> {  }
dep_order for A_llvm_bitcast_res_16 [P2, P3, P0, P1] -> {  }
dep_order for A_llvm_fmul_res_17 [P2, P3, P0, P1] -> {  }
dep_order for A_llvm_fadd_res_18 [P2, P3, P0, P1] -> {  }
dep_order for A_affine_load_res_19 [P2, P3, P0, P1] -> {  }
dep_order for A_llvm_bitcast_res_20 [P2, P3, P0, P1] -> {  }
dep_order for A_memref_ataddr_res_21 [P2, P3, P0, P1] -> {  }
ReductionTagMap: [P0, P1, P2, P3] -> {  }
TaggedStmtDomain: [P2, P3, P0, P1] -> { [RS0_affine_parallel[i0, i1, i2] -> A_memref_alloca_res_4[]]; [RS1_affine_parallel[i0, i1, i2, i3] -> A_memref_ataddr_res_8[]]; [S34_affine_yield[i0, i1, i2] -> A_memref_alloca_res_4[]]; [RS2_affine_parallel[i0, i1, i2, i3] -> A_memref_alloca_res_10[]]; [RS3_affine_parallel[i0, i1, i2] -> A_memref_alloca_res_4[]]; [RS2_affine_parallel[i0, i1, i2, i3] -> A_memref_alloca_res_4[]]; [S34_affine_yield[i0, i1, i2] -> A_memref_alloca_res_10[]]; [RS1_affine_parallel[i0, i1, i2, i3] -> A_memref_alloca_res_7[]]; [S4_arith_index_cast[] -> A_llvm_func_arg_11_0[]]; [RS1_affine_parallel[i0, i1, i2, i3] -> A_memref_ataddr_res_5[]]; [S34_affine_yield[i0, i1, i2] -> A_memref_alloca_res_7[]]; [RS3_affine_parallel[i0, i1, i2] -> A_memref_ataddr_res_21[]]; [S7_arith_index_cast[] -> A_llvm_func_arg_0_3[]]; [RS2_affine_parallel[i0, i1, i2, i3] -> A_memref_alloca_res_7[]]; [S5_arith_index_cast[] -> A_llvm_func_arg_10_1[]]; [S6_arith_index_cast[] -> A_llvm_func_arg_1_2[]]; [RS1_affine_parallel[i0, i1, i2, i3] -> A_memref_alloca_res_10[]] }
dep_order for A_llvm_func_arg_11_0 [P2, P3, P0, P1] -> {  }
dep_order for A_llvm_func_arg_10_1 [P2, P3, P0, P1] -> {  }
dep_order for A_llvm_func_arg_1_2 [P2, P3, P0, P1] -> {  }
dep_order for A_llvm_func_arg_0_3 [P2, P3, P0, P1] -> {  }
dep_order for A_memref_alloca_res_4 [P2, P3, P0, P1] -> { RS3_affine_parallel[i0, i1, i2] -> RS2_affine_parallel[o0, o1, o2, o3] : (i2 = 0 and o2 = 0 and i0 >= 0 and i1 >= 0 and i1 < P2 and o0 > i0 and o0 < P3 and o1 >= 0 and o1 < P2 and o3 >= 0 and 16o3 < P0) or (i2 = 0 and o0 = i0 and o2 = 0 and i0 >= 0 and i0 < P3 and i1 >= 0 and o1 > i1 and o1 < P2 and o3 >= 0 and 16o3 < P0); RS2_affine_parallel[i0, i1, i2, i3] -> RS2_affine_parallel[o0, o1, o2, o3] : (i2 = 0 and o2 = 0 and i0 >= 0 and i1 >= 0 and i1 < P2 and 16i3 < P0 and o0 > i0 and o0 < P3 and o1 >= 0 and o1 < P2 and o3 >= 0 and o3 < i3) or (i2 = 0 and o2 = 0 and i0 >= 0 and i1 >= 0 and i1 < P2 and i3 >= 0 and o0 > i0 and o0 < P3 and o1 >= 0 and o1 < P2 and o3 > i3 and 16o3 < P0) or (i2 = 0 and o0 = i0 and o2 = 0 and i0 >= 0 and i0 < P3 and i1 >= 0 and 16i3 < P0 and o1 > i1 and o1 < P2 and o3 >= 0 and o3 < i3) or (i2 = 0 and o0 = i0 and o2 = 0 and i0 >= 0 and i0 < P3 and i1 >= 0 and i3 >= 0 and o1 > i1 and o1 < P2 and o3 > i3 and 16o3 < P0); RS2_affine_parallel[i0, i1, i2, i3] -> RS0_affine_parallel[o0, o1, o2] : (i2 = 0 and o2 = 0 and i0 >= 0 and i1 >= 0 and i1 < P2 and i3 >= 0 and 16i3 < P0 and o0 > i0 and o0 < P3 and o1 >= 0 and o1 < P2) or (i2 = 0 and o0 = i0 and o2 = 0 and i0 >= 0 and i0 < P3 and i1 >= 0 and i3 >= 0 and 16i3 < P0 and o1 > i1 and o1 < P2); RS3_affine_parallel[i0, i1, i2] -> RS0_affine_parallel[o0, o1, o2] : (i2 = 0 and o2 = 0 and i0 >= 0 and i1 >= 0 and i1 < P2 and o0 > i0 and o0 < P3 and o1 >= 0 and o1 < P2) or (i2 = 0 and o0 = i0 and o2 = 0 and i0 >= 0 and i0 < P3 and i1 >= 0 and o1 > i1 and o1 < P2) }
dep_order for A_memref_ataddr_res_5 [P2, P3, P0, P1] -> {  }
dep_order for A_affine_vector_load_res_6 [P2, P3, P0, P1] -> {  }
dep_order for A_memref_alloca_res_7 [P2, P3, P0, P1] -> { RS2_affine_parallel[i0, i1, i2, i3] -> RS1_affine_parallel[o0, o1, o2, o3] : (i2 = 0 and o2 = 0 and i0 >= 0 and i1 >= 0 and i1 < P2 and i3 >= 0 and 16i3 < P0 and o0 > i0 and o0 < P3 and o1 >= 0 and o1 < P2 and o3 >= 0 and 16o3 < P0) or (i2 = 0 and o0 = i0 and o2 = 0 and i0 >= 0 and i0 < P3 and i1 >= 0 and i3 >= 0 and 16i3 < P0 and o1 > i1 and o1 < P2 and o3 >= 0 and 16o3 < P0) or (i2 = 0 and o0 = i0 and o1 = i1 and o2 = 0 and i0 >= 0 and i0 < P3 and i1 >= 0 and i1 < P2 and i3 >= 0 and o3 > i3 and 16o3 < P0) }
dep_order for A_memref_ataddr_res_8 [P2, P3, P0, P1] -> {  }
dep_order for A_affine_vector_load_res_9 [P2, P3, P0, P1] -> {  }
dep_order for A_memref_alloca_res_10 [P2, P3, P0, P1] -> { RS2_affine_parallel[i0, i1, i2, i3] -> RS1_affine_parallel[o0, o1, o2, o3] : (i2 = 0 and o2 = 0 and i0 >= 0 and i1 >= 0 and i1 < P2 and i3 >= 0 and 16i3 < P0 and o0 > i0 and o0 < P3 and o1 >= 0 and o1 < P2 and o3 >= 0 and 16o3 < P0) or (i2 = 0 and o0 = i0 and o2 = 0 and i0 >= 0 and i0 < P3 and i1 >= 0 and i3 >= 0 and 16i3 < P0 and o1 > i1 and o1 < P2 and o3 >= 0 and 16o3 < P0) or (i2 = 0 and o0 = i0 and o1 = i1 and o2 = 0 and i0 >= 0 and i0 < P3 and i1 >= 0 and i1 < P2 and i3 >= 0 and o3 > i3 and 16o3 < P0) }
dep_order for A_affine_load_res_11 [P2, P3, P0, P1] -> {  }
dep_order for A_affine_for_res_12 [P2, P3, P0, P1] -> {  }
dep_order for A_affine_vector_load_res_13 [P2, P3, P0, P1] -> {  }
dep_order for A_llvm_bitcast_res_14 [P2, P3, P0, P1] -> {  }
dep_order for A_affine_vector_load_res_15 [P2, P3, P0, P1] -> {  }
dep_order for A_llvm_bitcast_res_16 [P2, P3, P0, P1] -> {  }
dep_order for A_llvm_fmul_res_17 [P2, P3, P0, P1] -> {  }
dep_order for A_llvm_fadd_res_18 [P2, P3, P0, P1] -> {  }
dep_order for A_affine_load_res_19 [P2, P3, P0, P1] -> {  }
dep_order for A_llvm_bitcast_res_20 [P2, P3, P0, P1] -> {  }
dep_order for A_memref_ataddr_res_21 [P2, P3, P0, P1] -> {  }
tagged_reads [P2, P3, P0, P1] -> { [RS2_affine_parallel[i0, i1, 0, i3] -> S18_affine_load_Read0[]] -> A_memref_alloca_res_4[o0, o1, 0] : P2 > 0 and P3 > 0 and P0 > 0 and 0 <= i0 < P3 and 0 <= i1 < P2 and i3 >= 0 and 16i3 < P0 and 0 <= o0 <= 15 and 0 <= o1 <= 15; [S7_arith_index_cast[] -> S7_arith_index_cast_Read0[]] -> A_llvm_func_arg_0_3[]; [RS3_affine_parallel[i0, i1, 0] -> S30_affine_load_Read0[]] -> A_memref_alloca_res_4[o0, o1, 0] : P2 > 0 and P3 > 0 and 0 <= i0 < P3 and 0 <= i1 < P2 and 0 <= o0 <= 15 and 0 <= o1 <= 15; [RS2_affine_parallel[i0, i1, 0, i3] -> S20_affine_vector_load_Read0[]] -> A_memref_alloca_res_7[o0] : (o0) mod 4 = 0 and P2 > 0 and P3 > 0 and P0 > 0 and 0 <= i0 < P3 and 0 <= i1 < P2 and i3 >= 0 and 16i3 < P0 and -3 <= o0 <= 1020 and 64*floor((3 + o0)/64) <= o0; [RS1_affine_parallel[i0, i1, 0, i3] -> S15_affine_vector_load_Read0[]] -> A_memref_ataddr_res_8[o0] : 0 <= i0 < P3 and 0 <= i1 < P2 and i3 >= 0 and 16i3 < P0; [RS1_affine_parallel[i0, i1, 0, i3] -> S13_affine_vector_load_Read0[]] -> A_memref_ataddr_res_5[o0] : 0 <= i0 < P3 and 0 <= i1 < P2 and i3 >= 0 and 16i3 < P0; [S4_arith_index_cast[] -> S4_arith_index_cast_Read0[]] -> A_llvm_func_arg_11_0[]; [RS2_affine_parallel[i0, i1, 0, i3] -> S22_affine_vector_load_Read0[]] -> A_memref_alloca_res_10[o0] : (o0) mod 4 = 0 and P2 > 0 and P3 > 0 and P0 > 0 and 0 <= i0 < P3 and 0 <= i1 < P2 and i3 >= 0 and 16i3 < P0 and -3 <= o0 <= 1020 and 64*floor((3 + o0)/64) <= o0; [S6_arith_index_cast[] -> S6_arith_index_cast_Read0[]] -> A_llvm_func_arg_1_2[]; [S5_arith_index_cast[] -> S5_arith_index_cast_Read0[]] -> A_llvm_func_arg_10_1[] }
atagged_reads [P2, P3, P0, P1] -> { [S7_arith_index_cast[] -> A_llvm_func_arg_0_3[]] -> A_llvm_func_arg_0_3[]; [RS2_affine_parallel[i0, i1, 0, i3] -> A_memref_alloca_res_7[]] -> A_memref_alloca_res_7[o0] : (o0) mod 4 = 0 and P2 > 0 and P3 > 0 and P0 > 0 and 0 <= i0 < P3 and 0 <= i1 < P2 and i3 >= 0 and 16i3 < P0 and -3 <= o0 <= 1020 and 64*floor((3 + o0)/64) <= o0; [RS3_affine_parallel[i0, i1, 0] -> A_memref_alloca_res_4[]] -> A_memref_alloca_res_4[o0, o1, 0] : P2 > 0 and P3 > 0 and 0 <= i0 < P3 and 0 <= i1 < P2 and 0 <= o0 <= 15 and 0 <= o1 <= 15; [S5_arith_index_cast[] -> A_llvm_func_arg_10_1[]] -> A_llvm_func_arg_10_1[]; [RS1_affine_parallel[i0, i1, 0, i3] -> A_memref_ataddr_res_8[]] -> A_memref_ataddr_res_8[o0] : 0 <= i0 < P3 and 0 <= i1 < P2 and i3 >= 0 and 16i3 < P0; [S4_arith_index_cast[] -> A_llvm_func_arg_11_0[]] -> A_llvm_func_arg_11_0[]; [RS2_affine_parallel[i0, i1, 0, i3] -> A_memref_alloca_res_4[]] -> A_memref_alloca_res_4[o0, o1, 0] : 0 <= i0 < P3 and 0 <= i1 < P2 and i3 >= 0 and 16i3 < P0 and 0 <= o0 <= 15 and 0 <= o1 <= 15; [S6_arith_index_cast[] -> A_llvm_func_arg_1_2[]] -> A_llvm_func_arg_1_2[]; [RS1_affine_parallel[i0, i1, 0, i3] -> A_memref_ataddr_res_5[]] -> A_memref_ataddr_res_5[o0] : 0 <= i0 < P3 and 0 <= i1 < P2 and i3 >= 0 and 16i3 < P0; [RS2_affine_parallel[i0, i1, 0, i3] -> A_memref_alloca_res_10[]] -> A_memref_alloca_res_10[o0] : (o0) mod 4 = 0 and P2 > 0 and P3 > 0 and P0 > 0 and 0 <= i0 < P3 and 0 <= i1 < P2 and i3 >= 0 and 16i3 < P0 and -3 <= o0 <= 1020 and 64*floor((3 + o0)/64) <= o0 }
reads [P2, P3, P0, P1] -> { RS2_affine_parallel[i0, i1, 0, i3] -> A_memref_alloca_res_7[o0] : (o0) mod 4 = 0 and P2 > 0 and P3 > 0 and P0 > 0 and 0 <= i0 < P3 and 0 <= i1 < P2 and i3 >= 0 and 16i3 < P0 and -3 <= o0 <= 1020 and 64*floor((3 + o0)/64) <= o0; RS2_affine_parallel[i0, i1, 0, i3] -> A_memref_alloca_res_10[o0] : (o0) mod 4 = 0 and P2 > 0 and P3 > 0 and P0 > 0 and 0 <= i0 < P3 and 0 <= i1 < P2 and i3 >= 0 and 16i3 < P0 and -3 <= o0 <= 1020 and 64*floor((3 + o0)/64) <= o0; S4_arith_index_cast[] -> A_llvm_func_arg_11_0[]; S6_arith_index_cast[] -> A_llvm_func_arg_1_2[]; RS3_affine_parallel[i0, i1, 0] -> A_memref_alloca_res_4[o0, o1, 0] : P2 > 0 and P3 > 0 and 0 <= i0 < P3 and 0 <= i1 < P2 and 0 <= o0 <= 15 and 0 <= o1 <= 15; RS1_affine_parallel[i0, i1, 0, i3] -> A_memref_ataddr_res_8[o0] : 0 <= i0 < P3 and 0 <= i1 < P2 and i3 >= 0 and 16i3 < P0; S7_arith_index_cast[] -> A_llvm_func_arg_0_3[]; RS2_affine_parallel[i0, i1, 0, i3] -> A_memref_alloca_res_4[o0, o1, 0] : 0 <= i0 < P3 and 0 <= i1 < P2 and i3 >= 0 and 16i3 < P0 and 0 <= o0 <= 15 and 0 <= o1 <= 15; S5_arith_index_cast[] -> A_llvm_func_arg_10_1[]; RS1_affine_parallel[i0, i1, 0, i3] -> A_memref_ataddr_res_5[o0] : 0 <= i0 < P3 and 0 <= i1 < P2 and i3 >= 0 and 16i3 < P0 }
async_reads [P0, P2, P3, P1] -> { RS1_affine_parallel[i0, i1, 0, i3] -> A_memref_ataddr_res_8[o0] : 0 <= i0 < P3 and 0 <= i1 < P2 and i3 >= 0 and 16i3 < P0; RS1_affine_parallel[i0, i1, 0, i3] -> A_memref_ataddr_res_5[o0] : 0 <= i0 < P3 and 0 <= i1 < P2 and i3 >= 0 and 16i3 < P0 }
tagged_may_writes [P2, P3, P0, P1] -> { [RS1_affine_parallel[i0, i1, 0, i3] -> S14_affine_vector_store_Write0[]] -> A_memref_alloca_res_7[o0] : (o0) mod 4 = 0 and P2 > 0 and P3 > 0 and P0 > 0 and 0 <= i0 < P3 and 0 <= i1 < P2 and i3 >= 0 and 16i3 < P0 and -3 <= o0 <= 1020 and 64*floor((3 + o0)/64) <= o0; [RS0_affine_parallel[i0, i1, 0] -> S11_affine_store_Write0[]] -> A_memref_alloca_res_4[o0, o1, 0] : P2 > 0 and P3 > 0 and 0 <= i0 < P3 and 0 <= i1 < P2 and 0 <= o0 <= 15 and 0 <= o1 <= 15; [RS1_affine_parallel[i0, i1, 0, i3] -> S16_affine_vector_store_Write0[]] -> A_memref_alloca_res_10[o0] : (o0) mod 4 = 0 and P2 > 0 and P3 > 0 and P0 > 0 and 0 <= i0 < P3 and 0 <= i1 < P2 and i3 >= 0 and 16i3 < P0 and -3 <= o0 <= 1020 and 64*floor((3 + o0)/64) <= o0; [RS2_affine_parallel[i0, i1, 0, i3] -> S27_affine_store_Write0[]] -> A_memref_alloca_res_4[o0, o1, 0] : P2 > 0 and P3 > 0 and P0 > 0 and 0 <= i0 < P3 and 0 <= i1 < P2 and i3 >= 0 and 16i3 < P0 and 0 <= o0 <= 15 and 0 <= o1 <= 15; [RS3_affine_parallel[i0, i1, 0] -> S32_affine_vector_store_MayWrite0[]] -> A_memref_ataddr_res_21[o0] : 0 <= i0 < P3 and 0 <= i1 < P2 }
atagged_may_writes [P2, P3, P0, P1] -> { [RS1_affine_parallel[i0, i1, 0, i3] -> A_memref_alloca_res_7[]] -> A_memref_alloca_res_7[o0] : (o0) mod 4 = 0 and P2 > 0 and P3 > 0 and P0 > 0 and 0 <= i0 < P3 and 0 <= i1 < P2 and i3 >= 0 and 16i3 < P0 and -3 <= o0 <= 1020 and 64*floor((3 + o0)/64) <= o0; [RS3_affine_parallel[i0, i1, 0] -> A_memref_ataddr_res_21[]] -> A_memref_ataddr_res_21[o0] : 0 <= i0 < P3 and 0 <= i1 < P2; [RS0_affine_parallel[i0, i1, 0] -> A_memref_alloca_res_4[]] -> A_memref_alloca_res_4[o0, o1, 0] : P2 > 0 and P3 > 0 and 0 <= i0 < P3 and 0 <= i1 < P2 and 0 <= o0 <= 15 and 0 <= o1 <= 15; [RS2_affine_parallel[i0, i1, 0, i3] -> A_memref_alloca_res_4[]] -> A_memref_alloca_res_4[o0, o1, 0] : 0 <= i0 < P3 and 0 <= i1 < P2 and i3 >= 0 and 16i3 < P0 and 0 <= o0 <= 15 and 0 <= o1 <= 15; [RS1_affine_parallel[i0, i1, 0, i3] -> A_memref_alloca_res_10[]] -> A_memref_alloca_res_10[o0] : (o0) mod 4 = 0 and P2 > 0 and P3 > 0 and P0 > 0 and 0 <= i0 < P3 and 0 <= i1 < P2 and i3 >= 0 and 16i3 < P0 and -3 <= o0 <= 1020 and 64*floor((3 + o0)/64) <= o0 }
may_writes [P2, P3, P0, P1] -> { RS3_affine_parallel[i0, i1, 0] -> A_memref_ataddr_res_21[o0] : 0 <= i0 < P3 and 0 <= i1 < P2; RS2_affine_parallel[i0, i1, 0, i3] -> A_memref_alloca_res_4[o0, o1, 0] : 0 <= i0 < P3 and 0 <= i1 < P2 and i3 >= 0 and 16i3 < P0 and 0 <= o0 <= 15 and 0 <= o1 <= 15; RS1_affine_parallel[i0, i1, 0, i3] -> A_memref_alloca_res_10[o0] : (o0) mod 4 = 0 and P2 > 0 and P3 > 0 and P0 > 0 and 0 <= i0 < P3 and 0 <= i1 < P2 and i3 >= 0 and 16i3 < P0 and -3 <= o0 <= 1020 and 64*floor((3 + o0)/64) <= o0; RS1_affine_parallel[i0, i1, 0, i3] -> A_memref_alloca_res_7[o0] : (o0) mod 4 = 0 and P2 > 0 and P3 > 0 and P0 > 0 and 0 <= i0 < P3 and 0 <= i1 < P2 and i3 >= 0 and 16i3 < P0 and -3 <= o0 <= 1020 and 64*floor((3 + o0)/64) <= o0; RS0_affine_parallel[i0, i1, 0] -> A_memref_alloca_res_4[o0, o1, 0] : P2 > 0 and P3 > 0 and 0 <= i0 < P3 and 0 <= i1 < P2 and 0 <= o0 <= 15 and 0 <= o1 <= 15 }
tagged_must_writes [P0, P2, P3, P1] -> { [RS1_affine_parallel[i0, i1, 0, i3] -> S14_affine_vector_store_Write0[]] -> A_memref_alloca_res_7[o0] : (o0) mod 4 = 0 and 0 <= i0 < P3 and 0 <= i1 < P2 and i3 >= 0 and 16i3 < P0 and -3 <= o0 <= 1020 and 64*floor((3 + o0)/64) <= o0; [RS0_affine_parallel[i0, i1, 0] -> S11_affine_store_Write0[]] -> A_memref_alloca_res_4[o0, o1, 0] : 0 <= i0 < P3 and 0 <= i1 < P2 and 0 <= o0 <= 15 and 0 <= o1 <= 15; [RS1_affine_parallel[i0, i1, 0, i3] -> S16_affine_vector_store_Write0[]] -> A_memref_alloca_res_10[o0] : (o0) mod 4 = 0 and 0 <= i0 < P3 and 0 <= i1 < P2 and i3 >= 0 and 16i3 < P0 and -3 <= o0 <= 1020 and 64*floor((3 + o0)/64) <= o0; [RS2_affine_parallel[i0, i1, 0, i3] -> S27_affine_store_Write0[]] -> A_memref_alloca_res_4[o0, o1, 0] : 0 <= i0 < P3 and 0 <= i1 < P2 and i3 >= 0 and 16i3 < P0 and 0 <= o0 <= 15 and 0 <= o1 <= 15 }
atagged_must_writes [P0, P2, P3, P1] -> { [RS1_affine_parallel[i0, i1, 0, i3] -> A_memref_alloca_res_10[]] -> A_memref_alloca_res_10[o0] : (o0) mod 4 = 0 and 0 <= i0 < P3 and 0 <= i1 < P2 and i3 >= 0 and 16i3 < P0 and -3 <= o0 <= 1020 and 64*floor((3 + o0)/64) <= o0; [RS0_affine_parallel[i0, i1, 0] -> A_memref_alloca_res_4[]] -> A_memref_alloca_res_4[o0, o1, 0] : 0 <= i0 < P3 and 0 <= i1 < P2 and 0 <= o0 <= 15 and 0 <= o1 <= 15; [RS2_affine_parallel[i0, i1, 0, i3] -> A_memref_alloca_res_4[]] -> A_memref_alloca_res_4[o0, o1, 0] : 0 <= i0 < P3 and 0 <= i1 < P2 and i3 >= 0 and 16i3 < P0 and 0 <= o0 <= 15 and 0 <= o1 <= 15; [RS1_affine_parallel[i0, i1, 0, i3] -> A_memref_alloca_res_7[]] -> A_memref_alloca_res_7[o0] : (o0) mod 4 = 0 and 0 <= i0 < P3 and 0 <= i1 < P2 and i3 >= 0 and 16i3 < P0 and -3 <= o0 <= 1020 and 64*floor((3 + o0)/64) <= o0 }
must_writes [P0, P2, P3, P1] -> { RS2_affine_parallel[i0, i1, 0, i3] -> A_memref_alloca_res_4[o0, o1, 0] : 0 <= i0 < P3 and 0 <= i1 < P2 and i3 >= 0 and 16i3 < P0 and 0 <= o0 <= 15 and 0 <= o1 <= 15; RS1_affine_parallel[i0, i1, 0, i3] -> A_memref_alloca_res_10[o0] : (o0) mod 4 = 0 and 0 <= i0 < P3 and 0 <= i1 < P2 and i3 >= 0 and 16i3 < P0 and -3 <= o0 <= 1020 and 64*floor((3 + o0)/64) <= o0; RS1_affine_parallel[i0, i1, 0, i3] -> A_memref_alloca_res_7[o0] : (o0) mod 4 = 0 and 0 <= i0 < P3 and 0 <= i1 < P2 and i3 >= 0 and 16i3 < P0 and -3 <= o0 <= 1020 and 64*floor((3 + o0)/64) <= o0; RS0_affine_parallel[i0, i1, 0] -> A_memref_alloca_res_4[o0, o1, 0] : 0 <= i0 < P3 and 0 <= i1 < P2 and 0 <= o0 <= 15 and 0 <= o1 <= 15 }
async_must_writes [P0, P2, P3, P1] -> { RS1_affine_parallel[i0, i1, 0, i3] -> A_memref_alloca_res_10[o0] : (o0) mod 4 = 0 and P0 > 0 and P2 > 0 and P3 > 0 and 0 <= i0 < P3 and 0 <= i1 < P2 and i3 >= 0 and 16i3 < P0 and -3 <= o0 <= 1020 and 64*floor((3 + o0)/64) <= o0; RS1_affine_parallel[i0, i1, 0, i3] -> A_memref_alloca_res_7[o0] : (o0) mod 4 = 0 and P0 > 0 and P2 > 0 and P3 > 0 and 0 <= i0 < P3 and 0 <= i1 < P2 and i3 >= 0 and 16i3 < P0 and -3 <= o0 <= 1020 and 64*floor((3 + o0)/64) <= o0 }
tagged_must_kills [P0, P1, P2, P3] -> { [S34_affine_yield[i0, i1, 0] -> S34_affine_yield1[]] -> A_memref_alloca_res_10[o0] : 0 <= i0 < P3 and 0 <= i1 < P2; [S34_affine_yield[i0, i1, 0] -> S34_affine_yield0[]] -> A_memref_alloca_res_7[o0] : 0 <= i0 < P3 and 0 <= i1 < P2; [S34_affine_yield[i0, i1, 0] -> S34_affine_yield2[]] -> A_memref_alloca_res_4[o0, o1, o2] : 0 <= i0 < P3 and 0 <= i1 < P2 }
atagged_must_kills [P0, P1, P2, P3] -> { [S34_affine_yield[i0, i1, 0] -> A_memref_alloca_res_7[]] -> A_memref_alloca_res_7[o0] : 0 <= i0 < P3 and 0 <= i1 < P2; [S34_affine_yield[i0, i1, 0] -> A_memref_alloca_res_4[]] -> A_memref_alloca_res_4[o0, o1, o2] : 0 <= i0 < P3 and 0 <= i1 < P2; [S34_affine_yield[i0, i1, 0] -> A_memref_alloca_res_10[]] -> A_memref_alloca_res_10[o0] : 0 <= i0 < P3 and 0 <= i1 < P2 }
must_kills [P0, P1, P2, P3] -> { S34_affine_yield[i0, i1, 0] -> A_memref_alloca_res_10[o0] : 0 <= i0 < P3 and 0 <= i1 < P2; S34_affine_yield[i0, i1, 0] -> A_memref_alloca_res_4[o0, o1, o2] : 0 <= i0 < P3 and 0 <= i1 < P2; S34_affine_yield[i0, i1, 0] -> A_memref_alloca_res_7[o0] : 0 <= i0 < P3 and 0 <= i1 < P2 }
live_in [P0, P2, P3, P1] -> { S4_arith_index_cast[] -> A_llvm_func_arg_11_0[]; S6_arith_index_cast[] -> A_llvm_func_arg_1_2[]; RS1_affine_parallel[i0, i1, 0, i3] -> A_memref_ataddr_res_8[o0] : 0 <= i0 < P3 and 0 <= i1 < P2 and i3 >= 0 and 16i3 < P0; S7_arith_index_cast[] -> A_llvm_func_arg_0_3[]; S5_arith_index_cast[] -> A_llvm_func_arg_10_1[]; RS1_affine_parallel[i0, i1, 0, i3] -> A_memref_ataddr_res_5[o0] : 0 <= i0 < P3 and 0 <= i1 < P2 and i3 >= 0 and 16i3 < P0 }
live_out [P0, P1, P2, P3] -> { RS3_affine_parallel[i0, i1, 0] -> A_memref_ataddr_res_21[o0] : 0 <= i0 < P3 and 0 <= i1 < P2 }
independence [P2, P3, P0, P1] -> { S8_memref_alloca[i0, i1, i2] -> S8_memref_alloca[o0, o1, o2] : o2 < i2 or o2 > i2; S8_memref_alloca[i0, i1, i2] -> S8_memref_alloca[o0, i1, i2] : o0 < i0 or o0 > i0; S8_memref_alloca[i0, i1, i2] -> S8_memref_alloca[o0, o1, i2] : o1 < i1 or o1 > i1; RS0_affine_parallel[i0, i1, i2] -> RS0_affine_parallel[o0, o1, o2] : o2 < i2 or o2 > i2; RS0_affine_parallel[i0, i1, i2] -> RS0_affine_parallel[o0, i1, i2] : o0 < i0 or o0 > i0; RS0_affine_parallel[i0, i1, i2] -> RS0_affine_parallel[o0, o1, i2] : o1 < i1 or o1 > i1; RS3_affine_parallel[i0, i1, i2] -> RS3_affine_parallel[o0, o1, o2] : o2 > i2 or o2 < i2; RS3_affine_parallel[i0, i1, i2] -> RS3_affine_parallel[o0, i1, i2] : o0 > i0 or o0 < i0; RS3_affine_parallel[i0, i1, i2] -> RS3_affine_parallel[o0, o1, i2] : o1 > i1 or o1 < i1; S10_memref_alloca[i0, i1, i2] -> S10_memref_alloca[o0, o1, o2] : o2 < i2 or o2 > i2; S10_memref_alloca[i0, i1, i2] -> S10_memref_alloca[o0, i1, i2] : o0 < i0 or o0 > i0; S10_memref_alloca[i0, i1, i2] -> S10_memref_alloca[o0, o1, i2] : o1 < i1 or o1 > i1; S9_memref_alloca[i0, i1, i2] -> S9_memref_alloca[o0, o1, o2] : o2 < i2 or o2 > i2; S9_memref_alloca[i0, i1, i2] -> S9_memref_alloca[o0, i1, i2] : o0 < i0 or o0 > i0; S9_memref_alloca[i0, i1, i2] -> S9_memref_alloca[o0, o1, i2] : o1 < i1 or o1 > i1; RS1_affine_parallel[i0, i1, i2, i3] -> RS1_affine_parallel[o0, o1, o2, i3] : o2 > i2 or o2 < i2; RS1_affine_parallel[i0, i1, i2, i3] -> RS1_affine_parallel[i0, i1, i2, o3] : o3 > i3 or o3 < i3; RS1_affine_parallel[i0, i1, i2, i3] -> RS1_affine_parallel[o0, o1, i2, i3] : o1 > i1 or o1 < i1; RS1_affine_parallel[i0, i1, i2, i3] -> RS1_affine_parallel[o0, i1, i2, i3] : o0 > i0 or o0 < i0; RS2_affine_parallel[i0, i1, i2, i3] -> RS2_affine_parallel[o0, o1, o2, i3] : o2 > i2 or o2 < i2; RS2_affine_parallel[i0, i1, i2, i3] -> RS2_affine_parallel[i0, i1, i2, o3] : o3 > i3 or o3 < i3; RS2_affine_parallel[i0, i1, i2, i3] -> RS2_affine_parallel[o0, o1, i2, i3] : o1 > i1 or o1 < i1; RS2_affine_parallel[i0, i1, i2, i3] -> RS2_affine_parallel[o0, i1, i2, i3] : o0 > i0 or o0 < i0; S34_affine_yield[i0, i1, i2] -> S34_affine_yield[o0, o1, o2] : o2 < i2 or o2 > i2; S34_affine_yield[i0, i1, i2] -> S34_affine_yield[o0, i1, i2] : o0 < i0 or o0 > i0; S34_affine_yield[i0, i1, i2] -> S34_affine_yield[o0, o1, i2] : o1 < i1 or o1 > i1; S29_affine_yield[i0, i1, i2, i3] -> S29_affine_yield[o0, o1, o2, i3] : o2 > i2 or o2 < i2; S29_affine_yield[i0, i1, i2, i3] -> S29_affine_yield[i0, i1, i2, o3] : o3 > i3 or o3 < i3; S29_affine_yield[i0, i1, i2, i3] -> S29_affine_yield[o0, o1, i2, i3] : o1 > i1 or o1 < i1; S29_affine_yield[i0, i1, i2, i3] -> S29_affine_yield[o0, i1, i2, i3] : o0 > i0 or o0 < i0 }
dep_flow [P0, P1, P2, P3] -> { RS0_affine_parallel[i0, i1, 0] -> RS2_affine_parallel[i0, i1, 0, 0] : P0 > 0 and 0 <= i0 < P3 and 0 <= i1 < P2; RS2_affine_parallel[i0, i1, 0, i3] -> RS3_affine_parallel[i0, i1, 0] : P0 > 0 and 0 <= i0 < P3 and 0 <= i1 < P2 and i3 >= 0 and -16 + P0 <= 16i3 < P0; RS2_affine_parallel[i0, i1, 0, i3] -> RS2_affine_parallel[i0, i1, 0, 1 + i3] : 0 <= i0 < P3 and 0 <= i1 < P2 and i3 >= 0 and 16i3 <= -17 + P0; RS1_affine_parallel[i0, i1, 0, i3] -> RS2_affine_parallel[i0, i1, 0, i3] : 0 <= i0 < P3 and 0 <= i1 < P2 and i3 >= 0 and 16i3 < P0; RS0_affine_parallel[i0, i1, 0] -> RS3_affine_parallel[i0, i1, 0] : P0 <= 0 and 0 <= i0 < P3 and 0 <= i1 < P2 }
tagged_dep_flow [P0, P1, P2, P3] -> { [RS0_affine_parallel[i0, i1, 0] -> S11_affine_store_Write0[]] -> [RS2_affine_parallel[i0, i1, 0, 0] -> S18_affine_load_Read0[]] : P0 > 0 and 0 <= i0 < P3 and 0 <= i1 < P2; [RS0_affine_parallel[i0, i1, 0] -> S11_affine_store_Write0[]] -> [RS3_affine_parallel[i0, i1, 0] -> S30_affine_load_Read0[]] : P0 <= 0 and 0 <= i0 < P3 and 0 <= i1 < P2; [RS1_affine_parallel[i0, i1, 0, i3] -> S16_affine_vector_store_Write0[]] -> [RS2_affine_parallel[i0, i1, 0, i3] -> S22_affine_vector_load_Read0[]] : 0 <= i0 < P3 and 0 <= i1 < P2 and i3 >= 0 and 16i3 < P0; [RS1_affine_parallel[i0, i1, 0, i3] -> S14_affine_vector_store_Write0[]] -> [RS2_affine_parallel[i0, i1, 0, i3] -> S20_affine_vector_load_Read0[]] : 0 <= i0 < P3 and 0 <= i1 < P2 and i3 >= 0 and 16i3 < P0; [RS2_affine_parallel[i0, i1, 0, i3] -> S27_affine_store_Write0[]] -> [RS3_affine_parallel[i0, i1, 0] -> S30_affine_load_Read0[]] : P0 > 0 and 0 <= i0 < P3 and 0 <= i1 < P2 and i3 >= 0 and -16 + P0 <= 16i3 < P0; [RS2_affine_parallel[i0, i1, 0, i3] -> S27_affine_store_Write0[]] -> [RS2_affine_parallel[i0, i1, 0, 1 + i3] -> S18_affine_load_Read0[]] : 0 <= i0 < P3 and 0 <= i1 < P2 and i3 >= 0 and 16i3 <= -17 + P0 }
atagged_dep_flow [P0, P1, P2, P3] -> { [RS1_affine_parallel[i0, i1, 0, i3] -> A_memref_alloca_res_10[]] -> [RS2_affine_parallel[i0, i1, 0, i3] -> A_memref_alloca_res_10[]] : 0 <= i0 < P3 and 0 <= i1 < P2 and i3 >= 0 and 16i3 < P0; [RS2_affine_parallel[i0, i1, 0, i3] -> A_memref_alloca_res_4[]] -> [RS3_affine_parallel[i0, i1, 0] -> A_memref_alloca_res_4[]] : P0 > 0 and 0 <= i0 < P3 and 0 <= i1 < P2 and i3 >= 0 and -16 + P0 <= 16i3 < P0; [RS0_affine_parallel[i0, i1, 0] -> A_memref_alloca_res_4[]] -> [RS3_affine_parallel[i0, i1, 0] -> A_memref_alloca_res_4[]] : P0 <= 0 and 0 <= i0 < P3 and 0 <= i1 < P2; [RS2_affine_parallel[i0, i1, 0, i3] -> A_memref_alloca_res_4[]] -> [RS2_affine_parallel[i0, i1, 0, 1 + i3] -> A_memref_alloca_res_4[]] : 0 <= i0 < P3 and 0 <= i1 < P2 and i3 >= 0 and 16i3 <= -17 + P0; [RS0_affine_parallel[i0, i1, 0] -> A_memref_alloca_res_4[]] -> [RS2_affine_parallel[i0, i1, 0, 0] -> A_memref_alloca_res_4[]] : P0 > 0 and 0 <= i0 < P3 and 0 <= i1 < P2; [RS1_affine_parallel[i0, i1, 0, i3] -> A_memref_alloca_res_7[]] -> [RS2_affine_parallel[i0, i1, 0, i3] -> A_memref_alloca_res_7[]] : 0 <= i0 < P3 and 0 <= i1 < P2 and i3 >= 0 and 16i3 < P0 }
dep_false [P2, P3, P0, P1] -> { RS0_affine_parallel[i0, i1, 0] -> RS2_affine_parallel[i0, i1, 0, 0] : P0 > 0 and 0 <= i0 < P3 and 0 <= i1 < P2; RS3_affine_parallel[i0, i1, 0] -> RS3_affine_parallel[o0, o1, 0] : i0 >= 0 and 0 <= i1 < P2 and i0 < o0 < P3 and 0 <= o1 < P2; RS3_affine_parallel[i0, i1, 0] -> RS3_affine_parallel[i0, o1, 0] : 0 <= i0 < P3 and i1 >= 0 and i1 < o1 < P2; RS2_affine_parallel[i0, i1, 0, i3] -> RS1_affine_parallel[i0, i1, 0, 1 + i3] : 0 <= i0 < P3 and 0 <= i1 < P2 and i3 >= 0 and 16i3 <= -17 + P0; RS2_affine_parallel[i0, i1, 0, i3] -> RS1_affine_parallel[i0, 1 + i1, 0, 0] : P0 > 0 and 0 <= i0 < P3 and 0 <= i1 <= -2 + P2 and -16 + P0 <= 16i3 < P0; RS2_affine_parallel[i0, -1 + P2, 0, i3] -> RS1_affine_parallel[1 + i0, 0, 0, 0] : P2 > 0 and P0 > 0 and 0 <= i0 <= -2 + P3 and -16 + P0 <= 16i3 < P0; RS1_affine_parallel[i0, i1, 0, i3] -> RS1_affine_parallel[i0, i1, 0, 1 + i3] : 0 <= i0 < P3 and 0 <= i1 < P2 and i3 >= 0 and 16i3 <= -17 + P0; RS1_affine_parallel[i0, i1, 0, i3] -> RS1_affine_parallel[i0, 1 + i1, 0, 0] : P0 > 0 and 0 <= i0 < P3 and 0 <= i1 <= -2 + P2 and -16 + P0 <= 16i3 < P0; RS1_affine_parallel[i0, -1 + P2, 0, i3] -> RS1_affine_parallel[1 + i0, 0, 0, 0] : P2 > 0 and P0 > 0 and 0 <= i0 <= -2 + P3 and -16 + P0 <= 16i3 < P0; RS2_affine_parallel[i0, i1, 0, i3] -> RS2_affine_parallel[i0, i1, 0, 1 + i3] : 0 <= i0 < P3 and 0 <= i1 < P2 and i3 >= 0 and 16i3 <= -17 + P0; RS2_affine_parallel[i0, i1, 0, i3] -> RS0_affine_parallel[i0, 1 + i1, 0] : 0 <= i0 < P3 and 0 <= i1 <= -2 + P2 and i3 >= 0 and -16 + P0 <= 16i3 < P0; RS2_affine_parallel[i0, -1 + P2, 0, i3] -> RS0_affine_parallel[1 + i0, 0, 0] : P2 > 0 and 0 <= i0 <= -2 + P3 and i3 >= 0 and -16 + P0 <= 16i3 < P0; RS3_affine_parallel[i0, i1, 0] -> RS0_affine_parallel[i0, 1 + i1, 0] : 0 <= i0 < P3 and 0 <= i1 <= -2 + P2; RS3_affine_parallel[i0, -1 + P2, 0] -> RS0_affine_parallel[1 + i0, 0, 0] : P2 > 0 and 0 <= i0 <= -2 + P3; RS0_affine_parallel[i0, i1, 0] -> RS0_affine_parallel[i0, 1 + i1, 0] : P0 <= 0 and 0 <= i0 < P3 and 0 <= i1 <= -2 + P2; RS0_affine_parallel[i0, -1 + P2, 0] -> RS0_affine_parallel[1 + i0, 0, 0] : P2 > 0 and P0 <= 0 and 0 <= i0 <= -2 + P3 }
dep_forced [P2, P3, P0, P1] -> {  }
dep_order [P2, P3, P0, P1] -> { RS3_affine_parallel[i0, i1, 0] -> RS3_affine_parallel[o0, o1, 0] : i0 >= 0 and 0 <= i1 < P2 and i0 < o0 < P3 and 0 <= o1 < P2; RS3_affine_parallel[i0, i1, 0] -> RS3_affine_parallel[i0, o1, 0] : 0 <= i0 < P3 and i1 >= 0 and i1 < o1 < P2; RS2_affine_parallel[i0, i1, 0, i3] -> RS1_affine_parallel[o0, o1, 0, o3] : i0 >= 0 and 0 <= i1 < P2 and i3 >= 0 and 16i3 < P0 and i0 < o0 < P3 and 0 <= o1 < P2 and o3 >= 0 and 16o3 < P0; RS2_affine_parallel[i0, i1, 0, i3] -> RS1_affine_parallel[i0, o1, 0, o3] : 0 <= i0 < P3 and i1 >= 0 and i3 >= 0 and 16i3 < P0 and i1 < o1 < P2 and o3 >= 0 and 16o3 < P0; RS2_affine_parallel[i0, i1, 0, i3] -> RS1_affine_parallel[i0, i1, 0, o3] : 0 <= i0 < P3 and 0 <= i1 < P2 and i3 >= 0 and o3 > i3 and 16o3 < P0; RS3_affine_parallel[i0, i1, 0] -> RS2_affine_parallel[o0, o1, 0, o3] : i0 >= 0 and 0 <= i1 < P2 and i0 < o0 < P3 and 0 <= o1 < P2 and o3 >= 0 and 16o3 < P0; RS3_affine_parallel[i0, i1, 0] -> RS2_affine_parallel[i0, o1, 0, o3] : 0 <= i0 < P3 and i1 >= 0 and i1 < o1 < P2 and o3 >= 0 and 16o3 < P0; RS2_affine_parallel[i0, i1, 0, i3] -> RS2_affine_parallel[o0, o1, 0, o3] : i0 >= 0 and 0 <= i1 < P2 and i3 >= 0 and 16i3 < P0 and i0 < o0 < P3 and 0 <= o1 < P2 and o3 >= 0 and 16o3 < P0; RS2_affine_parallel[i0, i1, 0, i3] -> RS2_affine_parallel[i0, o1, 0, o3] : 0 <= i0 < P3 and i1 >= 0 and i3 >= 0 and 16i3 < P0 and i1 < o1 < P2 and o3 >= 0 and 16o3 < P0; RS2_affine_parallel[i0, i1, 0, i3] -> RS2_affine_parallel[i0, i1, 0, o3] : 0 <= i0 < P3 and 0 <= i1 < P2 and i3 >= 0 and o3 > i3 and 16o3 < P0; RS3_affine_parallel[i0, i1, 0] -> RS0_affine_parallel[o0, o1, 0] : i0 >= 0 and 0 <= i1 < P2 and i0 < o0 < P3 and 0 <= o1 < P2; RS3_affine_parallel[i0, i1, 0] -> RS0_affine_parallel[i0, o1, 0] : 0 <= i0 < P3 and i1 >= 0 and i1 < o1 < P2; RS2_affine_parallel[i0, i1, 0, i3] -> RS0_affine_parallel[o0, o1, 0] : i0 >= 0 and 0 <= i1 < P2 and i3 >= 0 and 16i3 < P0 and i0 < o0 < P3 and 0 <= o1 < P2; RS2_affine_parallel[i0, i1, 0, i3] -> RS0_affine_parallel[i0, o1, 0] : 0 <= i0 < P3 and i1 >= 0 and i3 >= 0 and 16i3 < P0 and i1 < o1 < P2 }
tagged_dep_order [P2, P3, P0, P1] -> { [RS3_affine_parallel[i0, i1, 0] -> S30_affine_load_Read0[]] -> [RS2_affine_parallel[o0, o1, 0, o3] -> S27_affine_store_Write0[]] : i0 >= 0 and 0 <= i1 < P2 and i0 < o0 < P3 and 0 <= o1 < P2 and o3 >= 0 and 16o3 < P0; [RS3_affine_parallel[i0, i1, 0] -> S30_affine_load_Read0[]] -> [RS2_affine_parallel[i0, o1, 0, o3] -> S27_affine_store_Write0[]] : 0 <= i0 < P3 and i1 >= 0 and i1 < o1 < P2 and o3 >= 0 and 16o3 < P0; [RS2_affine_parallel[i0, i1, 0, i3] -> S18_affine_load_Read0[]] -> [RS2_affine_parallel[o0, o1, 0, o3] -> S27_affine_store_Write0[]] : i0 >= 0 and 0 <= i1 < P2 and i3 >= 0 and 16i3 < P0 and i0 < o0 < P3 and 0 <= o1 < P2 and o3 >= 0 and 16o3 < P0; [RS2_affine_parallel[i0, i1, 0, i3] -> S18_affine_load_Read0[]] -> [RS2_affine_parallel[i0, o1, 0, o3] -> S27_affine_store_Write0[]] : 0 <= i0 < P3 and i1 >= 0 and i3 >= 0 and 16i3 < P0 and i1 < o1 < P2 and o3 >= 0 and 16o3 < P0; [RS2_affine_parallel[i0, i1, 0, i3] -> S18_affine_load_Read0[]] -> [RS2_affine_parallel[i0, i1, 0, o3] -> S27_affine_store_Write0[]] : 0 <= i0 < P3 and 0 <= i1 < P2 and i3 >= 0 and o3 > i3 and 16o3 < P0; [RS3_affine_parallel[i0, i1, 0] -> S30_affine_load_Read0[]] -> [RS0_affine_parallel[o0, o1, 0] -> S11_affine_store_Write0[]] : i0 >= 0 and 0 <= i1 < P2 and i0 < o0 < P3 and 0 <= o1 < P2; [RS3_affine_parallel[i0, i1, 0] -> S30_affine_load_Read0[]] -> [RS0_affine_parallel[i0, o1, 0] -> S11_affine_store_Write0[]] : 0 <= i0 < P3 and i1 >= 0 and i1 < o1 < P2; [RS2_affine_parallel[i0, i1, 0, i3] -> S20_affine_vector_load_Read0[]] -> [RS1_affine_parallel[o0, o1, 0, o3] -> S14_affine_vector_store_Write0[]] : i0 >= 0 and 0 <= i1 < P2 and i3 >= 0 and 16i3 < P0 and i0 < o0 < P3 and 0 <= o1 < P2 and o3 >= 0 and 16o3 < P0; [RS2_affine_parallel[i0, i1, 0, i3] -> S20_affine_vector_load_Read0[]] -> [RS1_affine_parallel[i0, o1, 0, o3] -> S14_affine_vector_store_Write0[]] : 0 <= i0 < P3 and i1 >= 0 and i3 >= 0 and 16i3 < P0 and i1 < o1 < P2 and o3 >= 0 and 16o3 < P0; [RS2_affine_parallel[i0, i1, 0, i3] -> S20_affine_vector_load_Read0[]] -> [RS1_affine_parallel[i0, i1, 0, o3] -> S14_affine_vector_store_Write0[]] : 0 <= i0 < P3 and 0 <= i1 < P2 and i3 >= 0 and o3 > i3 and 16o3 < P0; [RS2_affine_parallel[i0, i1, 0, i3] -> S18_affine_load_Read0[]] -> [RS0_affine_parallel[o0, o1, 0] -> S11_affine_store_Write0[]] : i0 >= 0 and 0 <= i1 < P2 and i3 >= 0 and 16i3 < P0 and i0 < o0 < P3 and 0 <= o1 < P2; [RS2_affine_parallel[i0, i1, 0, i3] -> S18_affine_load_Read0[]] -> [RS0_affine_parallel[i0, o1, 0] -> S11_affine_store_Write0[]] : 0 <= i0 < P3 and i1 >= 0 and i3 >= 0 and 16i3 < P0 and i1 < o1 < P2; [RS3_affine_parallel[i0, i1, 0] -> S32_affine_vector_store_MayWrite0[]] -> [RS3_affine_parallel[o0, o1, 0] -> S32_affine_vector_store_MayWrite0[]] : i0 >= 0 and 0 <= i1 < P2 and i0 < o0 < P3 and 0 <= o1 < P2; [RS3_affine_parallel[i0, i1, 0] -> S32_affine_vector_store_MayWrite0[]] -> [RS3_affine_parallel[i0, o1, 0] -> S32_affine_vector_store_MayWrite0[]] : 0 <= i0 < P3 and i1 >= 0 and i1 < o1 < P2; [RS2_affine_parallel[i0, i1, 0, i3] -> S22_affine_vector_load_Read0[]] -> [RS1_affine_parallel[o0, o1, 0, o3] -> S16_affine_vector_store_Write0[]] : i0 >= 0 and 0 <= i1 < P2 and i3 >= 0 and 16i3 < P0 and i0 < o0 < P3 and 0 <= o1 < P2 and o3 >= 0 and 16o3 < P0; [RS2_affine_parallel[i0, i1, 0, i3] -> S22_affine_vector_load_Read0[]] -> [RS1_affine_parallel[i0, o1, 0, o3] -> S16_affine_vector_store_Write0[]] : 0 <= i0 < P3 and i1 >= 0 and i3 >= 0 and 16i3 < P0 and i1 < o1 < P2 and o3 >= 0 and 16o3 < P0; [RS2_affine_parallel[i0, i1, 0, i3] -> S22_affine_vector_load_Read0[]] -> [RS1_affine_parallel[i0, i1, 0, o3] -> S16_affine_vector_store_Write0[]] : 0 <= i0 < P3 and 0 <= i1 < P2 and i3 >= 0 and o3 > i3 and 16o3 < P0 }
dep_async [P0, P2, P3, P1] -> { RS1_affine_parallel[i0, i1, 0, i3] -> RS2_affine_parallel[i0, i1, 0, i3] : 0 <= i0 < P3 and 0 <= i1 < P2 and i3 >= 0 and 16i3 < P0 }
array_order [P2, P3, P0, P1] -> { RS3_affine_parallel[i0, i1, 0] -> RS0_affine_parallel[o0, o1, 0] : i0 >= 0 and 0 <= i1 < P2 and i0 < o0 < P3 and 0 <= o1 < P2; RS3_affine_parallel[i0, i1, 0] -> RS0_affine_parallel[i0, o1, 0] : 0 <= i0 < P3 and i1 >= 0 and i1 < o1 < P2; RS3_affine_parallel[i0, i1, 0] -> RS2_affine_parallel[o0, o1, 0, o3] : i0 >= 0 and 0 <= i1 < P2 and i0 < o0 < P3 and 0 <= o1 < P2 and o3 >= 0 and 16o3 < P0; RS3_affine_parallel[i0, i1, 0] -> RS2_affine_parallel[i0, o1, 0, o3] : 0 <= i0 < P3 and i1 >= 0 and i1 < o1 < P2 and o3 >= 0 and 16o3 < P0; RS2_affine_parallel[i0, i1, 0, i3] -> RS1_affine_parallel[o0, o1, 0, o3] : i0 >= 0 and 0 <= i1 < P2 and i3 >= 0 and 16i3 < P0 and i0 < o0 < P3 and 0 <= o1 < P2 and o3 >= 0 and 16o3 < P0; RS2_affine_parallel[i0, i1, 0, i3] -> RS1_affine_parallel[i0, o1, 0, o3] : 0 <= i0 < P3 and i1 >= 0 and i3 >= 0 and 16i3 < P0 and i1 < o1 < P2 and o3 >= 0 and 16o3 < P0; RS2_affine_parallel[i0, i1, 0, i3] -> RS1_affine_parallel[i0, i1, 0, o3] : 0 <= i0 < P3 and 0 <= i1 < P2 and i3 >= 0 and o3 > i3 and 16o3 < P0; RS2_affine_parallel[i0, i1, 0, i3] -> RS2_affine_parallel[o0, o1, 0, o3] : i0 >= 0 and 0 <= i1 < P2 and i0 < o0 < P3 and 0 <= o1 < P2 and ((16i3 < P0 and 0 <= o3 < i3) or (i3 >= 0 and o3 > i3 and 16o3 < P0)); RS2_affine_parallel[i0, i1, 0, i3] -> RS2_affine_parallel[i0, o1, 0, o3] : 0 <= i0 < P3 and i1 >= 0 and i1 < o1 < P2 and ((16i3 < P0 and 0 <= o3 < i3) or (i3 >= 0 and o3 > i3 and 16o3 < P0)); RS2_affine_parallel[i0, i1, 0, i3] -> RS0_affine_parallel[o0, o1, 0] : i0 >= 0 and 0 <= i1 < P2 and i3 >= 0 and 16i3 < P0 and i0 < o0 < P3 and 0 <= o1 < P2; RS2_affine_parallel[i0, i1, 0, i3] -> RS0_affine_parallel[i0, o1, 0] : 0 <= i0 < P3 and i1 >= 0 and i3 >= 0 and 16i3 < P0 and i1 < o1 < P2 }
tagger [P0, P1, P2, P3] -> { [RS2_affine_parallel[i0, i1, i2, i3] -> S18_affine_load_Read0[]] -> RS2_affine_parallel[(i0), (i1), (i2), (i3)]; [RS0_affine_parallel[i0, i1, i2] -> S11_affine_store_Write0[]] -> RS0_affine_parallel[(i0), (i1), (i2)]; [RS1_affine_parallel[i0, i1, i2, i3] -> S14_affine_vector_store_Write0[]] -> RS1_affine_parallel[(i0), (i1), (i2), (i3)]; [S6_arith_index_cast[] -> S6_arith_index_cast_Read0[]] -> S6_arith_index_cast[]; [S4_arith_index_cast[] -> S4_arith_index_cast_Read0[]] -> S4_arith_index_cast[]; [RS2_affine_parallel[i0, i1, i2, i3] -> S27_affine_store_Write0[]] -> RS2_affine_parallel[(i0), (i1), (i2), (i3)]; [RS2_affine_parallel[i0, i1, i2, i3] -> S20_affine_vector_load_Read0[]] -> RS2_affine_parallel[(i0), (i1), (i2), (i3)]; [S34_affine_yield[i0, i1, i2] -> S34_affine_yield2[]] -> S34_affine_yield[(i0), (i1), (i2)]; [S34_affine_yield[i0, i1, i2] -> S34_affine_yield1[]] -> S34_affine_yield[(i0), (i1), (i2)]; [RS1_affine_parallel[i0, i1, i2, i3] -> S15_affine_vector_load_Read0[]] -> RS1_affine_parallel[(i0), (i1), (i2), (i3)]; [S34_affine_yield[i0, i1, i2] -> S34_affine_yield0[]] -> S34_affine_yield[(i0), (i1), (i2)]; [RS2_affine_parallel[i0, i1, i2, i3] -> S22_affine_vector_load_Read0[]] -> RS2_affine_parallel[(i0), (i1), (i2), (i3)]; [S7_arith_index_cast[] -> S7_arith_index_cast_Read0[]] -> S7_arith_index_cast[]; [RS3_affine_parallel[i0, i1, i2] -> S32_affine_vector_store_MayWrite0[]] -> RS3_affine_parallel[(i0), (i1), (i2)]; [RS3_affine_parallel[i0, i1, i2] -> S30_affine_load_Read0[]] -> RS3_affine_parallel[(i0), (i1), (i2)]; [RS1_affine_parallel[i0, i1, i2, i3] -> S16_affine_vector_store_Write0[]] -> RS1_affine_parallel[(i0), (i1), (i2), (i3)]; [RS1_affine_parallel[i0, i1, i2, i3] -> S13_affine_vector_load_Read0[]] -> RS1_affine_parallel[(i0), (i1), (i2), (i3)]; [S5_arith_index_cast[] -> S5_arith_index_cast_Read0[]] -> S5_arith_index_cast[] }
atagger [P0, P1, P2, P3] -> { [RS0_affine_parallel[i0, i1, i2] -> A_memref_alloca_res_4[]] -> RS0_affine_parallel[(i0), (i1), (i2)]; [RS1_affine_parallel[i0, i1, i2, i3] -> A_memref_ataddr_res_8[]] -> RS1_affine_parallel[(i0), (i1), (i2), (i3)]; [S34_affine_yield[i0, i1, i2] -> A_memref_alloca_res_4[]] -> S34_affine_yield[(i0), (i1), (i2)]; [RS2_affine_parallel[i0, i1, i2, i3] -> A_memref_alloca_res_10[]] -> RS2_affine_parallel[(i0), (i1), (i2), (i3)]; [RS3_affine_parallel[i0, i1, i2] -> A_memref_alloca_res_4[]] -> RS3_affine_parallel[(i0), (i1), (i2)]; [RS2_affine_parallel[i0, i1, i2, i3] -> A_memref_alloca_res_4[]] -> RS2_affine_parallel[(i0), (i1), (i2), (i3)]; [RS1_affine_parallel[i0, i1, i2, i3] -> A_memref_alloca_res_7[]] -> RS1_affine_parallel[(i0), (i1), (i2), (i3)]; [S34_affine_yield[i0, i1, i2] -> A_memref_alloca_res_10[]] -> S34_affine_yield[(i0), (i1), (i2)]; [S4_arith_index_cast[] -> A_llvm_func_arg_11_0[]] -> S4_arith_index_cast[]; [S7_arith_index_cast[] -> A_llvm_func_arg_0_3[]] -> S7_arith_index_cast[]; [S6_arith_index_cast[] -> A_llvm_func_arg_1_2[]] -> S6_arith_index_cast[]; [S34_affine_yield[i0, i1, i2] -> A_memref_alloca_res_7[]] -> S34_affine_yield[(i0), (i1), (i2)]; [RS1_affine_parallel[i0, i1, i2, i3] -> A_memref_ataddr_res_5[]] -> RS1_affine_parallel[(i0), (i1), (i2), (i3)]; [RS2_affine_parallel[i0, i1, i2, i3] -> A_memref_alloca_res_7[]] -> RS2_affine_parallel[(i0), (i1), (i2), (i3)]; [S5_arith_index_cast[] -> A_llvm_func_arg_10_1[]] -> S5_arith_index_cast[]; [RS1_affine_parallel[i0, i1, i2, i3] -> A_memref_alloca_res_10[]] -> RS1_affine_parallel[(i0), (i1), (i2), (i3)]; [RS3_affine_parallel[i0, i1, i2] -> A_memref_ataddr_res_21[]] -> RS3_affine_parallel[(i0), (i1), (i2)] }
schedule
domain: "[P0, P1, P2, P3] -> { RS0_affine_parallel[i0, i1, 0] : 0 <= i0 < P3 and 0 <= i1 < P2; RS2_affine_parallel[i0, i1, 0, i3] : 0 <= i0 < P3 and 0 <= i1 < P2 and i3 >= 0 and 16i3 < P0; RS1_affine_parallel[i0, i1, 0, i3] : 0 <= i0 < P3 and 0 <= i1 < P2 and i3 >= 0 and 16i3 < P0; RS3_affine_parallel[i0, i1, 0] : 0 <= i0 < P3 and 0 <= i1 < P2 }"
child:
  schedule: "[P0, P1, P2, P3] -> L3_affine_parallel[{ RS2_affine_parallel[i0, i1, i2, i3] -> [(i0)]; RS1_affine_parallel[i0, i1, i2, i3] -> [(i0)]; RS3_affine_parallel[i0, i1, i2] -> [(i0)]; RS0_affine_parallel[i0, i1, i2] -> [(i0)] }]"
  permutable: 1
  array_expansion: [ none ]
  child:
    schedule: "[P0, P1, P2, P3] -> L2_affine_parallel[{ RS2_affine_parallel[i0, i1, i2, i3] -> [(i1)]; RS1_affine_parallel[i0, i1, i2, i3] -> [(i1)]; RS3_affine_parallel[i0, i1, i2] -> [(i1)]; RS0_affine_parallel[i0, i1, i2] -> [(i1)] }]"
    permutable: 1
    array_expansion: [ none ]
    child:
      schedule: "[P0, P1, P2, P3] -> L1_affine_parallel[{ RS2_affine_parallel[i0, i1, i2, i3] -> [(0)]; RS1_affine_parallel[i0, i1, i2, i3] -> [(0)]; RS3_affine_parallel[i0, i1, i2] -> [(0)]; RS0_affine_parallel[i0, i1, i2] -> [(0)] }]"
      permutable: 1
      array_expansion: [ none ]
      child:
        sequence:
        - filter: "[P0, P1, P2, P3] -> { RS0_affine_parallel[i0, i1, i2] }"
        - filter: "[P0, P1, P2, P3] -> { RS2_affine_parallel[i0, i1, i2, i3]; RS1_affine_parallel[i0, i1, i2, i3] }"
          child:
            schedule: "[P0, P1, P2, P3] -> L0_affine_for[{ RS2_affine_parallel[i0, i1, i2, i3] -> [(i3)]; RS1_affine_parallel[i0, i1, i2, i3] -> [(i3)] }]"
            array_expansion: [ none ]
            child:
              sequence:
              - filter: "[P0, P1, P2, P3] -> { RS1_affine_parallel[i0, i1, i2, i3] }"
              - filter: "[P0, P1, P2, P3] -> { RS2_affine_parallel[i0, i1, i2, i3] }"
        - filter: "[P0, P1, P2, P3] -> { RS3_affine_parallel[i0, i1, i2] }"
Schedule constraints:
domain: "[P0, P1, P2, P3] -> { RS0_affine_parallel[i0, i1, 0] : 0 <= i0 < P3 and 0 <= i1 < P2; RS2_affine_parallel[i0, i1, 0, i3] : 0 <= i0 < P3 and 0 <= i1 < P2 and i3 >= 0 and 16i3 < P0; RS1_affine_parallel[i0, i1, 0, i3] : 0 <= i0 < P3 and 0 <= i1 < P2 and i3 >= 0 and 16i3 < P0; RS3_affine_parallel[i0, i1, 0] : 0 <= i0 < P3 and 0 <= i1 < P2 }"
validity: "[P2, P3, P0, P1] -> { RS0_affine_parallel[i0, i1, 0] -> RS2_affine_parallel[i0, i1, 0, 0] : P0 > 0 and 0 <= i0 < P3 and 0 <= i1 < P2; RS2_affine_parallel[i0, i1, 0, i3] -> RS3_affine_parallel[i0, i1, 0] : P0 > 0 and 0 <= i0 < P3 and 0 <= i1 < P2 and i3 >= 0 and -16 + P0 <= 16i3 < P0; RS2_affine_parallel[i0, i1, 0, i3] -> RS2_affine_parallel[i0, i1, 0, 1 + i3] : 0 <= i0 < P3 and 0 <= i1 < P2 and i3 >= 0 and 16i3 <= -17 + P0; RS1_affine_parallel[i0, i1, 0, i3] -> RS2_affine_parallel[i0, i1, 0, i3] : 0 <= i0 < P3 and 0 <= i1 < P2 and i3 >= 0 and 16i3 < P0; RS0_affine_parallel[i0, i1, 0] -> RS3_affine_parallel[i0, i1, 0] : P0 <= 0 and 0 <= i0 < P3 and 0 <= i1 < P2 }"
coincidence: "[P2, P3, P0, P1] -> { RS0_affine_parallel[i0, i1, 0] -> RS2_affine_parallel[i0, i1, 0, 0] : P0 > 0 and 0 <= i0 < P3 and 0 <= i1 < P2; RS2_affine_parallel[i0, i1, 0, i3] -> RS3_affine_parallel[i0, i1, 0] : P0 > 0 and 0 <= i0 < P3 and 0 <= i1 < P2 and i3 >= 0 and -16 + P0 <= 16i3 < P0; RS1_affine_parallel[i0, i1, 0, i3] -> RS2_affine_parallel[i0, i1, 0, i3] : 0 <= i0 < P3 and 0 <= i1 < P2 and i3 >= 0 and 16i3 < P0; RS0_affine_parallel[i0, i1, 0] -> RS3_affine_parallel[i0, i1, 0] : P0 <= 0 and 0 <= i0 < P3 and 0 <= i1 < P2 }"
condition: "[P0, P1, P2, P3] -> { [RS0_affine_parallel[i0, i1, 0] -> S11_affine_store_Write0[]] -> [RS2_affine_parallel[i0, i1, 0, 0] -> S18_affine_load_Read0[]] : P0 > 0 and 0 <= i0 < P3 and 0 <= i1 < P2; [RS0_affine_parallel[i0, i1, 0] -> S11_affine_store_Write0[]] -> [RS3_affine_parallel[i0, i1, 0] -> S30_affine_load_Read0[]] : P0 <= 0 and 0 <= i0 < P3 and 0 <= i1 < P2; [RS1_affine_parallel[i0, i1, 0, i3] -> S16_affine_vector_store_Write0[]] -> [RS2_affine_parallel[i0, i1, 0, i3] -> S22_affine_vector_load_Read0[]] : 0 <= i0 < P3 and 0 <= i1 < P2 and i3 >= 0 and 16i3 < P0; [RS1_affine_parallel[i0, i1, 0, i3] -> S14_affine_vector_store_Write0[]] -> [RS2_affine_parallel[i0, i1, 0, i3] -> S20_affine_vector_load_Read0[]] : 0 <= i0 < P3 and 0 <= i1 < P2 and i3 >= 0 and 16i3 < P0; [RS2_affine_parallel[i0, i1, 0, i3] -> S27_affine_store_Write0[]] -> [RS3_affine_parallel[i0, i1, 0] -> S30_affine_load_Read0[]] : P0 > 0 and 0 <= i0 < P3 and 0 <= i1 < P2 and i3 >= 0 and -16 + P0 <= 16i3 < P0; [RS2_affine_parallel[i0, i1, 0, i3] -> S27_affine_store_Write0[]] -> [RS2_affine_parallel[i0, i1, 0, 1 + i3] -> S18_affine_load_Read0[]] : 0 <= i0 < P3 and 0 <= i1 < P2 and i3 >= 0 and 16i3 <= -17 + P0 }"
conditional_validity: "[P2, P3, P0, P1] -> { [RS3_affine_parallel[i0, i1, 0] -> S30_affine_load_Read0[]] -> [RS2_affine_parallel[o0, o1, 0, o3] -> S27_affine_store_Write0[]] : i0 >= 0 and 0 <= i1 < P2 and i0 < o0 < P3 and 0 <= o1 < P2 and o3 >= 0 and 16o3 < P0; [RS3_affine_parallel[i0, i1, 0] -> S30_affine_load_Read0[]] -> [RS2_affine_parallel[i0, o1, 0, o3] -> S27_affine_store_Write0[]] : 0 <= i0 < P3 and i1 >= 0 and i1 < o1 < P2 and o3 >= 0 and 16o3 < P0; [RS2_affine_parallel[i0, i1, 0, i3] -> S18_affine_load_Read0[]] -> [RS2_affine_parallel[o0, o1, 0, o3] -> S27_affine_store_Write0[]] : i0 >= 0 and 0 <= i1 < P2 and i3 >= 0 and 16i3 < P0 and i0 < o0 < P3 and 0 <= o1 < P2 and o3 >= 0 and 16o3 < P0; [RS2_affine_parallel[i0, i1, 0, i3] -> S18_affine_load_Read0[]] -> [RS2_affine_parallel[i0, o1, 0, o3] -> S27_affine_store_Write0[]] : 0 <= i0 < P3 and i1 >= 0 and i3 >= 0 and 16i3 < P0 and i1 < o1 < P2 and o3 >= 0 and 16o3 < P0; [RS2_affine_parallel[i0, i1, 0, i3] -> S18_affine_load_Read0[]] -> [RS2_affine_parallel[i0, i1, 0, o3] -> S27_affine_store_Write0[]] : 0 <= i0 < P3 and 0 <= i1 < P2 and i3 >= 0 and o3 > i3 and 16o3 < P0; [RS3_affine_parallel[i0, i1, 0] -> S30_affine_load_Read0[]] -> [RS0_affine_parallel[o0, o1, 0] -> S11_affine_store_Write0[]] : i0 >= 0 and 0 <= i1 < P2 and i0 < o0 < P3 and 0 <= o1 < P2; [RS3_affine_parallel[i0, i1, 0] -> S30_affine_load_Read0[]] -> [RS0_affine_parallel[i0, o1, 0] -> S11_affine_store_Write0[]] : 0 <= i0 < P3 and i1 >= 0 and i1 < o1 < P2; [RS2_affine_parallel[i0, i1, 0, i3] -> S20_affine_vector_load_Read0[]] -> [RS1_affine_parallel[o0, o1, 0, o3] -> S14_affine_vector_store_Write0[]] : i0 >= 0 and 0 <= i1 < P2 and i3 >= 0 and 16i3 < P0 and i0 < o0 < P3 and 0 <= o1 < P2 and o3 >= 0 and 16o3 < P0; [RS2_affine_parallel[i0, i1, 0, i3] -> S20_affine_vector_load_Read0[]] -> [RS1_affine_parallel[i0, o1, 0, o3] -> S14_affine_vector_store_Write0[]] : 0 <= i0 < P3 and i1 >= 0 and i3 >= 0 and 16i3 < P0 and i1 < o1 < P2 and o3 >= 0 and 16o3 < P0; [RS2_affine_parallel[i0, i1, 0, i3] -> S20_affine_vector_load_Read0[]] -> [RS1_affine_parallel[i0, i1, 0, o3] -> S14_affine_vector_store_Write0[]] : 0 <= i0 < P3 and 0 <= i1 < P2 and i3 >= 0 and o3 > i3 and 16o3 < P0; [RS2_affine_parallel[i0, i1, 0, i3] -> S18_affine_load_Read0[]] -> [RS0_affine_parallel[o0, o1, 0] -> S11_affine_store_Write0[]] : i0 >= 0 and 0 <= i1 < P2 and i3 >= 0 and 16i3 < P0 and i0 < o0 < P3 and 0 <= o1 < P2; [RS2_affine_parallel[i0, i1, 0, i3] -> S18_affine_load_Read0[]] -> [RS0_affine_parallel[i0, o1, 0] -> S11_affine_store_Write0[]] : 0 <= i0 < P3 and i1 >= 0 and i3 >= 0 and 16i3 < P0 and i1 < o1 < P2; [RS3_affine_parallel[i0, i1, 0] -> S32_affine_vector_store_MayWrite0[]] -> [RS3_affine_parallel[o0, o1, 0] -> S32_affine_vector_store_MayWrite0[]] : i0 >= 0 and 0 <= i1 < P2 and i0 < o0 < P3 and 0 <= o1 < P2; [RS3_affine_parallel[i0, i1, 0] -> S32_affine_vector_store_MayWrite0[]] -> [RS3_affine_parallel[i0, o1, 0] -> S32_affine_vector_store_MayWrite0[]] : 0 <= i0 < P3 and i1 >= 0 and i1 < o1 < P2; [RS2_affine_parallel[i0, i1, 0, i3] -> S22_affine_vector_load_Read0[]] -> [RS1_affine_parallel[o0, o1, 0, o3] -> S16_affine_vector_store_Write0[]] : i0 >= 0 and 0 <= i1 < P2 and i3 >= 0 and 16i3 < P0 and i0 < o0 < P3 and 0 <= o1 < P2 and o3 >= 0 and 16o3 < P0; [RS2_affine_parallel[i0, i1, 0, i3] -> S22_affine_vector_load_Read0[]] -> [RS1_affine_parallel[i0, o1, 0, o3] -> S16_affine_vector_store_Write0[]] : 0 <= i0 < P3 and i1 >= 0 and i3 >= 0 and 16i3 < P0 and i1 < o1 < P2 and o3 >= 0 and 16o3 < P0; [RS2_affine_parallel[i0, i1, 0, i3] -> S22_affine_vector_load_Read0[]] -> [RS1_affine_parallel[i0, i1, 0, o3] -> S16_affine_vector_store_Write0[]] : 0 <= i0 < P3 and 0 <= i1 < P2 and i3 >= 0 and o3 > i3 and 16o3 < P0 }"
proximity: "[P0, P1, P2, P3] -> { RS0_affine_parallel[i0, i1, 0] -> RS2_affine_parallel[i0, i1, 0, 0] : P0 > 0 and 0 <= i0 < P3 and 0 <= i1 < P2; RS2_affine_parallel[i0, i1, 0, i3] -> RS3_affine_parallel[i0, i1, 0] : P0 > 0 and 0 <= i0 < P3 and 0 <= i1 < P2 and i3 >= 0 and -16 + P0 <= 16i3 < P0; RS2_affine_parallel[i0, i1, 0, i3] -> RS2_affine_parallel[i0, i1, 0, 1 + i3] : 0 <= i0 < P3 and 0 <= i1 < P2 and i3 >= 0 and 16i3 <= -17 + P0; RS1_affine_parallel[i0, i1, 0, i3] -> RS2_affine_parallel[i0, i1, 0, i3] : 0 <= i0 < P3 and 0 <= i1 < P2 and i3 >= 0 and 16i3 < P0; RS0_affine_parallel[i0, i1, 0] -> RS3_affine_parallel[i0, i1, 0] : P0 <= 0 and 0 <= i0 < P3 and 0 <= i1 < P2 }"
anti_proximity: "[P0, P2, P3, P1] -> { RS1_affine_parallel[i0, i1, 0, i3] -> RS2_affine_parallel[i0, i1, 0, i3] : 0 <= i0 < P3 and 0 <= i1 < P2 and i3 >= 0 and 16i3 < P0 }"
live_range_span: "[P0, P1, P2, P3] -> { [RS1_affine_parallel[i0, i1, 0, i3] -> A_memref_alloca_res_10[]] -> [RS2_affine_parallel[i0, i1, 0, i3] -> A_memref_alloca_res_10[]] : 0 <= i0 < P3 and 0 <= i1 < P2 and i3 >= 0 and 16i3 < P0; [RS2_affine_parallel[i0, i1, 0, i3] -> A_memref_alloca_res_4[]] -> [RS3_affine_parallel[i0, i1, 0] -> A_memref_alloca_res_4[]] : P0 > 0 and 0 <= i0 < P3 and 0 <= i1 < P2 and i3 >= 0 and -16 + P0 <= 16i3 < P0; [RS0_affine_parallel[i0, i1, 0] -> A_memref_alloca_res_4[]] -> [RS3_affine_parallel[i0, i1, 0] -> A_memref_alloca_res_4[]] : P0 <= 0 and 0 <= i0 < P3 and 0 <= i1 < P2; [RS2_affine_parallel[i0, i1, 0, i3] -> A_memref_alloca_res_4[]] -> [RS2_affine_parallel[i0, i1, 0, 1 + i3] -> A_memref_alloca_res_4[]] : 0 <= i0 < P3 and 0 <= i1 < P2 and i3 >= 0 and 16i3 <= -17 + P0; [RS0_affine_parallel[i0, i1, 0] -> A_memref_alloca_res_4[]] -> [RS2_affine_parallel[i0, i1, 0, 0] -> A_memref_alloca_res_4[]] : P0 > 0 and 0 <= i0 < P3 and 0 <= i1 < P2; [RS1_affine_parallel[i0, i1, 0, i3] -> A_memref_alloca_res_7[]] -> [RS2_affine_parallel[i0, i1, 0, i3] -> A_memref_alloca_res_7[]] : 0 <= i0 < P3 and 0 <= i1 < P2 and i3 >= 0 and 16i3 < P0 }"
live_range_maximal_span: "[P0, P1, P2, P3] -> { [RS1_affine_parallel[i0, i1, 0, i3] -> A_memref_alloca_res_7[]] -> [RS2_affine_parallel[i0, i1, 0, i3] -> A_memref_alloca_res_7[]] : 0 <= i0 < P3 and 0 <= i1 < P2 and i3 >= 0 and 16i3 < P0; [RS0_affine_parallel[i0, i1, 0] -> A_memref_alloca_res_4[]] -> [RS3_affine_parallel[i0, i1, 0] -> A_memref_alloca_res_4[]] : 0 <= i0 < P3 and 0 <= i1 < P2 and (P0 >= 17 or P0 <= 0 or (0 < P0 <= 16)); [RS1_affine_parallel[i0, i1, 0, i3] -> A_memref_alloca_res_10[]] -> [RS2_affine_parallel[i0, i1, 0, i3] -> A_memref_alloca_res_10[]] : 0 <= i0 < P3 and 0 <= i1 < P2 and i3 >= 0 and 16i3 < P0 }"
array_sizes: "[P0, P1, P2, P3] -> { A_memref_alloca_res_10[] -> [1024]; A_memref_alloca_res_4[] -> [1024]; A_memref_alloca_res_7[] -> [1024] }"
Building sched graph from scheudle constraints:
domain: "[P0, P1, P2, P3] -> { RS0_affine_parallel[i0, i1, 0] : 0 <= i0 < P3 and 0 <= i1 < P2; RS2_affine_parallel[i0, i1, 0, i3] : 0 <= i0 < P3 and 0 <= i1 < P2 and i3 >= 0 and 16i3 < P0; RS1_affine_parallel[i0, i1, 0, i3] : 0 <= i0 < P3 and 0 <= i1 < P2 and i3 >= 0 and 16i3 < P0; RS3_affine_parallel[i0, i1, 0] : 0 <= i0 < P3 and 0 <= i1 < P2 }"
validity: "[P0, P1, P2, P3] -> { RS0_affine_parallel[i0, i1, 0] -> RS2_affine_parallel[i0, i1, 0, 0] : P0 > 0 and 0 <= i0 < P3 and 0 <= i1 < P2; RS2_affine_parallel[i0, i1, 0, i3] -> RS3_affine_parallel[i0, i1, 0] : P0 > 0 and 0 <= i0 < P3 and 0 <= i1 < P2 and i3 >= 0 and -16 + P0 <= 16i3 < P0; RS2_affine_parallel[i0, i1, 0, i3] -> RS2_affine_parallel[i0, i1, 0, 1 + i3] : 0 <= i0 < P3 and 0 <= i1 < P2 and i3 >= 0 and 16i3 <= -17 + P0; RS1_affine_parallel[i0, i1, 0, i3] -> RS2_affine_parallel[i0, i1, 0, i3] : 0 <= i0 < P3 and 0 <= i1 < P2 and i3 >= 0 and 16i3 < P0; RS0_affine_parallel[i0, i1, 0] -> RS3_affine_parallel[i0, i1, 0] : P0 <= 0 and 0 <= i0 < P3 and 0 <= i1 < P2 }"
coincidence: "[P0, P1, P2, P3] -> { RS0_affine_parallel[i0, i1, 0] -> RS2_affine_parallel[i0, i1, 0, 0] : P0 > 0 and 0 <= i0 < P3 and 0 <= i1 < P2; RS2_affine_parallel[i0, i1, 0, i3] -> RS3_affine_parallel[i0, i1, 0] : P0 > 0 and 0 <= i0 < P3 and 0 <= i1 < P2 and i3 >= 0 and -16 + P0 <= 16i3 < P0; RS1_affine_parallel[i0, i1, 0, i3] -> RS2_affine_parallel[i0, i1, 0, i3] : 0 <= i0 < P3 and 0 <= i1 < P2 and i3 >= 0 and 16i3 < P0; RS0_affine_parallel[i0, i1, 0] -> RS3_affine_parallel[i0, i1, 0] : P0 <= 0 and 0 <= i0 < P3 and 0 <= i1 < P2 }"
condition: "[P0, P1, P2, P3] -> { [RS0_affine_parallel[i0, i1, 0] -> S11_affine_store_Write0[]] -> [RS2_affine_parallel[i0, i1, 0, 0] -> S18_affine_load_Read0[]] : P0 > 0 and 0 <= i0 < P3 and 0 <= i1 < P2; [RS0_affine_parallel[i0, i1, 0] -> S11_affine_store_Write0[]] -> [RS3_affine_parallel[i0, i1, 0] -> S30_affine_load_Read0[]] : P0 <= 0 and 0 <= i0 < P3 and 0 <= i1 < P2; [RS1_affine_parallel[i0, i1, 0, i3] -> S16_affine_vector_store_Write0[]] -> [RS2_affine_parallel[i0, i1, 0, i3] -> S22_affine_vector_load_Read0[]] : 0 <= i0 < P3 and 0 <= i1 < P2 and i3 >= 0 and 16i3 < P0; [RS1_affine_parallel[i0, i1, 0, i3] -> S14_affine_vector_store_Write0[]] -> [RS2_affine_parallel[i0, i1, 0, i3] -> S20_affine_vector_load_Read0[]] : 0 <= i0 < P3 and 0 <= i1 < P2 and i3 >= 0 and 16i3 < P0; [RS2_affine_parallel[i0, i1, 0, i3] -> S27_affine_store_Write0[]] -> [RS3_affine_parallel[i0, i1, 0] -> S30_affine_load_Read0[]] : P0 > 0 and 0 <= i0 < P3 and 0 <= i1 < P2 and i3 >= 0 and -16 + P0 <= 16i3 < P0; [RS2_affine_parallel[i0, i1, 0, i3] -> S27_affine_store_Write0[]] -> [RS2_affine_parallel[i0, i1, 0, 1 + i3] -> S18_affine_load_Read0[]] : 0 <= i0 < P3 and 0 <= i1 < P2 and i3 >= 0 and 16i3 <= -17 + P0 }"
conditional_validity: "[P0, P1, P2, P3] -> { [RS3_affine_parallel[i0, i1, 0] -> S30_affine_load_Read0[]] -> [RS2_affine_parallel[o0, o1, 0, o3] -> S27_affine_store_Write0[]] : i0 >= 0 and 0 <= i1 < P2 and i0 < o0 < P3 and 0 <= o1 < P2 and o3 >= 0 and 16o3 < P0; [RS3_affine_parallel[i0, i1, 0] -> S30_affine_load_Read0[]] -> [RS2_affine_parallel[i0, o1, 0, o3] -> S27_affine_store_Write0[]] : 0 <= i0 < P3 and i1 >= 0 and i1 < o1 < P2 and o3 >= 0 and 16o3 < P0; [RS2_affine_parallel[i0, i1, 0, i3] -> S18_affine_load_Read0[]] -> [RS2_affine_parallel[o0, o1, 0, o3] -> S27_affine_store_Write0[]] : i0 >= 0 and 0 <= i1 < P2 and i3 >= 0 and 16i3 < P0 and i0 < o0 < P3 and 0 <= o1 < P2 and o3 >= 0 and 16o3 < P0; [RS2_affine_parallel[i0, i1, 0, i3] -> S18_affine_load_Read0[]] -> [RS2_affine_parallel[i0, o1, 0, o3] -> S27_affine_store_Write0[]] : 0 <= i0 < P3 and i1 >= 0 and i3 >= 0 and 16i3 < P0 and i1 < o1 < P2 and o3 >= 0 and 16o3 < P0; [RS2_affine_parallel[i0, i1, 0, i3] -> S18_affine_load_Read0[]] -> [RS2_affine_parallel[i0, i1, 0, o3] -> S27_affine_store_Write0[]] : 0 <= i0 < P3 and 0 <= i1 < P2 and i3 >= 0 and o3 > i3 and 16o3 < P0; [RS3_affine_parallel[i0, i1, 0] -> S30_affine_load_Read0[]] -> [RS0_affine_parallel[o0, o1, 0] -> S11_affine_store_Write0[]] : i0 >= 0 and 0 <= i1 < P2 and i0 < o0 < P3 and 0 <= o1 < P2; [RS3_affine_parallel[i0, i1, 0] -> S30_affine_load_Read0[]] -> [RS0_affine_parallel[i0, o1, 0] -> S11_affine_store_Write0[]] : 0 <= i0 < P3 and i1 >= 0 and i1 < o1 < P2; [RS2_affine_parallel[i0, i1, 0, i3] -> S20_affine_vector_load_Read0[]] -> [RS1_affine_parallel[o0, o1, 0, o3] -> S14_affine_vector_store_Write0[]] : i0 >= 0 and 0 <= i1 < P2 and i3 >= 0 and 16i3 < P0 and i0 < o0 < P3 and 0 <= o1 < P2 and o3 >= 0 and 16o3 < P0; [RS2_affine_parallel[i0, i1, 0, i3] -> S20_affine_vector_load_Read0[]] -> [RS1_affine_parallel[i0, o1, 0, o3] -> S14_affine_vector_store_Write0[]] : 0 <= i0 < P3 and i1 >= 0 and i3 >= 0 and 16i3 < P0 and i1 < o1 < P2 and o3 >= 0 and 16o3 < P0; [RS2_affine_parallel[i0, i1, 0, i3] -> S20_affine_vector_load_Read0[]] -> [RS1_affine_parallel[i0, i1, 0, o3] -> S14_affine_vector_store_Write0[]] : 0 <= i0 < P3 and 0 <= i1 < P2 and i3 >= 0 and o3 > i3 and 16o3 < P0; [RS2_affine_parallel[i0, i1, 0, i3] -> S18_affine_load_Read0[]] -> [RS0_affine_parallel[o0, o1, 0] -> S11_affine_store_Write0[]] : i0 >= 0 and 0 <= i1 < P2 and i3 >= 0 and 16i3 < P0 and i0 < o0 < P3 and 0 <= o1 < P2; [RS2_affine_parallel[i0, i1, 0, i3] -> S18_affine_load_Read0[]] -> [RS0_affine_parallel[i0, o1, 0] -> S11_affine_store_Write0[]] : 0 <= i0 < P3 and i1 >= 0 and i3 >= 0 and 16i3 < P0 and i1 < o1 < P2; [RS3_affine_parallel[i0, i1, 0] -> S32_affine_vector_store_MayWrite0[]] -> [RS3_affine_parallel[o0, o1, 0] -> S32_affine_vector_store_MayWrite0[]] : i0 >= 0 and 0 <= i1 < P2 and i0 < o0 < P3 and 0 <= o1 < P2; [RS3_affine_parallel[i0, i1, 0] -> S32_affine_vector_store_MayWrite0[]] -> [RS3_affine_parallel[i0, o1, 0] -> S32_affine_vector_store_MayWrite0[]] : 0 <= i0 < P3 and i1 >= 0 and i1 < o1 < P2; [RS2_affine_parallel[i0, i1, 0, i3] -> S22_affine_vector_load_Read0[]] -> [RS1_affine_parallel[o0, o1, 0, o3] -> S16_affine_vector_store_Write0[]] : i0 >= 0 and 0 <= i1 < P2 and i3 >= 0 and 16i3 < P0 and i0 < o0 < P3 and 0 <= o1 < P2 and o3 >= 0 and 16o3 < P0; [RS2_affine_parallel[i0, i1, 0, i3] -> S22_affine_vector_load_Read0[]] -> [RS1_affine_parallel[i0, o1, 0, o3] -> S16_affine_vector_store_Write0[]] : 0 <= i0 < P3 and i1 >= 0 and i3 >= 0 and 16i3 < P0 and i1 < o1 < P2 and o3 >= 0 and 16o3 < P0; [RS2_affine_parallel[i0, i1, 0, i3] -> S22_affine_vector_load_Read0[]] -> [RS1_affine_parallel[i0, i1, 0, o3] -> S16_affine_vector_store_Write0[]] : 0 <= i0 < P3 and 0 <= i1 < P2 and i3 >= 0 and o3 > i3 and 16o3 < P0 }"
proximity: "[P0, P1, P2, P3] -> { RS0_affine_parallel[i0, i1, 0] -> RS2_affine_parallel[i0, i1, 0, 0] : P0 > 0 and 0 <= i0 < P3 and 0 <= i1 < P2; RS2_affine_parallel[i0, i1, 0, i3] -> RS3_affine_parallel[i0, i1, 0] : P0 > 0 and 0 <= i0 < P3 and 0 <= i1 < P2 and i3 >= 0 and -16 + P0 <= 16i3 < P0; RS2_affine_parallel[i0, i1, 0, i3] -> RS2_affine_parallel[i0, i1, 0, 1 + i3] : 0 <= i0 < P3 and 0 <= i1 < P2 and i3 >= 0 and 16i3 <= -17 + P0; RS1_affine_parallel[i0, i1, 0, i3] -> RS2_affine_parallel[i0, i1, 0, i3] : 0 <= i0 < P3 and 0 <= i1 < P2 and i3 >= 0 and 16i3 < P0; RS0_affine_parallel[i0, i1, 0] -> RS3_affine_parallel[i0, i1, 0] : P0 <= 0 and 0 <= i0 < P3 and 0 <= i1 < P2 }"
anti_proximity: "[P0, P1, P2, P3] -> { RS1_affine_parallel[i0, i1, 0, i3] -> RS2_affine_parallel[i0, i1, 0, i3] : 0 <= i0 < P3 and 0 <= i1 < P2 and i3 >= 0 and 16i3 < P0 }"
live_range_span: "[P0, P1, P2, P3] -> { [RS1_affine_parallel[i0, i1, 0, i3] -> A_memref_alloca_res_10[]] -> [RS2_affine_parallel[i0, i1, 0, i3] -> A_memref_alloca_res_10[]] : 0 <= i0 < P3 and 0 <= i1 < P2 and i3 >= 0 and 16i3 < P0; [RS2_affine_parallel[i0, i1, 0, i3] -> A_memref_alloca_res_4[]] -> [RS3_affine_parallel[i0, i1, 0] -> A_memref_alloca_res_4[]] : P0 > 0 and 0 <= i0 < P3 and 0 <= i1 < P2 and i3 >= 0 and -16 + P0 <= 16i3 < P0; [RS0_affine_parallel[i0, i1, 0] -> A_memref_alloca_res_4[]] -> [RS3_affine_parallel[i0, i1, 0] -> A_memref_alloca_res_4[]] : P0 <= 0 and 0 <= i0 < P3 and 0 <= i1 < P2; [RS2_affine_parallel[i0, i1, 0, i3] -> A_memref_alloca_res_4[]] -> [RS2_affine_parallel[i0, i1, 0, 1 + i3] -> A_memref_alloca_res_4[]] : 0 <= i0 < P3 and 0 <= i1 < P2 and i3 >= 0 and 16i3 <= -17 + P0; [RS0_affine_parallel[i0, i1, 0] -> A_memref_alloca_res_4[]] -> [RS2_affine_parallel[i0, i1, 0, 0] -> A_memref_alloca_res_4[]] : P0 > 0 and 0 <= i0 < P3 and 0 <= i1 < P2; [RS1_affine_parallel[i0, i1, 0, i3] -> A_memref_alloca_res_7[]] -> [RS2_affine_parallel[i0, i1, 0, i3] -> A_memref_alloca_res_7[]] : 0 <= i0 < P3 and 0 <= i1 < P2 and i3 >= 0 and 16i3 < P0 }"
live_range_maximal_span: "[P0, P1, P2, P3] -> { [RS1_affine_parallel[i0, i1, 0, i3] -> A_memref_alloca_res_7[]] -> [RS2_affine_parallel[i0, i1, 0, i3] -> A_memref_alloca_res_7[]] : 0 <= i0 < P3 and 0 <= i1 < P2 and i3 >= 0 and 16i3 < P0; [RS0_affine_parallel[i0, i1, 0] -> A_memref_alloca_res_4[]] -> [RS3_affine_parallel[i0, i1, 0] -> A_memref_alloca_res_4[]] : 0 <= i0 < P3 and 0 <= i1 < P2 and (P0 >= 17 or P0 <= 0 or (0 < P0 <= 16)); [RS1_affine_parallel[i0, i1, 0, i3] -> A_memref_alloca_res_10[]] -> [RS2_affine_parallel[i0, i1, 0, i3] -> A_memref_alloca_res_10[]] : 0 <= i0 < P3 and 0 <= i1 < P2 and i3 >= 0 and 16i3 < P0 }"
array_sizes: "[P0, P1, P2, P3] -> { A_memref_alloca_res_10[] -> [1024]; A_memref_alloca_res_4[] -> [1024]; A_memref_alloca_res_7[] -> [1024] }"
dom reverse[P0, P1, P2, P3] -> { [A_memref_alloca_res_4[] -> RS0_affine_parallel[i0, i1, i2]] -> [RS3_affine_parallel[o0, o1, o2] -> A_memref_alloca_res_4[]] : i2 = 0 and o0 = i0 and o1 = i1 and o2 = 0 and P0 <= 0 and i0 >= 0 and i0 < P3 and i1 >= 0 and i1 < P2; [A_memref_alloca_res_4[] -> RS0_affine_parallel[i0, i1, i2]] -> [RS2_affine_parallel[o0, o1, o2, o3] -> A_memref_alloca_res_4[]] : i2 = 0 and o0 = i0 and o1 = i1 and o2 = 0 and o3 = 0 and P0 > 0 and i0 >= 0 and i0 < P3 and i1 >= 0 and i1 < P2; [A_memref_alloca_res_7[] -> RS1_affine_parallel[i0, i1, i2, i3]] -> [RS2_affine_parallel[o0, o1, o2, o3] -> A_memref_alloca_res_7[]] : i2 = 0 and o0 = i0 and o1 = i1 and o2 = 0 and o3 = i3 and i0 >= 0 and i0 < P3 and i1 >= 0 and i1 < P2 and i3 >= 0 and 16i3 < P0; [A_memref_alloca_res_10[] -> RS1_affine_parallel[i0, i1, i2, i3]] -> [RS2_affine_parallel[o0, o1, o2, o3] -> A_memref_alloca_res_10[]] : i2 = 0 and o0 = i0 and o1 = i1 and o2 = 0 and o3 = i3 and i0 >= 0 and i0 < P3 and i1 >= 0 and i1 < P2 and i3 >= 0 and 16i3 < P0; [A_memref_alloca_res_4[] -> RS2_affine_parallel[i0, i1, i2, i3]] -> [RS3_affine_parallel[o0, o1, o2] -> A_memref_alloca_res_4[]] : i2 = 0 and o0 = i0 and o1 = i1 and o2 = 0 and P0 > 0 and i0 >= 0 and i0 < P3 and i1 >= 0 and i1 < P2 and 16i3 >= -16 + P0 and 16i3 < P0 and i3 >= 0; [A_memref_alloca_res_4[] -> RS2_affine_parallel[i0, i1, i2, i3]] -> [RS2_affine_parallel[o0, o1, o2, o3] -> A_memref_alloca_res_4[]] : i2 = 0 and o0 = i0 and o1 = i1 and o2 = 0 and o3 = 1 + i3 and i0 >= 0 and i0 < P3 and i1 >= 0 and i1 < P2 and i3 >= 0 and 16i3 <= -17 + P0 }
range reverse[P0, P1, P2, P3] -> { [A_memref_alloca_res_4[] -> RS2_affine_parallel[i0, i1, i2, i3]] -> [A_memref_alloca_res_4[] -> RS2_affine_parallel[o0, o1, o2, o3]] : i2 = 0 and o0 = i0 and o1 = i1 and o2 = 0 and o3 = 1 + i3 and i0 >= 0 and i0 < P3 and i1 >= 0 and i1 < P2 and i3 >= 0 and 16i3 <= -17 + P0; [A_memref_alloca_res_4[] -> RS0_affine_parallel[i0, i1, i2]] -> [A_memref_alloca_res_4[] -> RS2_affine_parallel[o0, o1, o2, o3]] : i2 = 0 and o0 = i0 and o1 = i1 and o2 = 0 and o3 = 0 and P0 > 0 and i0 >= 0 and i0 < P3 and i1 >= 0 and i1 < P2; [A_memref_alloca_res_4[] -> RS0_affine_parallel[i0, i1, i2]] -> [A_memref_alloca_res_4[] -> RS3_affine_parallel[o0, o1, o2]] : i2 = 0 and o0 = i0 and o1 = i1 and o2 = 0 and P0 <= 0 and i0 >= 0 and i0 < P3 and i1 >= 0 and i1 < P2; [A_memref_alloca_res_7[] -> RS1_affine_parallel[i0, i1, i2, i3]] -> [A_memref_alloca_res_7[] -> RS2_affine_parallel[o0, o1, o2, o3]] : i2 = 0 and o0 = i0 and o1 = i1 and o2 = 0 and o3 = i3 and i0 >= 0 and i0 < P3 and i1 >= 0 and i1 < P2 and i3 >= 0 and 16i3 < P0; [A_memref_alloca_res_10[] -> RS1_affine_parallel[i0, i1, i2, i3]] -> [A_memref_alloca_res_10[] -> RS2_affine_parallel[o0, o1, o2, o3]] : i2 = 0 and o0 = i0 and o1 = i1 and o2 = 0 and o3 = i3 and i0 >= 0 and i0 < P3 and i1 >= 0 and i1 < P2 and i3 >= 0 and 16i3 < P0; [A_memref_alloca_res_4[] -> RS2_affine_parallel[i0, i1, i2, i3]] -> [A_memref_alloca_res_4[] -> RS3_affine_parallel[o0, o1, o2]] : i2 = 0 and o0 = i0 and o1 = i1 and o2 = 0 and P0 > 0 and i0 >= 0 and i0 < P3 and i1 >= 0 and i1 < P2 and 16i3 >= -16 + P0 and 16i3 < P0 and i3 >= 0 }
handling uset
[P0, P1, P2, P3] -> { [A_memref_alloca_res_7[] -> RS2_affine_parallel[i0, i1, i2, i3]]; [A_memref_alloca_res_10[] -> RS1_affine_parallel[i0, i1, i2, i3]]; [A_memref_alloca_res_4[] -> RS3_affine_parallel[i0, i1, i2]]; [A_memref_alloca_res_4[] -> RS2_affine_parallel[i0, i1, i2, i3]]; [A_memref_alloca_res_7[] -> RS1_affine_parallel[i0, i1, i2, i3]]; [A_memref_alloca_res_4[] -> RS0_affine_parallel[i0, i1, i2]]; [A_memref_alloca_res_10[] -> RS2_affine_parallel[i0, i1, i2, i3]] }
projected out all uset
[P0, P1, P2, P3] -> { [A_memref_alloca_res_7[] -> RS2_affine_parallel[]]; [A_memref_alloca_res_4[] -> RS3_affine_parallel[]]; [A_memref_alloca_res_10[] -> RS2_affine_parallel[]]; [A_memref_alloca_res_4[] -> RS0_affine_parallel[]]; [A_memref_alloca_res_7[] -> RS1_affine_parallel[]]; [A_memref_alloca_res_4[] -> RS2_affine_parallel[]]; [A_memref_alloca_res_10[] -> RS1_affine_parallel[]] }
setup lp:
{ [i0, i1, i2, i3, i4, i5, i6, i7, i8, i9, i10, i11, i12, i13, i14, i15, i16, i17, i18, i19, i20, i21, i22, i23, i24, i25, i26, i27, i28, i29, i30, i31, i32, i33, i34, i35, i36, i37, i38, i39, i40, i41, i42, i43, i44, i45, i46, i47, i48, i49, i50, i51] : i48 = i17 and i39 = i28 and i7 = i6 and i48 = i28 and i28 = i17 and i46 = i3 - i12 - i13 - i14 - i15 - i21 - i22 - i23 - i24 - i25 - i26 - i32 - i33 - i34 - i35 - i36 - i37 - i43 - i44 - i45 and i50 = i2 - i16 - i17 - i18 - i19 - i27 - i28 - i29 - i30 - i38 - i39 - i40 - i41 - i47 - i48 - i49 and i11 = i0 - i4 - i5 - i6 - i7 - i8 - i9 - i10 and i28 = i17 and i48 = i28 and i39 = i28 and i48 = i17 and i22 >= i21 and i27 >= i16 and i30 >= -i12 + i13 + i19 + i23 - i24 and i30 >= i19 and i29 >= -i14 + i15 + i18 + i25 - i26 and i29 >= i18 and i31 >= i16 + i18 + i19 + i20 - i27 - i29 - i30 and 16i47 >= -i21 + i22 + 16i27 and i50 >= i30 and i49 >= -i25 + i26 + i29 + i45 - i46 and i49 >= i29 and i50 >= -i23 + i24 + i30 + i43 - i44 and i51 >= i27 + i29 + i30 + i31 - i47 - i49 - i50 and 16i51 >= 15i21 - 15i22 + 16i27 + 16i29 + 16i30 + 16i31 - 16i47 - 16i49 - 16i50 and i41 <= -i23 + i24 + i30 + i34 - i35 and i41 <= i30 and i40 <= -i25 + i26 + i29 + i36 - i37 and i40 <= i29 and 16i38 <= -i21 + i22 + 16i27 + i32 - i33 and i38 <= i27 and i42 <= i27 + i29 + i30 + i31 - i38 - i40 - i41 and i47 <= i16 and i50 >= -i12 + i13 + i19 + i43 - i44 and i50 >= i19 and i49 >= -i14 + i15 + i18 + i45 - i46 and i49 >= i18 and i51 >= i18 + i19 + i20 - i49 - i50 and i27 <= i16 and i30 <= -i12 + i13 + i19 + i23 - i24 and i30 <= i19 and i29 <= -i14 + i15 + i18 + i25 - i26 and i29 <= i18 and i31 <= i16 + i18 + i19 + i20 - i27 - i29 - i30 and 16i47 <= -i21 + i22 + 16i27 and i50 <= i30 and i49 <= -i25 + i26 + i29 + i45 - i46 and i49 <= i29 and i50 <= -i23 + i24 + i30 + i43 - i44 and i51 <= i27 + i29 + i30 + i31 - i47 - i49 - i50 and 16i51 <= 15i21 - 15i22 + 16i27 + 16i29 + 16i30 + 16i31 - 16i47 - 16i49 - 16i50 and i9 >= i8 and i11 >= i10 and i5 >= i4 and i22 <= i1 - 17i4 + 17i5 - i8 + i9 - i10 + i11 + i21 and i41 >= -i23 + i24 + i30 + i34 - i35 and i41 >= i30 and i40 >= -i25 + i26 + i29 + i36 - i37 and i40 >= i29 and 16i38 >= -i21 + i22 + 16i27 + i32 - i33 and i38 >= i27 and i42 >= i27 + i29 + i30 + i31 - i38 - i40 - i41 and i47 >= i16 and i50 <= -i12 + i13 + i19 + i43 - i44 and i50 <= i19 and i49 <= -i14 + i15 + i18 + i45 - i46 and i49 <= i18 and i51 <= i18 + i19 + i20 - i49 - i50 }
is_empty: 0
{ [i0, i1, i2, i3, i4, i5, i6, i7, i8, i9, i10, i11, i12, i13, i14, i15, i16, i17, i18, i19, i20, i21, i22, i23, i24, i25, i26, i27, i28, i29, i30, i31, i32, i33, i34, i35, i36, i37, i38, i39, i40, i41, i42, i43, i44, i45, i46, i47, i48, i49, i50, i51] : i0 = 0 and i1 = 0 and i2 = 0 and i3 = 0 and i4 = 0 and i5 = 0 and i6 = 0 and i7 = 0 and i8 = 0 and i9 = 0 and i10 = 0 and i11 = 0 and i12 = 0 and i13 = 0 and i14 = 0 and i15 = 0 and i16 = 0 and i17 = 0 and i18 = 0 and i19 = 0 and i20 = 0 and i21 = 0 and i22 = 0 and i23 = 0 and i24 = 0 and i25 = 0 and i26 = 0 and i27 = 0 and i28 = 0 and i29 = 0 and i30 = 0 and i31 = 0 and i32 = 0 and i33 = 0 and i34 = 0 and i35 = 0 and i36 = 0 and i37 = 0 and i38 = 0 and i39 = 0 and i40 = 0 and i41 = 0 and i42 = 0 and i43 = 0 and i44 = 0 and i45 = 0 and i46 = 0 and i47 = 0 and i48 = 0 and i49 = 0 and i50 = 0 and i51 = 0 }
sol:
[1,0,0,0,4,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,1,0,0,0,0,0]
added row to overlapping live ranges
[[1,1,1]]
setup lp:
{ [i0, i1, i2, i3, i4, i5, i6, i7, i8, i9, i10, i11, i12, i13, i14, i15, i16, i17, i18, i19, i20, i21, i22, i23, i24, i25, i26, i27, i28, i29, i30, i31, i32, i33, i34, i35, i36, i37, i38, i39, i40, i41, i42, i43, i44, i45, i46, i47, i48, i49, i50, i51] : i48 = i17 and i39 = i28 and i48 = i28 and i28 = i17 and i46 = i3 - i12 - i13 - i14 - i15 - i21 - i22 - i23 - i24 - i25 - i26 - i32 - i33 - i34 - i35 - i36 - i37 - i43 - i44 - i45 and i50 = i2 - i16 - i17 - i18 - i19 - i27 - i28 - i29 - i30 - i38 - i39 - i40 - i41 - i47 - i48 - i49 and i11 = i0 - i4 - i5 - i6 - i7 - i8 - i9 - i10 and i28 = i17 and i48 = i28 and i39 = i28 and i48 = i17 and i22 >= i21 and i27 >= i16 and i30 >= -i12 + i13 + i19 + i23 - i24 and i30 >= i19 and i29 >= -i14 + i15 + i18 + i25 - i26 and i29 >= i18 and i31 >= i16 + i18 + i19 + i20 - i27 - i29 - i30 and 16i47 >= -i21 + i22 + 16i27 and i50 >= i30 and i49 >= -i25 + i26 + i29 + i45 - i46 and i49 >= i29 and i50 >= -i23 + i24 + i30 + i43 - i44 and i51 >= i27 + i29 + i30 + i31 - i47 - i49 - i50 and 16i51 >= 15i21 - 15i22 + 16i27 + 16i29 + 16i30 + 16i31 - 16i47 - 16i49 - 16i50 and i41 <= -i23 + i24 + i30 + i34 - i35 and i41 <= i30 and i40 <= -i25 + i26 + i29 + i36 - i37 and i40 <= i29 and 16i38 <= -i21 + i22 + 16i27 + i32 - i33 and i38 <= i27 and i42 <= i27 + i29 + i30 + i31 - i38 - i40 - i41 and i47 <= i16 and i50 >= -i12 + i13 + i19 + i43 - i44 and i50 >= i19 and i49 >= -i14 + i15 + i18 + i45 - i46 and i49 >= i18 and i51 >= i18 + i19 + i20 - i49 - i50 and i27 <= i16 and i30 <= -i12 + i13 + i19 + i23 - i24 and i30 <= i19 and i29 <= -i14 + i15 + i18 + i25 - i26 and i29 <= i18 and i31 <= i16 + i18 + i19 + i20 - i27 - i29 - i30 and 16i47 <= -i21 + i22 + 16i27 and i50 <= i30 and i49 <= -i25 + i26 + i29 + i45 - i46 and i49 <= i29 and i50 <= -i23 + i24 + i30 + i43 - i44 and i51 <= i27 + i29 + i30 + i31 - i47 - i49 - i50 and 16i51 <= 15i21 - 15i22 + 16i27 + 16i29 + 16i30 + 16i31 - 16i47 - 16i49 - 16i50 and i22 <= i21 and i41 >= -i23 + i24 + i30 + i34 - i35 and i41 >= i30 and i40 >= -i25 + i26 + i29 + i36 - i37 and i40 >= i29 and 16i38 >= -i21 + i22 + 16i27 + i32 - i33 and i38 >= i27 and i42 >= i27 + i29 + i30 + i31 - i38 - i40 - i41 and i47 >= i16 and i50 <= -i12 + i13 + i19 + i43 - i44 and i50 <= i19 and i49 <= -i14 + i15 + i18 + i45 - i46 and i49 <= i18 and i51 <= i18 + i19 + i20 - i49 - i50 }
is_empty: 0
{ [i0, i1, i2, i3, i4, i5, i6, i7, i8, i9, i10, i11, i12, i13, i14, i15, i16, i17, i18, i19, i20, i21, i22, i23, i24, i25, i26, i27, i28, i29, i30, i31, i32, i33, i34, i35, i36, i37, i38, i39, i40, i41, i42, i43, i44, i45, i46, i47, i48, i49, i50, i51] : i0 = 0 and i1 = 0 and i2 = 0 and i3 = 0 and i4 = 0 and i5 = 0 and i6 = 0 and i7 = 0 and i8 = 0 and i9 = 0 and i10 = 0 and i11 = 0 and i12 = 0 and i13 = 0 and i14 = 0 and i15 = 0 and i16 = 0 and i17 = 0 and i18 = 0 and i19 = 0 and i20 = 0 and i21 = 0 and i22 = 0 and i23 = 0 and i24 = 0 and i25 = 0 and i26 = 0 and i27 = 0 and i28 = 0 and i29 = 0 and i30 = 0 and i31 = 0 and i32 = 0 and i33 = 0 and i34 = 0 and i35 = 0 and i36 = 0 and i37 = 0 and i38 = 0 and i39 = 0 and i40 = 0 and i41 = 0 and i42 = 0 and i43 = 0 and i44 = 0 and i45 = 0 and i46 = 0 and i47 = 0 and i48 = 0 and i49 = 0 and i50 = 0 and i51 = 0 }
sol:
[1,0,0,0,4,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0]
added row to overlapping live ranges
[[1,1,1]
 [1,1,1]]
setup lp:
{ [i0, i1, i2, i3, i4, i5, i6, i7, i8, i9, i10, i11, i12, i13, i14, i15, i16, i17, i18, i19, i20, i21, i22, i23, i24, i25, i26, i27, i28, i29, i30, i31, i32, i33, i34, i35, i36, i37, i38, i39, i40, i41, i42, i43, i44, i45, i46, i47, i48, i49, i50, i51] : i48 = i17 and i39 = i28 and i48 = i28 and i28 = i17 and i46 = i3 - i12 - i13 - i14 - i15 - i21 - i22 - i23 - i24 - i25 - i26 - i32 - i33 - i34 - i35 - i36 - i37 - i43 - i44 - i45 and i50 = i2 - i16 - i17 - i18 - i19 - i27 - i28 - i29 - i30 - i38 - i39 - i40 - i41 - i47 - i48 - i49 and i11 = i0 - i4 - i5 - i6 - i7 - i8 - i9 - i10 and i28 = i17 and i48 = i28 and i39 = i28 and i48 = i17 and i22 >= i21 and i27 >= i16 and i30 >= -i12 + i13 + i19 + i23 - i24 and i30 >= i19 and i29 >= -i14 + i15 + i18 + i25 - i26 and i29 >= i18 and i31 >= i16 + i18 + i19 + i20 - i27 - i29 - i30 and 16i47 >= -i21 + i22 + 16i27 and i50 >= i30 and i49 >= -i25 + i26 + i29 + i45 - i46 and i49 >= i29 and i50 >= -i23 + i24 + i30 + i43 - i44 and i51 >= i27 + i29 + i30 + i31 - i47 - i49 - i50 and 16i51 >= 15i21 - 15i22 + 16i27 + 16i29 + 16i30 + 16i31 - 16i47 - 16i49 - 16i50 and i41 <= -i23 + i24 + i30 + i34 - i35 and i41 <= i30 and i40 <= -i25 + i26 + i29 + i36 - i37 and i40 <= i29 and 16i38 <= -i21 + i22 + 16i27 + i32 - i33 and i38 <= i27 and i42 <= i27 + i29 + i30 + i31 - i38 - i40 - i41 and i47 <= i16 and i50 >= -i12 + i13 + i19 + i43 - i44 and i50 >= i19 and i49 >= -i14 + i15 + i18 + i45 - i46 and i49 >= i18 and i51 >= i18 + i19 + i20 - i49 - i50 and i27 <= i16 and i30 <= -i12 + i13 + i19 + i23 - i24 and i30 <= i19 and i29 <= -i14 + i15 + i18 + i25 - i26 and i29 <= i18 and i31 <= i16 + i18 + i19 + i20 - i27 - i29 - i30 and 16i47 <= -i21 + i22 + 16i27 and i50 <= i30 and i49 <= -i25 + i26 + i29 + i45 - i46 and i49 <= i29 and i50 <= -i23 + i24 + i30 + i43 - i44 and i51 <= i27 + i29 + i30 + i31 - i47 - i49 - i50 and 16i51 <= 15i21 - 15i22 + 16i27 + 16i29 + 16i30 + 16i31 - 16i47 - 16i49 - 16i50 and i22 <= i21 and i41 >= -i23 + i24 + i30 + i34 - i35 and i41 >= i30 and i40 >= -i25 + i26 + i29 + i36 - i37 and i40 >= i29 and 16i38 >= -i21 + i22 + 16i27 + i32 - i33 and i38 >= i27 and i42 >= i27 + i29 + i30 + i31 - i38 - i40 - i41 and i47 >= i16 and i50 <= -i12 + i13 + i19 + i43 - i44 and i50 <= i19 and i49 <= -i14 + i15 + i18 + i45 - i46 and i49 <= i18 and i51 <= i18 + i19 + i20 - i49 - i50 }
is_empty: 0
{ [i0, i1, i2, i3, i4, i5, i6, i7, i8, i9, i10, i11, i12, i13, i14, i15, i16, i17, i18, i19, i20, i21, i22, i23, i24, i25, i26, i27, i28, i29, i30, i31, i32, i33, i34, i35, i36, i37, i38, i39, i40, i41, i42, i43, i44, i45, i46, i47, i48, i49, i50, i51] : i0 = 0 and i1 = 0 and i2 = 0 and i3 = 0 and i4 = 0 and i5 = 0 and i6 = 0 and i7 = 0 and i8 = 0 and i9 = 0 and i10 = 0 and i11 = 0 and i12 = 0 and i13 = 0 and i14 = 0 and i15 = 0 and i16 = 0 and i17 = 0 and i18 = 0 and i19 = 0 and i20 = 0 and i21 = 0 and i22 = 0 and i23 = 0 and i24 = 0 and i25 = 0 and i26 = 0 and i27 = 0 and i28 = 0 and i29 = 0 and i30 = 0 and i31 = 0 and i32 = 0 and i33 = 0 and i34 = 0 and i35 = 0 and i36 = 0 and i37 = 0 and i38 = 0 and i39 = 0 and i40 = 0 and i41 = 0 and i42 = 0 and i43 = 0 and i44 = 0 and i45 = 0 and i46 = 0 and i47 = 0 and i48 = 0 and i49 = 0 and i50 = 0 and i51 = 0 }
sol:
[]
setup lp:
{ [i0, i1, i2, i3, i4, i5, i6, i7, i8, i9, i10, i11, i12, i13, i14, i15, i16, i17, i18, i19, i20, i21, i22, i23, i24, i25, i26, i27, i28, i29, i30, i31, i32, i33, i34, i35, i36, i37, i38, i39, i40, i41, i42, i43, i44, i45, i46, i47, i48, i49, i50, i51] : i48 = i17 and i39 = i28 and i48 = i28 and i28 = i17 and i46 = i3 - i12 - i13 - i14 - i15 - i21 - i22 - i23 - i24 - i25 - i26 - i32 - i33 - i34 - i35 - i36 - i37 - i43 - i44 - i45 and i50 = i2 - i16 - i17 - i18 - i19 - i27 - i28 - i29 - i30 - i38 - i39 - i40 - i41 - i47 - i48 - i49 and i11 = i0 - i4 - i5 - i6 - i7 - i8 - i9 - i10 and i28 = i17 and i48 = i28 and i39 = i28 and i48 = i17 and i22 >= i21 and i27 >= i16 and i30 >= -i12 + i13 + i19 + i23 - i24 and i30 >= i19 and i29 >= -i14 + i15 + i18 + i25 - i26 and i29 >= i18 and i31 >= i16 + i18 + i19 + i20 - i27 - i29 - i30 and 16i47 >= -i21 + i22 + 16i27 and i50 >= i30 and i49 >= -i25 + i26 + i29 + i45 - i46 and i49 >= i29 and i50 >= -i23 + i24 + i30 + i43 - i44 and i51 >= i27 + i29 + i30 + i31 - i47 - i49 - i50 and 16i51 >= 15i21 - 15i22 + 16i27 + 16i29 + 16i30 + 16i31 - 16i47 - 16i49 - 16i50 and i41 <= -i23 + i24 + i30 + i34 - i35 and i41 <= i30 and i40 <= -i25 + i26 + i29 + i36 - i37 and i40 <= i29 and 16i38 <= -i21 + i22 + 16i27 + i32 - i33 and i38 <= i27 and i42 <= i27 + i29 + i30 + i31 - i38 - i40 - i41 and i47 <= i16 and i50 >= -i12 + i13 + i19 + i43 - i44 and i50 >= i19 and i49 >= -i14 + i15 + i18 + i45 - i46 and i49 >= i18 and i51 >= i18 + i19 + i20 - i49 - i50 and i27 <= i16 and i30 <= -i12 + i13 + i19 + i23 - i24 and i30 <= i19 and i29 <= -i14 + i15 + i18 + i25 - i26 and i29 <= i18 and i31 <= i16 + i18 + i19 + i20 - i27 - i29 - i30 and 16i47 <= -i21 + i22 + 16i27 and i50 <= i30 and i49 <= -i25 + i26 + i29 + i45 - i46 and i49 <= i29 and i50 <= -i23 + i24 + i30 + i43 - i44 and i51 <= i27 + i29 + i30 + i31 - i47 - i49 - i50 and 16i51 <= 15i21 - 15i22 + 16i27 + 16i29 + 16i30 + 16i31 - 16i47 - 16i49 - 16i50 and i22 <= i21 and i41 >= -i23 + i24 + i30 + i34 - i35 and i41 >= i30 and i40 >= -i25 + i26 + i29 + i36 - i37 and i40 >= i29 and 16i38 >= -i21 + i22 + 16i27 + i32 - i33 and i38 >= i27 and i42 >= i27 + i29 + i30 + i31 - i38 - i40 - i41 and i47 >= i16 and i50 <= -i12 + i13 + i19 + i43 - i44 and i50 <= i19 and i49 <= -i14 + i15 + i18 + i45 - i46 and i49 <= i18 and i51 <= i18 + i19 + i20 - i49 - i50 }
is_empty: 0
{ [i0, i1, i2, i3, i4, i5, i6, i7, i8, i9, i10, i11, i12, i13, i14, i15, i16, i17, i18, i19, i20, i21, i22, i23, i24, i25, i26, i27, i28, i29, i30, i31, i32, i33, i34, i35, i36, i37, i38, i39, i40, i41, i42, i43, i44, i45, i46, i47, i48, i49, i50, i51] : i0 = 0 and i1 = 0 and i2 = 0 and i3 = 0 and i4 = 0 and i5 = 0 and i6 = 0 and i7 = 0 and i8 = 0 and i9 = 0 and i10 = 0 and i11 = 0 and i12 = 0 and i13 = 0 and i14 = 0 and i15 = 0 and i16 = 0 and i17 = 0 and i18 = 0 and i19 = 0 and i20 = 0 and i21 = 0 and i22 = 0 and i23 = 0 and i24 = 0 and i25 = 0 and i26 = 0 and i27 = 0 and i28 = 0 and i29 = 0 and i30 = 0 and i31 = 0 and i32 = 0 and i33 = 0 and i34 = 0 and i35 = 0 and i36 = 0 and i37 = 0 and i38 = 0 and i39 = 0 and i40 = 0 and i41 = 0 and i42 = 0 and i43 = 0 and i44 = 0 and i45 = 0 and i46 = 0 and i47 = 0 and i48 = 0 and i49 = 0 and i50 = 0 and i51 = 0 }
sol:
[]
computed band mupa:
[P0, P1, P2, P3] -> [{ RS0_affine_parallel[i0, i1, i2] -> [(i1)]; RS2_affine_parallel[i0, i1, i2, i3] -> [(i1)]; RS1_affine_parallel[i0, i1, i2, i3] -> [(i1)]; RS3_affine_parallel[i0, i1, i2] -> [(i1)] }, { RS0_affine_parallel[i0, i1, i2] -> [(i0)]; RS2_affine_parallel[i0, i1, i2, i3] -> [(i0)]; RS1_affine_parallel[i0, i1, i2, i3] -> [(i0)]; RS3_affine_parallel[i0, i1, i2] -> [(i0)] }]
handling array expansion for row 0 of
[[1,1,1]
 [1,1,1]]
setting for member 0
handling array expansion for row 1 of
[[1,1,1]
 [1,1,1]]
setting for member 1
setup lp:
{ [i0, i1, i2, i3, i4, i5, i6, i7, i8, i9, i10, i11, i12, i13, i14, i15, i16, i17, i18, i19, i20, i21, i22, i23, i24, i25, i26, i27, i28, i29, i30, i31, i32, i33, i34, i35, i36, i37, i38, i39, i40, i41, i42, i43, i44, i45, i46, i47, i48, i49, i50, i51, i52, i53, i54, i55, i56, i57, i58, i59] : i36 = -i7 + i8 + i25 and i56 = i25 and i47 = i36 and i56 = i36 and i36 = i25 and i54 = i4 - i20 - i21 - i22 - i23 - i29 - i30 - i31 - i32 - i33 - i34 - i40 - i41 - i42 - i43 - i44 - i45 - i51 - i52 - i53 and i58 = i3 - i24 - i25 - i26 - i27 - i35 - i36 - i37 - i38 - i46 - i47 - i48 - i49 - i55 - i56 - i57 and i13 = 100000 - i0 and i12 = i1 - i5 - i6 - i7 - i8 - i9 - i10 - i11 and i19 = 1 + i16 and i18 = 1 + i15 and i17 = 1 + i14 and i55 = i24 and i56 = i25 and i47 = i36 and i47 = i36 and i47 = i36 and i56 = -i7 + i8 + i36 and i8 = i7 and i47 = i7 - i8 + i36 and i56 = -i7 + i8 + i25 and i49 <= -i31 + i32 + i38 + i42 - i43 and i49 <= i38 and i48 <= -i33 + i34 + i37 + i44 - i45 and i48 <= i37 and 16i46 <= -i29 + i30 + 16i35 + i40 - i41 and i46 <= i35 and i50 <= -i13 + i35 + i37 + i38 + i39 - i46 - i48 - i49 and i49 >= -i31 + i32 + i38 + i42 - i43 and i49 >= i38 and i48 >= -i33 + i34 + i37 + i44 - i45 and i48 >= i37 and 16i46 >= -i29 + i30 + 16i35 + i40 - i41 and i46 >= i35 and i50 >= -i15 + i35 + i37 + i38 + i39 - i46 - i48 - i49 and i49 >= -i31 + i32 + i38 + i42 - i43 and i49 >= i38 and i48 >= -i33 + i34 + i37 + i44 - i45 and i48 >= i37 and 16i46 >= -i29 + i30 + 16i35 + i40 - i41 and i46 >= i35 and i50 >= -i16 + i35 + i37 + i38 + i39 - i46 - i48 - i49 and i59 <= i14 + i26 + i27 + i28 - i57 - i58 and i58 <= -i20 + i21 + i27 + i51 - i52 and i58 <= i27 and i57 <= -i22 + i23 + i26 + i53 - i54 and i57 <= i26 and 1024i19 <= 48000 - 1024i17 - 1024i18 and i17 > 0 and i18 > 0 and i19 > 0 and i30 >= i29 and i35 >= i24 and i38 >= -i20 + i21 + i27 + i31 - i32 and i38 >= i27 and i37 >= -i22 + i23 + i26 + i33 - i34 and i37 >= i26 and i39 >= i24 + i26 + i27 + i28 - i35 - i37 - i38 and 16i55 >= -i29 + i30 + 16i35 and i58 >= i38 and i57 >= -i33 + i34 + i37 + i53 - i54 and i57 >= i37 and i58 >= -i31 + i32 + i38 + i51 - i52 and i59 >= i35 + i37 + i38 + i39 - i55 - i57 - i58 and 16i59 >= 15i29 - 15i30 + 16i35 + 16i37 + 16i38 + 16i39 - 16i55 - 16i57 - 16i58 and i49 <= -i31 + i32 + i38 + i42 - i43 and i49 <= i38 and i48 <= -i33 + i34 + i37 + i44 - i45 and i48 <= i37 and 16i46 <= -i29 + i30 + 16i35 + i40 - i41 and i46 <= i35 and i50 <= i35 + i37 + i38 + i39 - i46 - i48 - i49 and i55 <= i24 and i58 >= -i20 + i21 + i27 + i51 - i52 and i58 >= i27 and i57 >= -i22 + i23 + i26 + i53 - i54 and i57 >= i26 and i59 >= i26 + i27 + i28 - i57 - i58 and i35 <= -i5 + i6 + i24 and i38 <= -i11 + i12 - i20 + i21 + i27 + i31 - i32 and i38 <= -i11 + i12 + i27 and i37 <= -i9 + i10 - i22 + i23 + i26 + i33 - i34 and i37 <= -i9 + i10 + i26 and i39 <= i2 - i5 + i6 - i9 + i10 - i11 + i12 + i24 + i26 + i27 + i28 - i35 - i37 - i38 and 16i55 <= -16i5 + 16i6 - i29 + i30 + 16i35 and i58 <= -i11 + i12 + i38 and i57 <= -i9 + i10 - i33 + i34 + i37 + i53 - i54 and i57 <= -i9 + i10 + i37 and i58 <= -i11 + i12 - i31 + i32 + i38 + i51 - i52 and i59 <= i2 - i5 + i6 - i9 + i10 - i11 + i12 + i35 + i37 + i38 + i39 - i55 - i57 - i58 and 16i59 <= 16i2 - 16i5 + 16i6 - 16i9 + 16i10 - 16i11 + 16i12 + 15i29 - 15i30 + 16i35 + 16i37 + 16i38 + 16i39 - 16i55 - 16i57 - 16i58 and i10 >= i9 and i12 >= i11 and i6 >= i5 and i30 <= i2 - 17i5 + 17i6 - i9 + i10 - i11 + i12 + i29 and i49 >= i11 - i12 - i31 + i32 + i38 + i42 - i43 and i49 >= i11 - i12 + i38 and i48 >= i9 - i10 - i33 + i34 + i37 + i44 - i45 and i48 >= i9 - i10 + i37 and 16i46 >= 16i5 - 16i6 - i29 + i30 + 16i35 + i40 - i41 and i46 >= i5 - i6 + i35 and i50 >= -i2 + i5 - i6 + i9 - i10 + i11 - i12 + i35 + i37 + i38 + i39 - i46 - i48 - i49 and i55 >= -i5 + i6 + i24 and i58 <= -i11 + i12 - i20 + i21 + i27 + i51 - i52 and i58 <= -i11 + i12 + i27 and i57 <= -i9 + i10 - i22 + i23 + i26 + i53 - i54 and i57 <= -i9 + i10 + i26 and i59 <= i2 - i9 + i10 - i11 + i12 + i26 + i27 + i28 - i57 - i58 }
is_empty: 0
{ [i0, i1, i2, i3, i4, i5, i6, i7, i8, i9, i10, i11, i12, i13, i14, i15, i16, i17, i18, i19, i20, i21, i22, i23, i24, i25, i26, i27, i28, i29, i30, i31, i32, i33, i34, i35, i36, i37, i38, i39, i40, i41, i42, i43, i44, i45, i46, i47, i48, i49, i50, i51, i52, i53, i54, i55, i56, i57, i58, i59] : i0 = 100000 and i1 = 0 and i2 = 0 and i3 = 0 and i4 = 0 and i5 = 0 and i6 = 0 and i7 = 0 and i8 = 0 and i9 = 0 and i10 = 0 and i11 = 0 and i12 = 0 and i13 = 0 and i14 = 0 and i15 = 0 and i16 = 0 and i17 = 1 and i18 = 1 and i19 = 1 and i20 = 0 and i21 = 0 and i22 = 0 and i23 = 0 and i24 = 0 and i25 = 0 and i26 = 0 and i27 = 0 and i28 = 0 and i29 = 0 and i30 = 0 and i31 = 0 and i32 = 0 and i33 = 0 and i34 = 0 and i35 = 0 and i36 = 0 and i37 = 0 and i38 = 0 and i39 = 0 and i40 = 0 and i41 = 0 and i42 = 0 and i43 = 0 and i44 = 0 and i45 = 0 and i46 = 0 and i47 = 0 and i48 = 0 and i49 = 0 and i50 = 0 and i51 = 0 and i52 = 0 and i53 = 0 and i54 = 0 and i55 = 0 and i56 = 0 and i57 = 0 and i58 = 0 and i59 = 0 }
sol:
[]
setup lp:
{ [i0, i1, i2, i3, i4, i5, i6, i7, i8, i9, i10, i11, i12, i13, i14, i15, i16, i17, i18, i19, i20, i21, i22, i23, i24, i25, i26, i27, i28, i29, i30, i31, i32, i33, i34, i35, i36, i37, i38, i39, i40, i41, i42, i43, i44, i45, i46, i47, i48, i49, i50, i51, i52, i53, i54, i55, i56, i57, i58, i59] : i36 = -i7 + i8 + i25 and i56 = i25 and i47 = i36 and i56 = i36 and i36 = i25 and i54 = i4 - i20 - i21 - i22 - i23 - i29 - i30 - i31 - i32 - i33 - i34 - i40 - i41 - i42 - i43 - i44 - i45 - i51 - i52 - i53 and i58 = i3 - i24 - i25 - i26 - i27 - i35 - i36 - i37 - i38 - i46 - i47 - i48 - i49 - i55 - i56 - i57 and i13 = 100000 - i0 and i12 = i1 - i5 - i6 - i7 - i8 - i9 - i10 - i11 and i19 = 1 + i16 and i18 = 1 + i15 and i17 = 1 + i14 and i55 = i24 and i56 = i25 and i47 = i36 and i47 = i36 and i47 = i36 and i56 = -i7 + i8 + i36 and i8 = i7 and i47 = i7 - i8 + i36 and i56 = -i7 + i8 + i25 and i49 <= -i31 + i32 + i38 + i42 - i43 and i49 <= i38 and i48 <= -i33 + i34 + i37 + i44 - i45 and i48 <= i37 and 16i46 <= -i29 + i30 + 16i35 + i40 - i41 and i46 <= i35 and i50 <= -i13 + i35 + i37 + i38 + i39 - i46 - i48 - i49 and i49 >= -i31 + i32 + i38 + i42 - i43 and i49 >= i38 and i48 >= -i33 + i34 + i37 + i44 - i45 and i48 >= i37 and 16i46 >= -i29 + i30 + 16i35 + i40 - i41 and i46 >= i35 and i50 >= -i15 + i35 + i37 + i38 + i39 - i46 - i48 - i49 and i49 >= -i31 + i32 + i38 + i42 - i43 and i49 >= i38 and i48 >= -i33 + i34 + i37 + i44 - i45 and i48 >= i37 and 16i46 >= -i29 + i30 + 16i35 + i40 - i41 and i46 >= i35 and i50 >= -i16 + i35 + i37 + i38 + i39 - i46 - i48 - i49 and i59 <= i14 + i26 + i27 + i28 - i57 - i58 and i58 <= -i20 + i21 + i27 + i51 - i52 and i58 <= i27 and i57 <= -i22 + i23 + i26 + i53 - i54 and i57 <= i26 and 1024i19 <= 48000 - 1024i17 - 1024i18 and i17 > 0 and i18 > 0 and i19 > 0 and i30 >= i29 and i35 >= i24 and i38 >= -i20 + i21 + i27 + i31 - i32 and i38 >= i27 and i37 >= -i22 + i23 + i26 + i33 - i34 and i37 >= i26 and i39 >= i24 + i26 + i27 + i28 - i35 - i37 - i38 and 16i55 >= -i29 + i30 + 16i35 and i58 >= i38 and i57 >= -i33 + i34 + i37 + i53 - i54 and i57 >= i37 and i58 >= -i31 + i32 + i38 + i51 - i52 and i59 >= i35 + i37 + i38 + i39 - i55 - i57 - i58 and 16i59 >= 15i29 - 15i30 + 16i35 + 16i37 + 16i38 + 16i39 - 16i55 - 16i57 - 16i58 and i49 <= -i31 + i32 + i38 + i42 - i43 and i49 <= i38 and i48 <= -i33 + i34 + i37 + i44 - i45 and i48 <= i37 and 16i46 <= -i29 + i30 + 16i35 + i40 - i41 and i46 <= i35 and i50 <= i35 + i37 + i38 + i39 - i46 - i48 - i49 and i55 <= i24 and i58 >= -i20 + i21 + i27 + i51 - i52 and i58 >= i27 and i57 >= -i22 + i23 + i26 + i53 - i54 and i57 >= i26 and i59 >= i26 + i27 + i28 - i57 - i58 and i35 <= -i5 + i6 + i24 and i38 <= -i11 + i12 - i20 + i21 + i27 + i31 - i32 and i38 <= -i11 + i12 + i27 and i37 <= -i9 + i10 - i22 + i23 + i26 + i33 - i34 and i37 <= -i9 + i10 + i26 and i39 <= i2 - i5 + i6 - i9 + i10 - i11 + i12 + i24 + i26 + i27 + i28 - i35 - i37 - i38 and 16i55 <= -16i5 + 16i6 - i29 + i30 + 16i35 and i58 <= -i11 + i12 + i38 and i57 <= -i9 + i10 - i33 + i34 + i37 + i53 - i54 and i57 <= -i9 + i10 + i37 and i58 <= -i11 + i12 - i31 + i32 + i38 + i51 - i52 and i59 <= i2 - i5 + i6 - i9 + i10 - i11 + i12 + i35 + i37 + i38 + i39 - i55 - i57 - i58 and 16i59 <= 16i2 - 16i5 + 16i6 - 16i9 + 16i10 - 16i11 + 16i12 + 15i29 - 15i30 + 16i35 + 16i37 + 16i38 + 16i39 - 16i55 - 16i57 - 16i58 and i10 >= i9 and i12 >= i11 and i6 >= i5 and i30 <= i2 - 17i5 + 17i6 - i9 + i10 - i11 + i12 + i29 and i49 >= i11 - i12 - i31 + i32 + i38 + i42 - i43 and i49 >= i11 - i12 + i38 and i48 >= i9 - i10 - i33 + i34 + i37 + i44 - i45 and i48 >= i9 - i10 + i37 and 16i46 >= 16i5 - 16i6 - i29 + i30 + 16i35 + i40 - i41 and i46 >= i5 - i6 + i35 and i50 >= -i2 + i5 - i6 + i9 - i10 + i11 - i12 + i35 + i37 + i38 + i39 - i46 - i48 - i49 and i55 >= -i5 + i6 + i24 and i58 <= -i11 + i12 - i20 + i21 + i27 + i51 - i52 and i58 <= -i11 + i12 + i27 and i57 <= -i9 + i10 - i22 + i23 + i26 + i53 - i54 and i57 <= -i9 + i10 + i26 and i59 <= i2 - i9 + i10 - i11 + i12 + i26 + i27 + i28 - i57 - i58 }
is_empty: 0
{ [i0, i1, i2, i3, i4, i5, i6, i7, i8, i9, i10, i11, i12, i13, i14, i15, i16, i17, i18, i19, i20, i21, i22, i23, i24, i25, i26, i27, i28, i29, i30, i31, i32, i33, i34, i35, i36, i37, i38, i39, i40, i41, i42, i43, i44, i45, i46, i47, i48, i49, i50, i51, i52, i53, i54, i55, i56, i57, i58, i59] : i0 = 100000 and i1 = 0 and i2 = 0 and i3 = 0 and i4 = 0 and i5 = 0 and i6 = 0 and i7 = 0 and i8 = 0 and i9 = 0 and i10 = 0 and i11 = 0 and i12 = 0 and i13 = 0 and i14 = 0 and i15 = 0 and i16 = 0 and i17 = 1 and i18 = 1 and i19 = 1 and i20 = 0 and i21 = 0 and i22 = 0 and i23 = 0 and i24 = 0 and i25 = 0 and i26 = 0 and i27 = 0 and i28 = 0 and i29 = 0 and i30 = 0 and i31 = 0 and i32 = 0 and i33 = 0 and i34 = 0 and i35 = 0 and i36 = 0 and i37 = 0 and i38 = 0 and i39 = 0 and i40 = 0 and i41 = 0 and i42 = 0 and i43 = 0 and i44 = 0 and i45 = 0 and i46 = 0 and i47 = 0 and i48 = 0 and i49 = 0 and i50 = 0 and i51 = 0 and i52 = 0 and i53 = 0 and i54 = 0 and i55 = 0 and i56 = 0 and i57 = 0 and i58 = 0 and i59 = 0 }
sol:
[]
setup lp:
{ [i0, i1, i2, i3, i4, i5, i6, i7, i8, i9, i10, i11, i12, i13, i14, i15, i16, i17, i18, i19, i20, i21, i22, i23, i24, i25, i26, i27, i28, i29, i30, i31, i32, i33, i34, i35, i36, i37, i38, i39, i40, i41, i42, i43, i44, i45, i46, i47, i48, i49, i50] : i47 = i7 - i8 + i36 and i8 = i7 and i36 = -i7 + i8 + i25 and i47 = i36 and i36 = i25 and i45 = i4 - i20 - i21 - i22 - i23 - i29 - i30 - i31 - i32 - i33 - i34 - i40 - i41 - i42 - i43 - i44 and i49 = i3 - i24 - i25 - i26 - i27 - i35 - i36 - i37 - i38 - i46 - i47 - i48 and i13 = 100000 - i0 and i12 = i1 - i5 - i6 - i7 - i8 - i9 - i10 - i11 and i19 = 1 + i16 and i18 = 1 + i15 and i17 = 1 + i14 and i47 = i36 and i47 = i36 and i47 = i36 and i49 <= -i31 + i32 + i38 + i42 - i43 and i49 <= i38 and i48 <= -i33 + i34 + i37 + i44 - i45 and i48 <= i37 and 16i46 <= -i29 + i30 + 16i35 + i40 - i41 and i46 <= i35 and i50 <= -i13 + i35 + i37 + i38 + i39 - i46 - i48 - i49 and i49 >= -i31 + i32 + i38 + i42 - i43 and i49 >= i38 and i48 >= -i33 + i34 + i37 + i44 - i45 and i48 >= i37 and 16i46 >= -i29 + i30 + 16i35 + i40 - i41 and i46 >= i35 and i50 >= -i15 + i35 + i37 + i38 + i39 - i46 - i48 - i49 and i49 >= -i31 + i32 + i38 + i42 - i43 and i49 >= i38 and i48 >= -i33 + i34 + i37 + i44 - i45 and i48 >= i37 and 16i46 >= -i29 + i30 + 16i35 + i40 - i41 and i46 >= i35 and i50 >= -i16 + i35 + i37 + i38 + i39 - i46 - i48 - i49 and 1024i19 <= 48000 - 1024i17 - 1024i18 and i17 > 0 and i18 > 0 and i19 > 0 and i30 >= i29 and i35 >= i24 and i38 >= -i20 + i21 + i27 + i31 - i32 and i38 >= i27 and i37 >= -i22 + i23 + i26 + i33 - i34 and i37 >= i26 and i39 >= i24 + i26 + i27 + i28 - i35 - i37 - i38 and i49 <= -i31 + i32 + i38 + i42 - i43 and i49 <= i38 and i48 <= -i33 + i34 + i37 + i44 - i45 and i48 <= i37 and 16i46 <= -i29 + i30 + 16i35 + i40 - i41 and i46 <= i35 and i50 <= i35 + i37 + i38 + i39 - i46 - i48 - i49 and i35 <= -i5 + i6 + i24 and i38 <= -i11 + i12 - i20 + i21 + i27 + i31 - i32 and i38 <= -i11 + i12 + i27 and i37 <= -i9 + i10 - i22 + i23 + i26 + i33 - i34 and i37 <= -i9 + i10 + i26 and i39 <= i2 - i5 + i6 - i9 + i10 - i11 + i12 + i24 + i26 + i27 + i28 - i35 - i37 - i38 and i10 >= i9 and i12 >= i11 and i6 >= i5 and i30 <= i2 - 17i5 + 17i6 - i9 + i10 - i11 + i12 + i29 and i49 >= i11 - i12 - i31 + i32 + i38 + i42 - i43 and i49 >= i11 - i12 + i38 and i48 >= i9 - i10 - i33 + i34 + i37 + i44 - i45 and i48 >= i9 - i10 + i37 and 16i46 >= 16i5 - 16i6 - i29 + i30 + 16i35 + i40 - i41 and i46 >= i5 - i6 + i35 and i50 >= -i2 + i5 - i6 + i9 - i10 + i11 - i12 + i35 + i37 + i38 + i39 - i46 - i48 - i49 }
is_empty: 0
{ [i0, i1, i2, i3, i4, i5, i6, i7, i8, i9, i10, i11, i12, i13, i14, i15, i16, i17, i18, i19, i20, i21, i22, i23, i24, i25, i26, i27, i28, i29, i30, i31, i32, i33, i34, i35, i36, i37, i38, i39, i40, i41, i42, i43, i44, i45, i46, i47, i48, i49, i50] : i0 = 100000 and i1 = 0 and i2 = 0 and i3 = 0 and i4 = 0 and i5 = 0 and i6 = 0 and i7 = 0 and i8 = 0 and i9 = 0 and i10 = 0 and i11 = 0 and i12 = 0 and i13 = 0 and i14 = 0 and i15 = 43 and i16 = 0 and i17 = 1 and i18 = 44 and i19 = 1 and i20 = 0 and i21 = 0 and i22 = 0 and i23 = 0 and i24 = 0 and i25 = 0 and i26 = 0 and i27 = 0 and i28 = 0 and i29 = 0 and i30 = 0 and i31 = 0 and i32 = 0 and i33 = 0 and i34 = 0 and i35 = 0 and i36 = 0 and i37 = 0 and i38 = 0 and i39 = 0 and i40 = 0 and i41 = 0 and i42 = 0 and i43 = 0 and i44 = 0 and i45 = 0 and i46 = 0 and i47 = 0 and i48 = 0 and i49 = 0 and i50 = 0 }
sol:
[1,99979,0,21,0,2,0,0,0,0,0,0,0,0,21,0,21,21,1,22,22,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,21,0,1,0,0,0,0,0,0,0,0,0]
added row to overlapping live ranges
[[1,1,1]
 [1,1,1]
 [1,22,22]]
computed band mupa:
[P0, P1, P2, P3] -> [{ RS0_affine_parallel[i0, i1, i2] -> [(0)]; RS2_affine_parallel[i0, i1, i2, i3] -> [(21 + i3)]; RS1_affine_parallel[i0, i1, i2, i3] -> [(i3)] }]
handling array expansion for row 2 of
[[1,1,1]
 [1,1,1]
 [1,22,22]]
setting for member 0
New Schedule:
domain: "[P0, P1, P2, P3] -> { RS0_affine_parallel[i0, i1, 0] : 0 <= i0 < P3 and 0 <= i1 < P2; RS2_affine_parallel[i0, i1, 0, i3] : 0 <= i0 < P3 and 0 <= i1 < P2 and i3 >= 0 and 16i3 < P0; RS1_affine_parallel[i0, i1, 0, i3] : 0 <= i0 < P3 and 0 <= i1 < P2 and i3 >= 0 and 16i3 < P0; RS3_affine_parallel[i0, i1, 0] : 0 <= i0 < P3 and 0 <= i1 < P2 }"
child:
  schedule: "[P0, P1, P2, P3] -> [{ RS1_affine_parallel[i0, i1, i2, i3] -> [(i1)]; RS2_affine_parallel[i0, i1, i2, i3] -> [(i1)]; RS3_affine_parallel[i0, i1, i2] -> [(i1)]; RS0_affine_parallel[i0, i1, i2] -> [(i1)] }, { RS1_affine_parallel[i0, i1, i2, i3] -> [(i0)]; RS2_affine_parallel[i0, i1, i2, i3] -> [(i0)]; RS3_affine_parallel[i0, i1, i2] -> [(i0)]; RS0_affine_parallel[i0, i1, i2] -> [(i0)] }]"
  permutable: 1
  coincident: [ 1, 1 ]
  array_expansion: [ [ A_memref_alloca_res_10: 1, A_memref_alloca_res_7: 1, A_memref_alloca_res_4: 1 ], [ A_memref_alloca_res_10: 1, A_memref_alloca_res_7: 1, A_memref_alloca_res_4: 1 ] ]
  child:
    sequence:
    - filter: "[P0, P1, P2, P3] -> { RS0_affine_parallel[i0, i1, i2]; RS2_affine_parallel[i0, i1, i2, i3]; RS1_affine_parallel[i0, i1, i2, i3] }"
      child:
        schedule: "[P0, P1, P2, P3] -> [{ RS1_affine_parallel[i0, i1, i2, i3] -> [(i3)]; RS2_affine_parallel[i0, i1, i2, i3] -> [(21 + i3)]; RS0_affine_parallel[i0, i1, i2] -> [(0)] }]"
        permutable: 1
        coincident: [ 1 ]
        array_expansion: [ [ A_memref_alloca_res_10: 22, A_memref_alloca_res_7: 22, A_memref_alloca_res_4: 1 ] ]
        child:
          set:
          - filter: "[P0, P1, P2, P3] -> { RS2_affine_parallel[i0, i1, i2, i3]; RS1_affine_parallel[i0, i1, i2, i3] }"
            child:
              sequence:
              - filter: "[P0, P1, P2, P3] -> { RS2_affine_parallel[i0, i1, i2, i3] }"
              - filter: "[P0, P1, P2, P3] -> { RS1_affine_parallel[i0, i1, i2, i3] }"
          - filter: "[P0, P1, P2, P3] -> { RS0_affine_parallel[i0, i1, i2] }"
    - filter: "[P0, P1, P2, P3] -> { RS3_affine_parallel[i0, i1, i2] }"
New Schedule Prepared for GPU:
domain: "[P0, P1, P2, P3] -> { RS0_affine_parallel[i0, i1, 0] : 0 <= i0 < P3 and 0 <= i1 < P2; RS2_affine_parallel[i0, i1, 0, i3] : 0 <= i0 < P3 and 0 <= i1 < P2 and i3 >= 0 and 16i3 < P0; RS1_affine_parallel[i0, i1, 0, i3] : 0 <= i0 < P3 and 0 <= i1 < P2 and i3 >= 0 and 16i3 < P0; RS3_affine_parallel[i0, i1, 0] : 0 <= i0 < P3 and 0 <= i1 < P2 }"
child:
  mark: "grid_parallel"
  child:
    schedule: "[P0, P1, P2, P3] -> [{ RS1_affine_parallel[i0, i1, i2, i3] -> [(i1)]; RS2_affine_parallel[i0, i1, i2, i3] -> [(i1)]; RS3_affine_parallel[i0, i1, i2] -> [(i1)]; RS0_affine_parallel[i0, i1, i2] -> [(i1)] }, { RS1_affine_parallel[i0, i1, i2, i3] -> [(i0)]; RS2_affine_parallel[i0, i1, i2, i3] -> [(i0)]; RS3_affine_parallel[i0, i1, i2] -> [(i0)]; RS0_affine_parallel[i0, i1, i2] -> [(i0)] }]"
    permutable: 1
    coincident: [ 1, 1 ]
    array_expansion: [ [ A_memref_alloca_res_10: 1, A_memref_alloca_res_7: 1, A_memref_alloca_res_4: 1 ], [ A_memref_alloca_res_10: 1, A_memref_alloca_res_7: 1, A_memref_alloca_res_4: 1 ] ]
    child:
      sequence:
      - filter: "[P0, P1, P2, P3] -> { RS0_affine_parallel[i0, i1, i2]; RS2_affine_parallel[i0, i1, i2, i3]; RS1_affine_parallel[i0, i1, i2, i3] }"
        child:
          schedule: "[P0, P1, P2, P3] -> [{ RS1_affine_parallel[i0, i1, i2, i3] -> [(i3)]; RS2_affine_parallel[i0, i1, i2, i3] -> [(21 + i3)]; RS0_affine_parallel[i0, i1, i2] -> [(0)] }]"
          permutable: 1
          coincident: [ 1 ]
          array_expansion: [ [ A_memref_alloca_res_10: 22, A_memref_alloca_res_7: 22, A_memref_alloca_res_4: 1 ] ]
          child:
            set:
            - filter: "[P0, P1, P2, P3] -> { RS2_affine_parallel[i0, i1, i2, i3]; RS1_affine_parallel[i0, i1, i2, i3] }"
              child:
                sequence:
                - filter: "[P0, P1, P2, P3] -> { RS2_affine_parallel[i0, i1, i2, i3] }"
                - filter: "[P0, P1, P2, P3] -> { RS1_affine_parallel[i0, i1, i2, i3] }"
            - filter: "[P0, P1, P2, P3] -> { RS0_affine_parallel[i0, i1, i2] }"
      - filter: "[P0, P1, P2, P3] -> { RS3_affine_parallel[i0, i1, i2] }"
expanded_array:
[P0, P1, P2, P3] -> { [A_memref_alloca_res_7[] -> RS2_affine_parallel[]]; [A_memref_alloca_res_4[] -> RS3_affine_parallel[]]; [A_memref_alloca_res_10[] -> RS2_affine_parallel[]]; [A_memref_alloca_res_4[] -> RS0_affine_parallel[]]; [A_memref_alloca_res_7[] -> RS1_affine_parallel[]]; [A_memref_alloca_res_4[] -> RS2_affine_parallel[]]; [A_memref_alloca_res_10[] -> RS1_affine_parallel[]] }
Initial executed_ea:
[P0, P1, P2, P3] -> { [] -> [A_memref_alloca_res_7[] -> RS2_affine_parallel[]]; [] -> [A_memref_alloca_res_4[] -> RS3_affine_parallel[]]; [] -> [A_memref_alloca_res_10[] -> RS2_affine_parallel[]]; [] -> [A_memref_alloca_res_4[] -> RS0_affine_parallel[]]; [] -> [A_memref_alloca_res_7[] -> RS1_affine_parallel[]]; [] -> [A_memref_alloca_res_4[] -> RS2_affine_parallel[]]; [] -> [A_memref_alloca_res_10[] -> RS1_affine_parallel[]] }
Initial executed:
[P0, P1, P2, P3] -> { [] -> RS2_affine_parallel[o0, o1, o2, o3] : o2 = 0 and o0 >= 0 and o0 < P3 and o1 >= 0 and o1 < P2 and o3 >= 0 and 16o3 < P0; [] -> RS0_affine_parallel[o0, o1, o2] : o2 = 0 and o0 >= 0 and o0 < P3 and o1 >= 0 and o1 < P2; [] -> RS1_affine_parallel[o0, o1, o2, o3] : o2 = 0 and o0 >= 0 and o0 < P3 and o1 >= 0 and o1 < P2 and o3 >= 0 and 16o3 < P0; [] -> RS3_affine_parallel[o0, o1, o2] : o2 = 0 and o0 >= 0 and o0 < P3 and o1 >= 0 and o1 < P2 }
Building ast for schedule node:
Executed: [P0, P1, P2, P3] -> { [] -> RS2_affine_parallel[o0, o1, o2, o3] : o2 = 0 and o0 >= 0 and o0 < P3 and o1 >= 0 and o1 < P2 and o3 >= 0 and 16o3 < P0; [] -> RS0_affine_parallel[o0, o1, o2] : o2 = 0 and o0 >= 0 and o0 < P3 and o1 >= 0 and o1 < P2; [] -> RS1_affine_parallel[o0, o1, o2, o3] : o2 = 0 and o0 >= 0 and o0 < P3 and o1 >= 0 and o1 < P2 and o3 >= 0 and 16o3 < P0; [] -> RS3_affine_parallel[o0, o1, o2] : o2 = 0 and o0 >= 0 and o0 < P3 and o1 >= 0 and o1 < P2 }
domain: "[P0, P1, P2, P3] -> { RS0_affine_parallel[i0, i1, 0] : 0 <= i0 < P3 and 0 <= i1 < P2; RS2_affine_parallel[i0, i1, 0, i3] : 0 <= i0 < P3 and 0 <= i1 < P2 and i3 >= 0 and 16i3 < P0; RS1_affine_parallel[i0, i1, 0, i3] : 0 <= i0 < P3 and 0 <= i1 < P2 and i3 >= 0 and 16i3 < P0; RS3_affine_parallel[i0, i1, 0] : 0 <= i0 < P3 and 0 <= i1 < P2 }"
child:
  # YOU ARE HERE
  mark: "grid_parallel"
  child:
    schedule: "[P0, P1, P2, P3] -> [{ RS1_affine_parallel[i0, i1, i2, i3] -> [(i1)]; RS2_affine_parallel[i0, i1, i2, i3] -> [(i1)]; RS3_affine_parallel[i0, i1, i2] -> [(i1)]; RS0_affine_parallel[i0, i1, i2] -> [(i1)] }, { RS1_affine_parallel[i0, i1, i2, i3] -> [(i0)]; RS2_affine_parallel[i0, i1, i2, i3] -> [(i0)]; RS3_affine_parallel[i0, i1, i2] -> [(i0)]; RS0_affine_parallel[i0, i1, i2] -> [(i0)] }]"
    permutable: 1
    coincident: [ 1, 1 ]
    array_expansion: [ [ A_memref_alloca_res_10: 1, A_memref_alloca_res_7: 1, A_memref_alloca_res_4: 1 ], [ A_memref_alloca_res_10: 1, A_memref_alloca_res_7: 1, A_memref_alloca_res_4: 1 ] ]
    child:
      sequence:
      - filter: "[P0, P1, P2, P3] -> { RS0_affine_parallel[i0, i1, i2]; RS2_affine_parallel[i0, i1, i2, i3]; RS1_affine_parallel[i0, i1, i2, i3] }"
        child:
          schedule: "[P0, P1, P2, P3] -> [{ RS1_affine_parallel[i0, i1, i2, i3] -> [(i3)]; RS2_affine_parallel[i0, i1, i2, i3] -> [(21 + i3)]; RS0_affine_parallel[i0, i1, i2] -> [(0)] }]"
          permutable: 1
          coincident: [ 1 ]
          array_expansion: [ [ A_memref_alloca_res_10: 22, A_memref_alloca_res_7: 22, A_memref_alloca_res_4: 1 ] ]
          child:
            set:
            - filter: "[P0, P1, P2, P3] -> { RS2_affine_parallel[i0, i1, i2, i3]; RS1_affine_parallel[i0, i1, i2, i3] }"
              child:
                sequence:
                - filter: "[P0, P1, P2, P3] -> { RS2_affine_parallel[i0, i1, i2, i3] }"
                - filter: "[P0, P1, P2, P3] -> { RS1_affine_parallel[i0, i1, i2, i3] }"
            - filter: "[P0, P1, P2, P3] -> { RS0_affine_parallel[i0, i1, i2] }"
      - filter: "[P0, P1, P2, P3] -> { RS3_affine_parallel[i0, i1, i2] }"
Building ast for schedule node:
Executed: [P0, P1, P2, P3] -> { [] -> RS2_affine_parallel[o0, o1, o2, o3] : o2 = 0 and o0 >= 0 and o0 < P3 and o1 >= 0 and o1 < P2 and o3 >= 0 and 16o3 < P0; [] -> RS0_affine_parallel[o0, o1, o2] : o2 = 0 and o0 >= 0 and o0 < P3 and o1 >= 0 and o1 < P2; [] -> RS1_affine_parallel[o0, o1, o2, o3] : o2 = 0 and o0 >= 0 and o0 < P3 and o1 >= 0 and o1 < P2 and o3 >= 0 and 16o3 < P0; [] -> RS3_affine_parallel[o0, o1, o2] : o2 = 0 and o0 >= 0 and o0 < P3 and o1 >= 0 and o1 < P2 }
domain: "[P0, P1, P2, P3] -> { RS0_affine_parallel[i0, i1, 0] : 0 <= i0 < P3 and 0 <= i1 < P2; RS2_affine_parallel[i0, i1, 0, i3] : 0 <= i0 < P3 and 0 <= i1 < P2 and i3 >= 0 and 16i3 < P0; RS1_affine_parallel[i0, i1, 0, i3] : 0 <= i0 < P3 and 0 <= i1 < P2 and i3 >= 0 and 16i3 < P0; RS3_affine_parallel[i0, i1, 0] : 0 <= i0 < P3 and 0 <= i1 < P2 }"
child:
  mark: "grid_parallel"
  child:
    # YOU ARE HERE
    schedule: "[P0, P1, P2, P3] -> [{ RS1_affine_parallel[i0, i1, i2, i3] -> [(i1)]; RS2_affine_parallel[i0, i1, i2, i3] -> [(i1)]; RS3_affine_parallel[i0, i1, i2] -> [(i1)]; RS0_affine_parallel[i0, i1, i2] -> [(i1)] }, { RS1_affine_parallel[i0, i1, i2, i3] -> [(i0)]; RS2_affine_parallel[i0, i1, i2, i3] -> [(i0)]; RS3_affine_parallel[i0, i1, i2] -> [(i0)]; RS0_affine_parallel[i0, i1, i2] -> [(i0)] }]"
    permutable: 1
    coincident: [ 1, 1 ]
    array_expansion: [ [ A_memref_alloca_res_10: 1, A_memref_alloca_res_7: 1, A_memref_alloca_res_4: 1 ], [ A_memref_alloca_res_10: 1, A_memref_alloca_res_7: 1, A_memref_alloca_res_4: 1 ] ]
    child:
      sequence:
      - filter: "[P0, P1, P2, P3] -> { RS0_affine_parallel[i0, i1, i2]; RS2_affine_parallel[i0, i1, i2, i3]; RS1_affine_parallel[i0, i1, i2, i3] }"
        child:
          schedule: "[P0, P1, P2, P3] -> [{ RS1_affine_parallel[i0, i1, i2, i3] -> [(i3)]; RS2_affine_parallel[i0, i1, i2, i3] -> [(21 + i3)]; RS0_affine_parallel[i0, i1, i2] -> [(0)] }]"
          permutable: 1
          coincident: [ 1 ]
          array_expansion: [ [ A_memref_alloca_res_10: 22, A_memref_alloca_res_7: 22, A_memref_alloca_res_4: 1 ] ]
          child:
            set:
            - filter: "[P0, P1, P2, P3] -> { RS2_affine_parallel[i0, i1, i2, i3]; RS1_affine_parallel[i0, i1, i2, i3] }"
              child:
                sequence:
                - filter: "[P0, P1, P2, P3] -> { RS2_affine_parallel[i0, i1, i2, i3] }"
                - filter: "[P0, P1, P2, P3] -> { RS1_affine_parallel[i0, i1, i2, i3] }"
            - filter: "[P0, P1, P2, P3] -> { RS0_affine_parallel[i0, i1, i2] }"
      - filter: "[P0, P1, P2, P3] -> { RS3_affine_parallel[i0, i1, i2] }"
executed: [P0, P1, P2, P3] -> { [] -> RS2_affine_parallel[o0, o1, o2, o3] : o2 = 0 and o0 >= 0 and o0 < P3 and o1 >= 0 and o1 < P2 and o3 >= 0 and 16o3 < P0; [] -> RS0_affine_parallel[o0, o1, o2] : o2 = 0 and o0 >= 0 and o0 < P3 and o1 >= 0 and o1 < P2; [] -> RS1_affine_parallel[o0, o1, o2, o3] : o2 = 0 and o0 >= 0 and o0 < P3 and o1 >= 0 and o1 < P2 and o3 >= 0 and 16o3 < P0; [] -> RS3_affine_parallel[o0, o1, o2] : o2 = 0 and o0 >= 0 and o0 < P3 and o1 >= 0 and o1 < P2 }
executed_ea: [P0, P1, P2, P3] -> { [] -> [A_memref_alloca_res_7[] -> RS2_affine_parallel[]]; [] -> [A_memref_alloca_res_4[] -> RS3_affine_parallel[]]; [] -> [A_memref_alloca_res_10[] -> RS2_affine_parallel[]]; [] -> [A_memref_alloca_res_4[] -> RS0_affine_parallel[]]; [] -> [A_memref_alloca_res_7[] -> RS1_affine_parallel[]]; [] -> [A_memref_alloca_res_4[] -> RS2_affine_parallel[]]; [] -> [A_memref_alloca_res_10[] -> RS1_affine_parallel[]] }
extra: [P0, P1, P2, P3] -> [{ RS1_affine_parallel[i0, i1, i2, i3] -> [(i1)]; RS2_affine_parallel[i0, i1, i2, i3] -> [(i1)]; RS3_affine_parallel[i0, i1, i2] -> [(i1)]; RS0_affine_parallel[i0, i1, i2] -> [(i1)] }, { RS1_affine_parallel[i0, i1, i2, i3] -> [(i0)]; RS2_affine_parallel[i0, i1, i2, i3] -> [(i0)]; RS3_affine_parallel[i0, i1, i2] -> [(i0)]; RS0_affine_parallel[i0, i1, i2] -> [(i0)] }]
extra_umap: [P0, P1, P2, P3] -> { [i0, i1] -> RS3_affine_parallel[o0, o1, o2] : o0 = i1 and o1 = i0; [i0, i1] -> RS0_affine_parallel[o0, o1, o2] : o0 = i1 and o1 = i0; [i0, i1] -> RS2_affine_parallel[o0, o1, o2, o3] : o0 = i1 and o1 = i0; [i0, i1] -> RS1_affine_parallel[o0, o1, o2, o3] : o0 = i1 and o1 = i0 }
ADD_ARRAY_DIMS
[P0, P1, P2, P3] -> { A_memref_alloca_res_7[] -> A_memref_alloca_res_7[o0, o1] }
[P0, P1, P2, P3] -> { RS2_affine_parallel[] -> RS2_affine_parallel[] }
[P0, P1, P2, P3] -> { [A_memref_alloca_res_7[] -> RS2_affine_parallel[]] -> [A_memref_alloca_res_7[o0, o1] -> RS2_affine_parallel[]] }
[P0, P1, P2, P3] -> { [] -> [A_memref_alloca_res_7[o0, o1] -> RS2_affine_parallel[]] }
ADD_ARRAY_DIMS
[P0, P1, P2, P3] -> { A_memref_alloca_res_4[] -> A_memref_alloca_res_4[o0, o1] }
[P0, P1, P2, P3] -> { RS3_affine_parallel[] -> RS3_affine_parallel[] }
[P0, P1, P2, P3] -> { [A_memref_alloca_res_4[] -> RS3_affine_parallel[]] -> [A_memref_alloca_res_4[o0, o1] -> RS3_affine_parallel[]] }
[P0, P1, P2, P3] -> { [] -> [A_memref_alloca_res_4[o0, o1] -> RS3_affine_parallel[]] }
ADD_ARRAY_DIMS
[P0, P1, P2, P3] -> { A_memref_alloca_res_10[] -> A_memref_alloca_res_10[o0, o1] }
[P0, P1, P2, P3] -> { RS2_affine_parallel[] -> RS2_affine_parallel[] }
[P0, P1, P2, P3] -> { [A_memref_alloca_res_10[] -> RS2_affine_parallel[]] -> [A_memref_alloca_res_10[o0, o1] -> RS2_affine_parallel[]] }
[P0, P1, P2, P3] -> { [] -> [A_memref_alloca_res_10[o0, o1] -> RS2_affine_parallel[]] }
ADD_ARRAY_DIMS
[P0, P1, P2, P3] -> { A_memref_alloca_res_4[] -> A_memref_alloca_res_4[o0, o1] }
[P0, P1, P2, P3] -> { RS0_affine_parallel[] -> RS0_affine_parallel[] }
[P0, P1, P2, P3] -> { [A_memref_alloca_res_4[] -> RS0_affine_parallel[]] -> [A_memref_alloca_res_4[o0, o1] -> RS0_affine_parallel[]] }
[P0, P1, P2, P3] -> { [] -> [A_memref_alloca_res_4[o0, o1] -> RS0_affine_parallel[]] }
ADD_ARRAY_DIMS
[P0, P1, P2, P3] -> { A_memref_alloca_res_7[] -> A_memref_alloca_res_7[o0, o1] }
[P0, P1, P2, P3] -> { RS1_affine_parallel[] -> RS1_affine_parallel[] }
[P0, P1, P2, P3] -> { [A_memref_alloca_res_7[] -> RS1_affine_parallel[]] -> [A_memref_alloca_res_7[o0, o1] -> RS1_affine_parallel[]] }
[P0, P1, P2, P3] -> { [] -> [A_memref_alloca_res_7[o0, o1] -> RS1_affine_parallel[]] }
ADD_ARRAY_DIMS
[P0, P1, P2, P3] -> { A_memref_alloca_res_4[] -> A_memref_alloca_res_4[o0, o1] }
[P0, P1, P2, P3] -> { RS2_affine_parallel[] -> RS2_affine_parallel[] }
[P0, P1, P2, P3] -> { [A_memref_alloca_res_4[] -> RS2_affine_parallel[]] -> [A_memref_alloca_res_4[o0, o1] -> RS2_affine_parallel[]] }
[P0, P1, P2, P3] -> { [] -> [A_memref_alloca_res_4[o0, o1] -> RS2_affine_parallel[]] }
ADD_ARRAY_DIMS
[P0, P1, P2, P3] -> { A_memref_alloca_res_10[] -> A_memref_alloca_res_10[o0, o1] }
[P0, P1, P2, P3] -> { RS1_affine_parallel[] -> RS1_affine_parallel[] }
[P0, P1, P2, P3] -> { [A_memref_alloca_res_10[] -> RS1_affine_parallel[]] -> [A_memref_alloca_res_10[o0, o1] -> RS1_affine_parallel[]] }
[P0, P1, P2, P3] -> { [] -> [A_memref_alloca_res_10[o0, o1] -> RS1_affine_parallel[]] }
added new array dims in executed_ea: [P0, P1, P2, P3] -> { [] -> [A_memref_alloca_res_4[o0, o1] -> RS3_affine_parallel[]]; [] -> [A_memref_alloca_res_7[o0, o1] -> RS1_affine_parallel[]]; [] -> [A_memref_alloca_res_10[o0, o1] -> RS1_affine_parallel[]]; [] -> [A_memref_alloca_res_7[o0, o1] -> RS2_affine_parallel[]]; [] -> [A_memref_alloca_res_10[o0, o1] -> RS2_affine_parallel[]]; [] -> [A_memref_alloca_res_4[o0, o1] -> RS2_affine_parallel[]]; [] -> [A_memref_alloca_res_4[o0, o1] -> RS0_affine_parallel[]] }
extra_umap with array expansion: [P0, P1, P2, P3] -> { [i0, i1] -> [A_memref_alloca_res_7[o0, o1] -> RS2_affine_parallel[]] : o0 = 0 and o1 = 0; [i0, i1] -> RS0_affine_parallel[o0, o1, o2] : o0 = i1 and o1 = i0; [i0, i1] -> [A_memref_alloca_res_7[o0, o1] -> RS1_affine_parallel[]] : o0 = 0 and o1 = 0; [i0, i1] -> [A_memref_alloca_res_10[o0, o1] -> RS2_affine_parallel[]] : o0 = 0 and o1 = 0; [i0, i1] -> [A_memref_alloca_res_4[o0, o1] -> RS0_affine_parallel[]] : o0 = 0 and o1 = 0; [i0, i1] -> [A_memref_alloca_res_4[o0, o1] -> RS3_affine_parallel[]] : o0 = 0 and o1 = 0; [i0, i1] -> RS1_affine_parallel[o0, o1, o2, o3] : o0 = i1 and o1 = i0; [i0, i1] -> RS2_affine_parallel[o0, o1, o2, o3] : o0 = i1 and o1 = i0; [i0, i1] -> [A_memref_alloca_res_10[o0, o1] -> RS1_affine_parallel[]] : o0 = 0 and o1 = 0; [i0, i1] -> [A_memref_alloca_res_7[o0, o1] -> RS0_affine_parallel[]] : o0 = 0 and o1 = 0; [i0, i1] -> [A_memref_alloca_res_10[o0, o1] -> RS0_affine_parallel[]] : o0 = 0 and o1 = 0; [i0, i1] -> [A_memref_alloca_res_4[o0, o1] -> RS2_affine_parallel[]] : o0 = 0 and o1 = 0; [i0, i1] -> RS3_affine_parallel[o0, o1, o2] : o0 = i1 and o1 = i0; [i0, i1] -> [A_memref_alloca_res_4[o0, o1] -> RS1_affine_parallel[]] : o0 = 0 and o1 = 0; [i0, i1] -> [A_memref_alloca_res_10[o0, o1] -> RS3_affine_parallel[]] : o0 = 0 and o1 = 0; [i0, i1] -> [A_memref_alloca_res_7[o0, o1] -> RS3_affine_parallel[]] : o0 = 0 and o1 = 0 }
executed . extra_umap: [P0, P1, P2, P3] -> { [[] -> [i0, i1]] -> RS1_affine_parallel[o0, o1, o2, o3] : o0 = i1 and o1 = i0 and o2 = 0 and i1 >= 0 and i1 < P3 and i0 >= 0 and i0 < P2 and o3 >= 0 and 16o3 < P0; [[] -> [i0, i1]] -> RS2_affine_parallel[o0, o1, o2, o3] : o0 = i1 and o1 = i0 and o2 = 0 and i1 >= 0 and i1 < P3 and i0 >= 0 and i0 < P2 and o3 >= 0 and 16o3 < P0; [[] -> [i0, i1]] -> RS0_affine_parallel[o0, o1, o2] : o0 = i1 and o1 = i0 and o2 = 0 and i1 >= 0 and i1 < P3 and i0 >= 0 and i0 < P2; [[] -> [i0, i1]] -> RS3_affine_parallel[o0, o1, o2] : o0 = i1 and o1 = i0 and o2 = 0 and i1 >= 0 and i1 < P3 and i0 >= 0 and i0 < P2 }
executed_ea . extra_umap: [P0, P1, P2, P3] -> { [[] -> [i0, i1]] -> [A_memref_alloca_res_7[o0, o1] -> RS2_affine_parallel[]] : o0 = 0 and o1 = 0; [[] -> [i0, i1]] -> [A_memref_alloca_res_4[o0, o1] -> RS0_affine_parallel[]] : o0 = 0 and o1 = 0; [[] -> [i0, i1]] -> [A_memref_alloca_res_4[o0, o1] -> RS3_affine_parallel[]] : o0 = 0 and o1 = 0; [[] -> [i0, i1]] -> [A_memref_alloca_res_4[o0, o1] -> RS2_affine_parallel[]] : o0 = 0 and o1 = 0; [[] -> [i0, i1]] -> [A_memref_alloca_res_7[o0, o1] -> RS1_affine_parallel[]] : o0 = 0 and o1 = 0; [[] -> [i0, i1]] -> [A_memref_alloca_res_10[o0, o1] -> RS1_affine_parallel[]] : o0 = 0 and o1 = 0; [[] -> [i0, i1]] -> [A_memref_alloca_res_10[o0, o1] -> RS2_affine_parallel[]] : o0 = 0 and o1 = 0 }
Generated shifted component from list
[P0, P1, P2, P3] -> { [[] -> [i0, i1]] -> RS1_affine_parallel[o0, o1, o2, o3] : o0 = i1 and o1 = i0 and o2 = 0 and i1 >= 0 and i1 < P3 and i0 >= 0 and i0 < P2 and o3 >= 0 and 16o3 < P0; [[] -> [i0, i1]] -> RS0_affine_parallel[o0, o1, o2] : o0 = i1 and o1 = i0 and o2 = 0 and i1 >= 0 and i1 < P3 and i0 >= 0 and i0 < P2; [[] -> [i0, i1]] -> RS2_affine_parallel[o0, o1, o2, o3] : o0 = i1 and o1 = i0 and o2 = 0 and i1 >= 0 and i1 < P3 and i0 >= 0 and i0 < P2 and o3 >= 0 and 16o3 < P0; [[] -> [i0, i1]] -> RS3_affine_parallel[o0, o1, o2] : o0 = i1 and o1 = i0 and o2 = 0 and i1 >= 0 and i1 < P3 and i0 >= 0 and i0 < P2 }
[P0, P1, P2, P3] -> { [[] -> [i0, i1]] -> [A_memref_alloca_res_7[o0, o1] -> RS1_affine_parallel[]] : o0 = 0 and o1 = 0; [[] -> [i0, i1]] -> [A_memref_alloca_res_4[o0, o1] -> RS2_affine_parallel[]] : o0 = 0 and o1 = 0; [[] -> [i0, i1]] -> [A_memref_alloca_res_4[o0, o1] -> RS0_affine_parallel[]] : o0 = 0 and o1 = 0; [[] -> [i0, i1]] -> [A_memref_alloca_res_10[o0, o1] -> RS2_affine_parallel[]] : o0 = 0 and o1 = 0; [[] -> [i0, i1]] -> [A_memref_alloca_res_4[o0, o1] -> RS3_affine_parallel[]] : o0 = 0 and o1 = 0; [[] -> [i0, i1]] -> [A_memref_alloca_res_7[o0, o1] -> RS2_affine_parallel[]] : o0 = 0 and o1 = 0; [[] -> [i0, i1]] -> [A_memref_alloca_res_10[o0, o1] -> RS1_affine_parallel[]] : o0 = 0 and o1 = 0 }
Generated shifted component from list
[P0, P1, P2, P3] -> { [[] -> [i0, i1]] -> RS1_affine_parallel[o0, o1, o2, o3] : o0 = i1 and o1 = i0 and o2 = 0 and i1 >= 0 and i1 < P3 and i0 >= 0 and i0 < P2 and o3 >= 0 and 16o3 < P0 and P3 > 0; [[] -> [i0, i1]] -> RS0_affine_parallel[o0, o1, o2] : o0 = i1 and o1 = i0 and o2 = 0 and i1 >= 0 and i1 < P3 and i0 >= 0 and i0 < P2 and P3 > 0; [[] -> [i0, i1]] -> RS2_affine_parallel[o0, o1, o2, o3] : o0 = i1 and o1 = i0 and o2 = 0 and i1 >= 0 and i1 < P3 and i0 >= 0 and i0 < P2 and o3 >= 0 and 16o3 < P0 and P3 > 0; [[] -> [i0, i1]] -> RS3_affine_parallel[o0, o1, o2] : o0 = i1 and o1 = i0 and o2 = 0 and i1 >= 0 and i1 < P3 and i0 >= 0 and i0 < P2 and P3 > 0 }
[P0, P1, P2, P3] -> { [[] -> [i0, i1]] -> [A_memref_alloca_res_7[o0, o1] -> RS1_affine_parallel[]] : o0 = 0 and o1 = 0; [[] -> [i0, i1]] -> [A_memref_alloca_res_4[o0, o1] -> RS2_affine_parallel[]] : o0 = 0 and o1 = 0; [[] -> [i0, i1]] -> [A_memref_alloca_res_4[o0, o1] -> RS0_affine_parallel[]] : o0 = 0 and o1 = 0; [[] -> [i0, i1]] -> [A_memref_alloca_res_10[o0, o1] -> RS2_affine_parallel[]] : o0 = 0 and o1 = 0; [[] -> [i0, i1]] -> [A_memref_alloca_res_4[o0, o1] -> RS3_affine_parallel[]] : o0 = 0 and o1 = 0; [[] -> [i0, i1]] -> [A_memref_alloca_res_7[o0, o1] -> RS2_affine_parallel[]] : o0 = 0 and o1 = 0; [[] -> [i0, i1]] -> [A_memref_alloca_res_10[o0, o1] -> RS1_affine_parallel[]] : o0 = 0 and o1 = 0 }
Building ast for schedule node:
Executed: [P0, P1, P2, P3] -> { [[] -> [i0, i1]] -> RS1_affine_parallel[o0, o1, o2, o3] : o0 = i1 and o1 = i0 and o2 = 0 and i1 >= 0 and i1 < P3 and i0 >= 0 and i0 < P2 and o3 >= 0 and 16o3 < P0 and P3 > 0; [[] -> [i0, i1]] -> RS2_affine_parallel[o0, o1, o2, o3] : o0 = i1 and o1 = i0 and o2 = 0 and i1 >= 0 and i1 < P3 and i0 >= 0 and i0 < P2 and o3 >= 0 and 16o3 < P0 and P3 > 0; [[] -> [i0, i1]] -> RS0_affine_parallel[o0, o1, o2] : o0 = i1 and o1 = i0 and o2 = 0 and i1 >= 0 and i1 < P3 and i0 >= 0 and i0 < P2 and P3 > 0; [[] -> [i0, i1]] -> RS3_affine_parallel[o0, o1, o2] : o0 = i1 and o1 = i0 and o2 = 0 and i1 >= 0 and i1 < P3 and i0 >= 0 and i0 < P2 and P3 > 0 }
domain: "[P0, P1, P2, P3] -> { RS0_affine_parallel[i0, i1, 0] : 0 <= i0 < P3 and 0 <= i1 < P2; RS2_affine_parallel[i0, i1, 0, i3] : 0 <= i0 < P3 and 0 <= i1 < P2 and i3 >= 0 and 16i3 < P0; RS1_affine_parallel[i0, i1, 0, i3] : 0 <= i0 < P3 and 0 <= i1 < P2 and i3 >= 0 and 16i3 < P0; RS3_affine_parallel[i0, i1, 0] : 0 <= i0 < P3 and 0 <= i1 < P2 }"
child:
  mark: "grid_parallel"
  child:
    schedule: "[P0, P1, P2, P3] -> [{ RS1_affine_parallel[i0, i1, i2, i3] -> [(i1)]; RS2_affine_parallel[i0, i1, i2, i3] -> [(i1)]; RS3_affine_parallel[i0, i1, i2] -> [(i1)]; RS0_affine_parallel[i0, i1, i2] -> [(i1)] }, { RS1_affine_parallel[i0, i1, i2, i3] -> [(i0)]; RS2_affine_parallel[i0, i1, i2, i3] -> [(i0)]; RS3_affine_parallel[i0, i1, i2] -> [(i0)]; RS0_affine_parallel[i0, i1, i2] -> [(i0)] }]"
    permutable: 1
    coincident: [ 1, 1 ]
    array_expansion: [ [ A_memref_alloca_res_10: 1, A_memref_alloca_res_7: 1, A_memref_alloca_res_4: 1 ], [ A_memref_alloca_res_10: 1, A_memref_alloca_res_7: 1, A_memref_alloca_res_4: 1 ] ]
    child:
      # YOU ARE HERE
      sequence:
      - filter: "[P0, P1, P2, P3] -> { RS0_affine_parallel[i0, i1, i2]; RS2_affine_parallel[i0, i1, i2, i3]; RS1_affine_parallel[i0, i1, i2, i3] }"
        child:
          schedule: "[P0, P1, P2, P3] -> [{ RS1_affine_parallel[i0, i1, i2, i3] -> [(i3)]; RS2_affine_parallel[i0, i1, i2, i3] -> [(21 + i3)]; RS0_affine_parallel[i0, i1, i2] -> [(0)] }]"
          permutable: 1
          coincident: [ 1 ]
          array_expansion: [ [ A_memref_alloca_res_10: 22, A_memref_alloca_res_7: 22, A_memref_alloca_res_4: 1 ] ]
          child:
            set:
            - filter: "[P0, P1, P2, P3] -> { RS2_affine_parallel[i0, i1, i2, i3]; RS1_affine_parallel[i0, i1, i2, i3] }"
              child:
                sequence:
                - filter: "[P0, P1, P2, P3] -> { RS2_affine_parallel[i0, i1, i2, i3] }"
                - filter: "[P0, P1, P2, P3] -> { RS1_affine_parallel[i0, i1, i2, i3] }"
            - filter: "[P0, P1, P2, P3] -> { RS0_affine_parallel[i0, i1, i2] }"
      - filter: "[P0, P1, P2, P3] -> { RS3_affine_parallel[i0, i1, i2] }"
Building ast for schedule node:
Executed: [P0, P1, P2, P3] -> { [[] -> [i0, i1]] -> RS1_affine_parallel[o0, o1, o2, o3] : o0 = i1 and o1 = i0 and o2 = 0 and i1 >= 0 and i1 < P3 and i0 >= 0 and i0 < P2 and o3 >= 0 and 16o3 < P0 and P3 > 0; [[] -> [i0, i1]] -> RS2_affine_parallel[o0, o1, o2, o3] : o0 = i1 and o1 = i0 and o2 = 0 and i1 >= 0 and i1 < P3 and i0 >= 0 and i0 < P2 and o3 >= 0 and 16o3 < P0 and P3 > 0; [[] -> [i0, i1]] -> RS0_affine_parallel[o0, o1, o2] : o0 = i1 and o1 = i0 and o2 = 0 and i1 >= 0 and i1 < P3 and i0 >= 0 and i0 < P2 and P3 > 0; [[] -> [i0, i1]] -> RS3_affine_parallel[o0, o1, o2] : o0 = i1 and o1 = i0 and o2 = 0 and i1 >= 0 and i1 < P3 and i0 >= 0 and i0 < P2 and P3 > 0 }
domain: "[P0, P1, P2, P3] -> { RS0_affine_parallel[i0, i1, 0] : 0 <= i0 < P3 and 0 <= i1 < P2; RS2_affine_parallel[i0, i1, 0, i3] : 0 <= i0 < P3 and 0 <= i1 < P2 and i3 >= 0 and 16i3 < P0; RS1_affine_parallel[i0, i1, 0, i3] : 0 <= i0 < P3 and 0 <= i1 < P2 and i3 >= 0 and 16i3 < P0; RS3_affine_parallel[i0, i1, 0] : 0 <= i0 < P3 and 0 <= i1 < P2 }"
child:
  mark: "grid_parallel"
  child:
    schedule: "[P0, P1, P2, P3] -> [{ RS1_affine_parallel[i0, i1, i2, i3] -> [(i1)]; RS2_affine_parallel[i0, i1, i2, i3] -> [(i1)]; RS3_affine_parallel[i0, i1, i2] -> [(i1)]; RS0_affine_parallel[i0, i1, i2] -> [(i1)] }, { RS1_affine_parallel[i0, i1, i2, i3] -> [(i0)]; RS2_affine_parallel[i0, i1, i2, i3] -> [(i0)]; RS3_affine_parallel[i0, i1, i2] -> [(i0)]; RS0_affine_parallel[i0, i1, i2] -> [(i0)] }]"
    permutable: 1
    coincident: [ 1, 1 ]
    array_expansion: [ [ A_memref_alloca_res_10: 1, A_memref_alloca_res_7: 1, A_memref_alloca_res_4: 1 ], [ A_memref_alloca_res_10: 1, A_memref_alloca_res_7: 1, A_memref_alloca_res_4: 1 ] ]
    child:
      sequence:
      - # YOU ARE HERE
        filter: "[P0, P1, P2, P3] -> { RS0_affine_parallel[i0, i1, i2]; RS2_affine_parallel[i0, i1, i2, i3]; RS1_affine_parallel[i0, i1, i2, i3] }"
        child:
          schedule: "[P0, P1, P2, P3] -> [{ RS1_affine_parallel[i0, i1, i2, i3] -> [(i3)]; RS2_affine_parallel[i0, i1, i2, i3] -> [(21 + i3)]; RS0_affine_parallel[i0, i1, i2] -> [(0)] }]"
          permutable: 1
          coincident: [ 1 ]
          array_expansion: [ [ A_memref_alloca_res_10: 22, A_memref_alloca_res_7: 22, A_memref_alloca_res_4: 1 ] ]
          child:
            set:
            - filter: "[P0, P1, P2, P3] -> { RS2_affine_parallel[i0, i1, i2, i3]; RS1_affine_parallel[i0, i1, i2, i3] }"
              child:
                sequence:
                - filter: "[P0, P1, P2, P3] -> { RS2_affine_parallel[i0, i1, i2, i3] }"
                - filter: "[P0, P1, P2, P3] -> { RS1_affine_parallel[i0, i1, i2, i3] }"
            - filter: "[P0, P1, P2, P3] -> { RS0_affine_parallel[i0, i1, i2] }"
      - filter: "[P0, P1, P2, P3] -> { RS3_affine_parallel[i0, i1, i2] }"
Building ast for schedule node:
Executed: [P0, P1, P2, P3] -> { [[] -> [i0, i1]] -> RS1_affine_parallel[o0, o1, o2, o3] : o0 = i1 and o1 = i0 and o2 = 0 and i1 >= 0 and i1 < P3 and i0 >= 0 and i0 < P2 and o3 >= 0 and 16o3 < P0 and P3 > 0; [[] -> [i0, i1]] -> RS2_affine_parallel[o0, o1, o2, o3] : o0 = i1 and o1 = i0 and o2 = 0 and i1 >= 0 and i1 < P3 and i0 >= 0 and i0 < P2 and o3 >= 0 and 16o3 < P0 and P3 > 0; [[] -> [i0, i1]] -> RS0_affine_parallel[o0, o1, o2] : o0 = i1 and o1 = i0 and o2 = 0 and i1 >= 0 and i1 < P3 and i0 >= 0 and i0 < P2 and P3 > 0 }
domain: "[P0, P1, P2, P3] -> { RS0_affine_parallel[i0, i1, 0] : 0 <= i0 < P3 and 0 <= i1 < P2; RS2_affine_parallel[i0, i1, 0, i3] : 0 <= i0 < P3 and 0 <= i1 < P2 and i3 >= 0 and 16i3 < P0; RS1_affine_parallel[i0, i1, 0, i3] : 0 <= i0 < P3 and 0 <= i1 < P2 and i3 >= 0 and 16i3 < P0; RS3_affine_parallel[i0, i1, 0] : 0 <= i0 < P3 and 0 <= i1 < P2 }"
child:
  mark: "grid_parallel"
  child:
    schedule: "[P0, P1, P2, P3] -> [{ RS1_affine_parallel[i0, i1, i2, i3] -> [(i1)]; RS2_affine_parallel[i0, i1, i2, i3] -> [(i1)]; RS3_affine_parallel[i0, i1, i2] -> [(i1)]; RS0_affine_parallel[i0, i1, i2] -> [(i1)] }, { RS1_affine_parallel[i0, i1, i2, i3] -> [(i0)]; RS2_affine_parallel[i0, i1, i2, i3] -> [(i0)]; RS3_affine_parallel[i0, i1, i2] -> [(i0)]; RS0_affine_parallel[i0, i1, i2] -> [(i0)] }]"
    permutable: 1
    coincident: [ 1, 1 ]
    array_expansion: [ [ A_memref_alloca_res_10: 1, A_memref_alloca_res_7: 1, A_memref_alloca_res_4: 1 ], [ A_memref_alloca_res_10: 1, A_memref_alloca_res_7: 1, A_memref_alloca_res_4: 1 ] ]
    child:
      sequence:
      - filter: "[P0, P1, P2, P3] -> { RS0_affine_parallel[i0, i1, i2]; RS2_affine_parallel[i0, i1, i2, i3]; RS1_affine_parallel[i0, i1, i2, i3] }"
        child:
          # YOU ARE HERE
          schedule: "[P0, P1, P2, P3] -> [{ RS1_affine_parallel[i0, i1, i2, i3] -> [(i3)]; RS2_affine_parallel[i0, i1, i2, i3] -> [(21 + i3)]; RS0_affine_parallel[i0, i1, i2] -> [(0)] }]"
          permutable: 1
          coincident: [ 1 ]
          array_expansion: [ [ A_memref_alloca_res_10: 22, A_memref_alloca_res_7: 22, A_memref_alloca_res_4: 1 ] ]
          child:
            set:
            - filter: "[P0, P1, P2, P3] -> { RS2_affine_parallel[i0, i1, i2, i3]; RS1_affine_parallel[i0, i1, i2, i3] }"
              child:
                sequence:
                - filter: "[P0, P1, P2, P3] -> { RS2_affine_parallel[i0, i1, i2, i3] }"
                - filter: "[P0, P1, P2, P3] -> { RS1_affine_parallel[i0, i1, i2, i3] }"
            - filter: "[P0, P1, P2, P3] -> { RS0_affine_parallel[i0, i1, i2] }"
      - filter: "[P0, P1, P2, P3] -> { RS3_affine_parallel[i0, i1, i2] }"
executed: [P0, P1, P2, P3] -> { [[] -> [i0, i1]] -> RS1_affine_parallel[o0, o1, o2, o3] : o0 = i1 and o1 = i0 and o2 = 0 and i1 >= 0 and i1 < P3 and i0 >= 0 and i0 < P2 and o3 >= 0 and 16o3 < P0 and P3 > 0; [[] -> [i0, i1]] -> RS2_affine_parallel[o0, o1, o2, o3] : o0 = i1 and o1 = i0 and o2 = 0 and i1 >= 0 and i1 < P3 and i0 >= 0 and i0 < P2 and o3 >= 0 and 16o3 < P0 and P3 > 0; [[] -> [i0, i1]] -> RS0_affine_parallel[o0, o1, o2] : o0 = i1 and o1 = i0 and o2 = 0 and i1 >= 0 and i1 < P3 and i0 >= 0 and i0 < P2 and P3 > 0 }
executed_ea: [P0, P1, P2, P3] -> { [[] -> [i0, i1]] -> [A_memref_alloca_res_7[o0, o1] -> RS1_affine_parallel[]] : o0 = 0 and o1 = 0; [[] -> [i0, i1]] -> [A_memref_alloca_res_4[o0, o1] -> RS2_affine_parallel[]] : o0 = 0 and o1 = 0; [[] -> [i0, i1]] -> [A_memref_alloca_res_4[o0, o1] -> RS0_affine_parallel[]] : o0 = 0 and o1 = 0; [[] -> [i0, i1]] -> [A_memref_alloca_res_10[o0, o1] -> RS2_affine_parallel[]] : o0 = 0 and o1 = 0; [[] -> [i0, i1]] -> [A_memref_alloca_res_4[o0, o1] -> RS3_affine_parallel[]] : o0 = 0 and o1 = 0; [[] -> [i0, i1]] -> [A_memref_alloca_res_7[o0, o1] -> RS2_affine_parallel[]] : o0 = 0 and o1 = 0; [[] -> [i0, i1]] -> [A_memref_alloca_res_10[o0, o1] -> RS1_affine_parallel[]] : o0 = 0 and o1 = 0 }
extra: [P0, P1, P2, P3] -> [{ RS1_affine_parallel[i0, i1, i2, i3] -> [(i3)]; RS2_affine_parallel[i0, i1, i2, i3] -> [(21 + i3)]; RS0_affine_parallel[i0, i1, i2] -> [(0)] }]
extra_umap: [P0, P1, P2, P3] -> { [i0] -> RS2_affine_parallel[o0, o1, o2, o3] : o3 = -21 + i0; [i0] -> RS1_affine_parallel[o0, o1, o2, o3] : o3 = i0; [i0] -> RS0_affine_parallel[o0, o1, o2] : i0 = 0 }
ADD_ARRAY_DIMS
[P0, P1, P2, P3] -> { A_memref_alloca_res_7[i0, i1] -> A_memref_alloca_res_7[o0, o1, o2] : o1 = i1 and o0 = i0 }
[P0, P1, P2, P3] -> { RS1_affine_parallel[] -> RS1_affine_parallel[] }
[P0, P1, P2, P3] -> { [A_memref_alloca_res_7[i0, i1] -> RS1_affine_parallel[]] -> [A_memref_alloca_res_7[o0, o1, o2] -> RS1_affine_parallel[]] : o0 = i0 and o1 = i1 }
[P0, P1, P2, P3] -> { [[] -> [i0, i1]] -> [A_memref_alloca_res_7[o0, o1, o2] -> RS1_affine_parallel[]] : o0 = 0 and o1 = 0 }
ADD_ARRAY_DIMS
[P0, P1, P2, P3] -> { A_memref_alloca_res_4[i0, i1] -> A_memref_alloca_res_4[o0, o1, o2] : o1 = i1 and o0 = i0 }
[P0, P1, P2, P3] -> { RS2_affine_parallel[] -> RS2_affine_parallel[] }
[P0, P1, P2, P3] -> { [A_memref_alloca_res_4[i0, i1] -> RS2_affine_parallel[]] -> [A_memref_alloca_res_4[o0, o1, o2] -> RS2_affine_parallel[]] : o0 = i0 and o1 = i1 }
[P0, P1, P2, P3] -> { [[] -> [i0, i1]] -> [A_memref_alloca_res_4[o0, o1, o2] -> RS2_affine_parallel[]] : o0 = 0 and o1 = 0 }
ADD_ARRAY_DIMS
[P0, P1, P2, P3] -> { A_memref_alloca_res_4[i0, i1] -> A_memref_alloca_res_4[o0, o1, o2] : o1 = i1 and o0 = i0 }
[P0, P1, P2, P3] -> { RS0_affine_parallel[] -> RS0_affine_parallel[] }
[P0, P1, P2, P3] -> { [A_memref_alloca_res_4[i0, i1] -> RS0_affine_parallel[]] -> [A_memref_alloca_res_4[o0, o1, o2] -> RS0_affine_parallel[]] : o0 = i0 and o1 = i1 }
[P0, P1, P2, P3] -> { [[] -> [i0, i1]] -> [A_memref_alloca_res_4[o0, o1, o2] -> RS0_affine_parallel[]] : o0 = 0 and o1 = 0 }
ADD_ARRAY_DIMS
[P0, P1, P2, P3] -> { A_memref_alloca_res_10[i0, i1] -> A_memref_alloca_res_10[o0, o1, o2] : o1 = i1 and o0 = i0 }
[P0, P1, P2, P3] -> { RS2_affine_parallel[] -> RS2_affine_parallel[] }
[P0, P1, P2, P3] -> { [A_memref_alloca_res_10[i0, i1] -> RS2_affine_parallel[]] -> [A_memref_alloca_res_10[o0, o1, o2] -> RS2_affine_parallel[]] : o0 = i0 and o1 = i1 }
[P0, P1, P2, P3] -> { [[] -> [i0, i1]] -> [A_memref_alloca_res_10[o0, o1, o2] -> RS2_affine_parallel[]] : o0 = 0 and o1 = 0 }
ADD_ARRAY_DIMS
[P0, P1, P2, P3] -> { A_memref_alloca_res_4[i0, i1] -> A_memref_alloca_res_4[o0, o1, o2] : o1 = i1 and o0 = i0 }
[P0, P1, P2, P3] -> { RS3_affine_parallel[] -> RS3_affine_parallel[] }
[P0, P1, P2, P3] -> { [A_memref_alloca_res_4[i0, i1] -> RS3_affine_parallel[]] -> [A_memref_alloca_res_4[o0, o1, o2] -> RS3_affine_parallel[]] : o0 = i0 and o1 = i1 }
[P0, P1, P2, P3] -> { [[] -> [i0, i1]] -> [A_memref_alloca_res_4[o0, o1, o2] -> RS3_affine_parallel[]] : o0 = 0 and o1 = 0 }
ADD_ARRAY_DIMS
[P0, P1, P2, P3] -> { A_memref_alloca_res_7[i0, i1] -> A_memref_alloca_res_7[o0, o1, o2] : o1 = i1 and o0 = i0 }
[P0, P1, P2, P3] -> { RS2_affine_parallel[] -> RS2_affine_parallel[] }
[P0, P1, P2, P3] -> { [A_memref_alloca_res_7[i0, i1] -> RS2_affine_parallel[]] -> [A_memref_alloca_res_7[o0, o1, o2] -> RS2_affine_parallel[]] : o0 = i0 and o1 = i1 }
[P0, P1, P2, P3] -> { [[] -> [i0, i1]] -> [A_memref_alloca_res_7[o0, o1, o2] -> RS2_affine_parallel[]] : o0 = 0 and o1 = 0 }
ADD_ARRAY_DIMS
[P0, P1, P2, P3] -> { A_memref_alloca_res_10[i0, i1] -> A_memref_alloca_res_10[o0, o1, o2] : o1 = i1 and o0 = i0 }
[P0, P1, P2, P3] -> { RS1_affine_parallel[] -> RS1_affine_parallel[] }
[P0, P1, P2, P3] -> { [A_memref_alloca_res_10[i0, i1] -> RS1_affine_parallel[]] -> [A_memref_alloca_res_10[o0, o1, o2] -> RS1_affine_parallel[]] : o0 = i0 and o1 = i1 }
[P0, P1, P2, P3] -> { [[] -> [i0, i1]] -> [A_memref_alloca_res_10[o0, o1, o2] -> RS1_affine_parallel[]] : o0 = 0 and o1 = 0 }
added new array dims in executed_ea: [P0, P1, P2, P3] -> { [[] -> [i0, i1]] -> [A_memref_alloca_res_4[o0, o1, o2] -> RS2_affine_parallel[]] : o0 = 0 and o1 = 0; [[] -> [i0, i1]] -> [A_memref_alloca_res_7[o0, o1, o2] -> RS2_affine_parallel[]] : o0 = 0 and o1 = 0; [[] -> [i0, i1]] -> [A_memref_alloca_res_4[o0, o1, o2] -> RS0_affine_parallel[]] : o0 = 0 and o1 = 0; [[] -> [i0, i1]] -> [A_memref_alloca_res_10[o0, o1, o2] -> RS1_affine_parallel[]] : o0 = 0 and o1 = 0; [[] -> [i0, i1]] -> [A_memref_alloca_res_4[o0, o1, o2] -> RS3_affine_parallel[]] : o0 = 0 and o1 = 0; [[] -> [i0, i1]] -> [A_memref_alloca_res_10[o0, o1, o2] -> RS2_affine_parallel[]] : o0 = 0 and o1 = 0; [[] -> [i0, i1]] -> [A_memref_alloca_res_7[o0, o1, o2] -> RS1_affine_parallel[]] : o0 = 0 and o1 = 0 }
extra_umap with array expansion: [P0, P1, P2, P3] -> { [i0] -> [A_memref_alloca_res_10[o0, o1, o2] -> RS0_affine_parallel[]] : exists (e0 = floor((1 - i0 + o2)/22): 22e0 = 1 - i0 + o2 and o2 >= 0 and o2 <= 21); [i0] -> [A_memref_alloca_res_4[o0, o1, o2] -> RS1_affine_parallel[]] : o2 = 0; [i0] -> RS0_affine_parallel[o0, o1, o2] : i0 = 0; [i0] -> RS1_affine_parallel[o0, o1, o2, o3] : o3 = i0; [i0] -> [A_memref_alloca_res_10[o0, o1, o2] -> RS2_affine_parallel[]] : exists (e0 = floor((1 - i0 + o2)/22): 22e0 = 1 - i0 + o2 and o2 >= 0 and o2 <= 21); [i0] -> [A_memref_alloca_res_7[o0, o1, o2] -> RS2_affine_parallel[]] : exists (e0 = floor((1 - i0 + o2)/22): 22e0 = 1 - i0 + o2 and o2 >= 0 and o2 <= 21); [i0] -> [A_memref_alloca_res_4[o0, o1, o2] -> RS2_affine_parallel[]] : o2 = 0; [i0] -> [A_memref_alloca_res_4[o0, o1, o2] -> RS0_affine_parallel[]] : o2 = 0; [i0] -> [A_memref_alloca_res_7[o0, o1, o2] -> RS0_affine_parallel[]] : exists (e0 = floor((1 - i0 + o2)/22): 22e0 = 1 - i0 + o2 and o2 >= 0 and o2 <= 21); [i0] -> [A_memref_alloca_res_10[o0, o1, o2] -> RS1_affine_parallel[]] : exists (e0 = floor((1 - i0 + o2)/22): 22e0 = 1 - i0 + o2 and o2 >= 0 and o2 <= 21); [i0] -> [A_memref_alloca_res_7[o0, o1, o2] -> RS1_affine_parallel[]] : exists (e0 = floor((1 - i0 + o2)/22): 22e0 = 1 - i0 + o2 and o2 >= 0 and o2 <= 21); [i0] -> RS2_affine_parallel[o0, o1, o2, o3] : o3 = -21 + i0 }
executed . extra_umap: [P0, P1, P2, P3] -> { [[[] -> [i0, i1]] -> [i2]] -> RS2_affine_parallel[o0, o1, o2, o3] : o0 = i1 and o1 = i0 and o2 = 0 and o3 = -21 + i2 and i1 >= 0 and i1 < P3 and i0 >= 0 and i0 < P2 and i2 >= 21 and 16i2 <= 335 + P0 and P3 > 0; [[[] -> [i0, i1]] -> [i2]] -> RS1_affine_parallel[o0, o1, o2, o3] : o0 = i1 and o1 = i0 and o2 = 0 and o3 = i2 and i1 >= 0 and i1 < P3 and i0 >= 0 and i0 < P2 and i2 >= 0 and 16i2 < P0 and P3 > 0; [[[] -> [i0, i1]] -> [i2]] -> RS0_affine_parallel[o0, o1, o2] : i2 = 0 and o0 = i1 and o1 = i0 and o2 = 0 and i1 >= 0 and i1 < P3 and i0 >= 0 and i0 < P2 and P3 > 0 }
executed_ea . extra_umap: [P0, P1, P2, P3] -> { [[[] -> [i0, i1]] -> [i2]] -> [A_memref_alloca_res_7[o0, o1, o2] -> RS1_affine_parallel[]] : exists (e0 = floor((1 - i2 + o2)/22): o0 = 0 and o1 = 0 and 22e0 = 1 - i2 + o2 and o2 >= 0 and o2 <= 21); [[[] -> [i0, i1]] -> [i2]] -> [A_memref_alloca_res_4[o0, o1, o2] -> RS0_affine_parallel[]] : o0 = 0 and o1 = 0 and o2 = 0; [[[] -> [i0, i1]] -> [i2]] -> [A_memref_alloca_res_10[o0, o1, o2] -> RS1_affine_parallel[]] : exists (e0 = floor((1 - i2 + o2)/22): o0 = 0 and o1 = 0 and 22e0 = 1 - i2 + o2 and o2 >= 0 and o2 <= 21); [[[] -> [i0, i1]] -> [i2]] -> [A_memref_alloca_res_4[o0, o1, o2] -> RS2_affine_parallel[]] : o0 = 0 and o1 = 0 and o2 = 0; [[[] -> [i0, i1]] -> [i2]] -> [A_memref_alloca_res_7[o0, o1, o2] -> RS2_affine_parallel[]] : exists (e0 = floor((1 - i2 + o2)/22): o0 = 0 and o1 = 0 and 22e0 = 1 - i2 + o2 and o2 >= 0 and o2 <= 21); [[[] -> [i0, i1]] -> [i2]] -> [A_memref_alloca_res_10[o0, o1, o2] -> RS2_affine_parallel[]] : exists (e0 = floor((1 - i2 + o2)/22): o0 = 0 and o1 = 0 and 22e0 = 1 - i2 + o2 and o2 >= 0 and o2 <= 21) }
Generated shifted component from list
[P0, P1, P2, P3] -> { [[[] -> [i0, i1]] -> [i2]] -> RS0_affine_parallel[o0, o1, o2] : i2 = 0 and o0 = i1 and o1 = i0 and o2 = 0 and i1 >= 0 and i1 < P3 and i0 >= 0 and i0 < P2 and P3 > 0 }
[P0, P1, P2, P3] -> { [[[] -> [i0, i1]] -> [i2]] -> [A_memref_alloca_res_4[o0, o1, o2] -> RS0_affine_parallel[]] : o0 = 0 and o1 = 0 and o2 = 0 }
Building ast for schedule node:
Executed: [P0, P1, P2, P3] -> { [[[] -> [i0, i1]] -> [i2]] -> RS0_affine_parallel[o0, o1, o2] : o0 = i1 and o1 = i0 and o2 = 0 and i1 >= 0 and i1 < P3 and i0 >= 0 and i0 < P2 and P3 > 0 }
domain: "[P0, P1, P2, P3] -> { RS0_affine_parallel[i0, i1, 0] : 0 <= i0 < P3 and 0 <= i1 < P2; RS2_affine_parallel[i0, i1, 0, i3] : 0 <= i0 < P3 and 0 <= i1 < P2 and i3 >= 0 and 16i3 < P0; RS1_affine_parallel[i0, i1, 0, i3] : 0 <= i0 < P3 and 0 <= i1 < P2 and i3 >= 0 and 16i3 < P0; RS3_affine_parallel[i0, i1, 0] : 0 <= i0 < P3 and 0 <= i1 < P2 }"
child:
  mark: "grid_parallel"
  child:
    schedule: "[P0, P1, P2, P3] -> [{ RS1_affine_parallel[i0, i1, i2, i3] -> [(i1)]; RS2_affine_parallel[i0, i1, i2, i3] -> [(i1)]; RS3_affine_parallel[i0, i1, i2] -> [(i1)]; RS0_affine_parallel[i0, i1, i2] -> [(i1)] }, { RS1_affine_parallel[i0, i1, i2, i3] -> [(i0)]; RS2_affine_parallel[i0, i1, i2, i3] -> [(i0)]; RS3_affine_parallel[i0, i1, i2] -> [(i0)]; RS0_affine_parallel[i0, i1, i2] -> [(i0)] }]"
    permutable: 1
    coincident: [ 1, 1 ]
    array_expansion: [ [ A_memref_alloca_res_10: 1, A_memref_alloca_res_7: 1, A_memref_alloca_res_4: 1 ], [ A_memref_alloca_res_10: 1, A_memref_alloca_res_7: 1, A_memref_alloca_res_4: 1 ] ]
    child:
      sequence:
      - filter: "[P0, P1, P2, P3] -> { RS0_affine_parallel[i0, i1, i2]; RS2_affine_parallel[i0, i1, i2, i3]; RS1_affine_parallel[i0, i1, i2, i3] }"
        child:
          schedule: "[P0, P1, P2, P3] -> [{ RS1_affine_parallel[i0, i1, i2, i3] -> [(i3)]; RS2_affine_parallel[i0, i1, i2, i3] -> [(21 + i3)]; RS0_affine_parallel[i0, i1, i2] -> [(0)] }]"
          permutable: 1
          coincident: [ 1 ]
          array_expansion: [ [ A_memref_alloca_res_10: 22, A_memref_alloca_res_7: 22, A_memref_alloca_res_4: 1 ] ]
          child:
            # YOU ARE HERE
            set:
            - filter: "[P0, P1, P2, P3] -> { RS2_affine_parallel[i0, i1, i2, i3]; RS1_affine_parallel[i0, i1, i2, i3] }"
              child:
                sequence:
                - filter: "[P0, P1, P2, P3] -> { RS2_affine_parallel[i0, i1, i2, i3] }"
                - filter: "[P0, P1, P2, P3] -> { RS1_affine_parallel[i0, i1, i2, i3] }"
            - filter: "[P0, P1, P2, P3] -> { RS0_affine_parallel[i0, i1, i2] }"
      - filter: "[P0, P1, P2, P3] -> { RS3_affine_parallel[i0, i1, i2] }"
Building ast for schedule node:
Executed: [P0, P1, P2, P3] -> { [[[] -> [i0, i1]] -> [i2]] -> RS0_affine_parallel[o0, o1, o2] : o0 = i1 and o1 = i0 and o2 = 0 and i1 >= 0 and i1 < P3 and i0 >= 0 and i0 < P2 and P3 > 0 }
domain: "[P0, P1, P2, P3] -> { RS0_affine_parallel[i0, i1, 0] : 0 <= i0 < P3 and 0 <= i1 < P2; RS2_affine_parallel[i0, i1, 0, i3] : 0 <= i0 < P3 and 0 <= i1 < P2 and i3 >= 0 and 16i3 < P0; RS1_affine_parallel[i0, i1, 0, i3] : 0 <= i0 < P3 and 0 <= i1 < P2 and i3 >= 0 and 16i3 < P0; RS3_affine_parallel[i0, i1, 0] : 0 <= i0 < P3 and 0 <= i1 < P2 }"
child:
  mark: "grid_parallel"
  child:
    schedule: "[P0, P1, P2, P3] -> [{ RS1_affine_parallel[i0, i1, i2, i3] -> [(i1)]; RS2_affine_parallel[i0, i1, i2, i3] -> [(i1)]; RS3_affine_parallel[i0, i1, i2] -> [(i1)]; RS0_affine_parallel[i0, i1, i2] -> [(i1)] }, { RS1_affine_parallel[i0, i1, i2, i3] -> [(i0)]; RS2_affine_parallel[i0, i1, i2, i3] -> [(i0)]; RS3_affine_parallel[i0, i1, i2] -> [(i0)]; RS0_affine_parallel[i0, i1, i2] -> [(i0)] }]"
    permutable: 1
    coincident: [ 1, 1 ]
    array_expansion: [ [ A_memref_alloca_res_10: 1, A_memref_alloca_res_7: 1, A_memref_alloca_res_4: 1 ], [ A_memref_alloca_res_10: 1, A_memref_alloca_res_7: 1, A_memref_alloca_res_4: 1 ] ]
    child:
      sequence:
      - filter: "[P0, P1, P2, P3] -> { RS0_affine_parallel[i0, i1, i2]; RS2_affine_parallel[i0, i1, i2, i3]; RS1_affine_parallel[i0, i1, i2, i3] }"
        child:
          schedule: "[P0, P1, P2, P3] -> [{ RS1_affine_parallel[i0, i1, i2, i3] -> [(i3)]; RS2_affine_parallel[i0, i1, i2, i3] -> [(21 + i3)]; RS0_affine_parallel[i0, i1, i2] -> [(0)] }]"
          permutable: 1
          coincident: [ 1 ]
          array_expansion: [ [ A_memref_alloca_res_10: 22, A_memref_alloca_res_7: 22, A_memref_alloca_res_4: 1 ] ]
          child:
            set:
            - # YOU ARE HERE
              filter: "[P0, P1, P2, P3] -> { RS2_affine_parallel[i0, i1, i2, i3]; RS1_affine_parallel[i0, i1, i2, i3] }"
              child:
                sequence:
                - filter: "[P0, P1, P2, P3] -> { RS2_affine_parallel[i0, i1, i2, i3] }"
                - filter: "[P0, P1, P2, P3] -> { RS1_affine_parallel[i0, i1, i2, i3] }"
            - filter: "[P0, P1, P2, P3] -> { RS0_affine_parallel[i0, i1, i2] }"
      - filter: "[P0, P1, P2, P3] -> { RS3_affine_parallel[i0, i1, i2] }"
Building ast for schedule node:
Executed: [P0, P1, P2, P3] -> { [[[] -> [i0, i1]] -> [i2]] -> RS0_affine_parallel[o0, o1, o2] : o0 = i1 and o1 = i0 and o2 = 0 and i1 >= 0 and i1 < P3 and i0 >= 0 and i0 < P2 and P3 > 0 }
domain: "[P0, P1, P2, P3] -> { RS0_affine_parallel[i0, i1, 0] : 0 <= i0 < P3 and 0 <= i1 < P2; RS2_affine_parallel[i0, i1, 0, i3] : 0 <= i0 < P3 and 0 <= i1 < P2 and i3 >= 0 and 16i3 < P0; RS1_affine_parallel[i0, i1, 0, i3] : 0 <= i0 < P3 and 0 <= i1 < P2 and i3 >= 0 and 16i3 < P0; RS3_affine_parallel[i0, i1, 0] : 0 <= i0 < P3 and 0 <= i1 < P2 }"
child:
  mark: "grid_parallel"
  child:
    schedule: "[P0, P1, P2, P3] -> [{ RS1_affine_parallel[i0, i1, i2, i3] -> [(i1)]; RS2_affine_parallel[i0, i1, i2, i3] -> [(i1)]; RS3_affine_parallel[i0, i1, i2] -> [(i1)]; RS0_affine_parallel[i0, i1, i2] -> [(i1)] }, { RS1_affine_parallel[i0, i1, i2, i3] -> [(i0)]; RS2_affine_parallel[i0, i1, i2, i3] -> [(i0)]; RS3_affine_parallel[i0, i1, i2] -> [(i0)]; RS0_affine_parallel[i0, i1, i2] -> [(i0)] }]"
    permutable: 1
    coincident: [ 1, 1 ]
    array_expansion: [ [ A_memref_alloca_res_10: 1, A_memref_alloca_res_7: 1, A_memref_alloca_res_4: 1 ], [ A_memref_alloca_res_10: 1, A_memref_alloca_res_7: 1, A_memref_alloca_res_4: 1 ] ]
    child:
      sequence:
      - filter: "[P0, P1, P2, P3] -> { RS0_affine_parallel[i0, i1, i2]; RS2_affine_parallel[i0, i1, i2, i3]; RS1_affine_parallel[i0, i1, i2, i3] }"
        child:
          schedule: "[P0, P1, P2, P3] -> [{ RS1_affine_parallel[i0, i1, i2, i3] -> [(i3)]; RS2_affine_parallel[i0, i1, i2, i3] -> [(21 + i3)]; RS0_affine_parallel[i0, i1, i2] -> [(0)] }]"
          permutable: 1
          coincident: [ 1 ]
          array_expansion: [ [ A_memref_alloca_res_10: 22, A_memref_alloca_res_7: 22, A_memref_alloca_res_4: 1 ] ]
          child:
            set:
            - filter: "[P0, P1, P2, P3] -> { RS2_affine_parallel[i0, i1, i2, i3]; RS1_affine_parallel[i0, i1, i2, i3] }"
              child:
                sequence:
                - filter: "[P0, P1, P2, P3] -> { RS2_affine_parallel[i0, i1, i2, i3] }"
                - filter: "[P0, P1, P2, P3] -> { RS1_affine_parallel[i0, i1, i2, i3] }"
            - # YOU ARE HERE
              filter: "[P0, P1, P2, P3] -> { RS0_affine_parallel[i0, i1, i2] }"
      - filter: "[P0, P1, P2, P3] -> { RS3_affine_parallel[i0, i1, i2] }"
Building ast for schedule node:
Executed: [P0, P1, P2, P3] -> { [[[] -> [i0, i1]] -> [i2]] -> RS0_affine_parallel[o0, o1, o2] : o0 = i1 and o1 = i0 and o2 = 0 and i1 >= 0 and i1 < P3 and i0 >= 0 and i0 < P2 and P3 > 0 }
domain: "[P0, P1, P2, P3] -> { RS0_affine_parallel[i0, i1, 0] : 0 <= i0 < P3 and 0 <= i1 < P2; RS2_affine_parallel[i0, i1, 0, i3] : 0 <= i0 < P3 and 0 <= i1 < P2 and i3 >= 0 and 16i3 < P0; RS1_affine_parallel[i0, i1, 0, i3] : 0 <= i0 < P3 and 0 <= i1 < P2 and i3 >= 0 and 16i3 < P0; RS3_affine_parallel[i0, i1, 0] : 0 <= i0 < P3 and 0 <= i1 < P2 }"
child:
  mark: "grid_parallel"
  child:
    schedule: "[P0, P1, P2, P3] -> [{ RS1_affine_parallel[i0, i1, i2, i3] -> [(i1)]; RS2_affine_parallel[i0, i1, i2, i3] -> [(i1)]; RS3_affine_parallel[i0, i1, i2] -> [(i1)]; RS0_affine_parallel[i0, i1, i2] -> [(i1)] }, { RS1_affine_parallel[i0, i1, i2, i3] -> [(i0)]; RS2_affine_parallel[i0, i1, i2, i3] -> [(i0)]; RS3_affine_parallel[i0, i1, i2] -> [(i0)]; RS0_affine_parallel[i0, i1, i2] -> [(i0)] }]"
    permutable: 1
    coincident: [ 1, 1 ]
    array_expansion: [ [ A_memref_alloca_res_10: 1, A_memref_alloca_res_7: 1, A_memref_alloca_res_4: 1 ], [ A_memref_alloca_res_10: 1, A_memref_alloca_res_7: 1, A_memref_alloca_res_4: 1 ] ]
    child:
      sequence:
      - filter: "[P0, P1, P2, P3] -> { RS0_affine_parallel[i0, i1, i2]; RS2_affine_parallel[i0, i1, i2, i3]; RS1_affine_parallel[i0, i1, i2, i3] }"
        child:
          schedule: "[P0, P1, P2, P3] -> [{ RS1_affine_parallel[i0, i1, i2, i3] -> [(i3)]; RS2_affine_parallel[i0, i1, i2, i3] -> [(21 + i3)]; RS0_affine_parallel[i0, i1, i2] -> [(0)] }]"
          permutable: 1
          coincident: [ 1 ]
          array_expansion: [ [ A_memref_alloca_res_10: 22, A_memref_alloca_res_7: 22, A_memref_alloca_res_4: 1 ] ]
          child:
            set:
            - filter: "[P0, P1, P2, P3] -> { RS2_affine_parallel[i0, i1, i2, i3]; RS1_affine_parallel[i0, i1, i2, i3] }"
              child:
                sequence:
                - filter: "[P0, P1, P2, P3] -> { RS2_affine_parallel[i0, i1, i2, i3] }"
                - filter: "[P0, P1, P2, P3] -> { RS1_affine_parallel[i0, i1, i2, i3] }"
            - filter: "[P0, P1, P2, P3] -> { RS0_affine_parallel[i0, i1, i2] }"
              child:
                # YOU ARE HERE
                leaf
      - filter: "[P0, P1, P2, P3] -> { RS3_affine_parallel[i0, i1, i2] }"
We have reached a schedule wtih executed:
[P0, P1, P2, P3] -> { [[[] -> [i0, i1]] -> [i2]] -> RS0_affine_parallel[o0, o1, o2] : o0 = i1 and o1 = i0 and o2 = 0 and i1 >= 0 and i1 < P3 and i0 >= 0 and i0 < P2 and P3 > 0 }
Generating domain for:
[P0, P1, P2, P3] -> { [[[] -> [i0, i1]] -> [i2]] -> RS0_affine_parallel[o0, o1, o2] : o0 = i1 and o1 = i0 and o2 = 0 and i1 >= 0 and i1 < P3 and i0 >= 0 and i0 < P2 and P3 > 0 }

Building call from executed:
[P0, P1, P2, P3] -> { [[[] -> [i0, i1]] -> [i2]] -> RS0_affine_parallel[o0, o1, o2] : o0 = i1 and o1 = i0 and o2 = 0 and i1 >= 0 and i1 < P3 and i0 >= 0 and i0 < P2 and P3 > 0 }
BEFORE
[P0, P1, P2, P3] -> { [[[] -> [i0, i1]] -> [i2]] -> [A_memref_alloca_res_4[o0, o1, o2] -> RS0_affine_parallel[]] : o0 = 0 and o1 = 0 and o2 = 0 }
PROJECTED OUT
[P0, P1, P2, P3] -> { [[[] -> [i0, i1]] -> [i2]] -> A_memref_alloca_res_4[o0, o1, o2] : o0 = 0 and o1 = 0 and o2 = 0 }
Building call from executed:
[P0, P1, P2, P3] -> { [[[] -> [i0, i1]] -> [i2]] -> A_memref_alloca_res_4[o0, o1, o2] : o0 = 0 and o1 = 0 and o2 = 0 }
TODO use the executed_ea
[P0, P1, P2, P3] -> { [[[] -> [i0, i1]] -> [i2]] -> [A_memref_alloca_res_4[o0, o1, o2] -> RS0_affine_parallel[]] : o0 = 0 and o1 = 0 and o2 = 0 }
Generated graft for user:
user:
  op: call
  args:
  - id: RS0_affine_parallel@0x4699ea60
  - id: c1
  - id: c0
  - val: 0
  - op: call
    args:
    - id: A_memref_alloca_res_4@0x469c72c0
    - val: 0
    - val: 0
    - val: 0

Generated graft for band:
user:
  op: call
  args:
  - id: RS0_affine_parallel@0x4699ea60
  - id: c1
  - id: c0
  - val: 0
  - op: call
    args:
    - id: A_memref_alloca_res_4@0x469c72c0
    - val: 0
    - val: 0
    - val: 0
[P0, P1, P2, P3] -> { [[[] -> [i0, i1]] -> [i2]] :  }
[P0, P1, P2, P3] -> { [[[] -> [i0, i1]] -> [i2]] }
graft for band end

Generated shifted component from list
[P0, P1, P2, P3] -> { [[[] -> [i0, i1]] -> [i2]] -> RS2_affine_parallel[o0, o1, o2, o3] : o0 = i1 and o1 = i0 and o2 = 0 and o3 = -21 + i2 and i1 >= 0 and i1 < P3 and i0 >= 0 and i0 < P2 and i2 >= 21 and 16i2 <= 335 + P0 and P3 > 0; [[[] -> [i0, i1]] -> [i2]] -> RS1_affine_parallel[o0, o1, o2, o3] : o0 = i1 and o1 = i0 and o2 = 0 and o3 = i2 and i1 >= 0 and i1 < P3 and i0 >= 0 and i0 < P2 and i2 >= 0 and 16i2 < P0 and P3 > 0 }
[P0, P1, P2, P3] -> { [[[] -> [i0, i1]] -> [i2]] -> [A_memref_alloca_res_10[o0, o1, o2] -> RS2_affine_parallel[]] : exists (e0 = floor((1 - i2 + o2)/22): o0 = 0 and o1 = 0 and 22e0 = 1 - i2 + o2 and o2 >= 0 and o2 <= 21); [[[] -> [i0, i1]] -> [i2]] -> [A_memref_alloca_res_4[o0, o1, o2] -> RS2_affine_parallel[]] : o0 = 0 and o1 = 0 and o2 = 0; [[[] -> [i0, i1]] -> [i2]] -> [A_memref_alloca_res_7[o0, o1, o2] -> RS2_affine_parallel[]] : exists (e0 = floor((1 - i2 + o2)/22): o0 = 0 and o1 = 0 and 22e0 = 1 - i2 + o2 and o2 >= 0 and o2 <= 21); [[[] -> [i0, i1]] -> [i2]] -> [A_memref_alloca_res_7[o0, o1, o2] -> RS1_affine_parallel[]] : exists (e0 = floor((1 - i2 + o2)/22): o0 = 0 and o1 = 0 and 22e0 = 1 - i2 + o2 and o2 >= 0 and o2 <= 21); [[[] -> [i0, i1]] -> [i2]] -> [A_memref_alloca_res_10[o0, o1, o2] -> RS1_affine_parallel[]] : exists (e0 = floor((1 - i2 + o2)/22): o0 = 0 and o1 = 0 and 22e0 = 1 - i2 + o2 and o2 >= 0 and o2 <= 21) }
Building ast for schedule node:
Executed: [P0, P1, P2, P3] -> { [[[] -> [i0, i1]] -> [i2]] -> RS1_affine_parallel[o0, o1, o2, o3] : o0 = i1 and o1 = i0 and o2 = 0 and o3 = i2 and i1 >= 0 and i1 < P3 and i0 >= 0 and i0 < P2 and i2 >= 0 and 16i2 < P0 and P3 > 0 and i2 <= 20 }
domain: "[P0, P1, P2, P3] -> { RS0_affine_parallel[i0, i1, 0] : 0 <= i0 < P3 and 0 <= i1 < P2; RS2_affine_parallel[i0, i1, 0, i3] : 0 <= i0 < P3 and 0 <= i1 < P2 and i3 >= 0 and 16i3 < P0; RS1_affine_parallel[i0, i1, 0, i3] : 0 <= i0 < P3 and 0 <= i1 < P2 and i3 >= 0 and 16i3 < P0; RS3_affine_parallel[i0, i1, 0] : 0 <= i0 < P3 and 0 <= i1 < P2 }"
child:
  mark: "grid_parallel"
  child:
    schedule: "[P0, P1, P2, P3] -> [{ RS1_affine_parallel[i0, i1, i2, i3] -> [(i1)]; RS2_affine_parallel[i0, i1, i2, i3] -> [(i1)]; RS3_affine_parallel[i0, i1, i2] -> [(i1)]; RS0_affine_parallel[i0, i1, i2] -> [(i1)] }, { RS1_affine_parallel[i0, i1, i2, i3] -> [(i0)]; RS2_affine_parallel[i0, i1, i2, i3] -> [(i0)]; RS3_affine_parallel[i0, i1, i2] -> [(i0)]; RS0_affine_parallel[i0, i1, i2] -> [(i0)] }]"
    permutable: 1
    coincident: [ 1, 1 ]
    array_expansion: [ [ A_memref_alloca_res_10: 1, A_memref_alloca_res_7: 1, A_memref_alloca_res_4: 1 ], [ A_memref_alloca_res_10: 1, A_memref_alloca_res_7: 1, A_memref_alloca_res_4: 1 ] ]
    child:
      sequence:
      - filter: "[P0, P1, P2, P3] -> { RS0_affine_parallel[i0, i1, i2]; RS2_affine_parallel[i0, i1, i2, i3]; RS1_affine_parallel[i0, i1, i2, i3] }"
        child:
          schedule: "[P0, P1, P2, P3] -> [{ RS1_affine_parallel[i0, i1, i2, i3] -> [(i3)]; RS2_affine_parallel[i0, i1, i2, i3] -> [(21 + i3)]; RS0_affine_parallel[i0, i1, i2] -> [(0)] }]"
          permutable: 1
          coincident: [ 1 ]
          array_expansion: [ [ A_memref_alloca_res_10: 22, A_memref_alloca_res_7: 22, A_memref_alloca_res_4: 1 ] ]
          child:
            # YOU ARE HERE
            set:
            - filter: "[P0, P1, P2, P3] -> { RS2_affine_parallel[i0, i1, i2, i3]; RS1_affine_parallel[i0, i1, i2, i3] }"
              child:
                sequence:
                - filter: "[P0, P1, P2, P3] -> { RS2_affine_parallel[i0, i1, i2, i3] }"
                - filter: "[P0, P1, P2, P3] -> { RS1_affine_parallel[i0, i1, i2, i3] }"
            - filter: "[P0, P1, P2, P3] -> { RS0_affine_parallel[i0, i1, i2] }"
      - filter: "[P0, P1, P2, P3] -> { RS3_affine_parallel[i0, i1, i2] }"
Building ast for schedule node:
Executed: [P0, P1, P2, P3] -> { [[[] -> [i0, i1]] -> [i2]] -> RS1_affine_parallel[o0, o1, o2, o3] : o0 = i1 and o1 = i0 and o2 = 0 and o3 = i2 and i1 >= 0 and i1 < P3 and i0 >= 0 and i0 < P2 and i2 >= 0 and 16i2 < P0 and P3 > 0 and i2 <= 20 }
domain: "[P0, P1, P2, P3] -> { RS0_affine_parallel[i0, i1, 0] : 0 <= i0 < P3 and 0 <= i1 < P2; RS2_affine_parallel[i0, i1, 0, i3] : 0 <= i0 < P3 and 0 <= i1 < P2 and i3 >= 0 and 16i3 < P0; RS1_affine_parallel[i0, i1, 0, i3] : 0 <= i0 < P3 and 0 <= i1 < P2 and i3 >= 0 and 16i3 < P0; RS3_affine_parallel[i0, i1, 0] : 0 <= i0 < P3 and 0 <= i1 < P2 }"
child:
  mark: "grid_parallel"
  child:
    schedule: "[P0, P1, P2, P3] -> [{ RS1_affine_parallel[i0, i1, i2, i3] -> [(i1)]; RS2_affine_parallel[i0, i1, i2, i3] -> [(i1)]; RS3_affine_parallel[i0, i1, i2] -> [(i1)]; RS0_affine_parallel[i0, i1, i2] -> [(i1)] }, { RS1_affine_parallel[i0, i1, i2, i3] -> [(i0)]; RS2_affine_parallel[i0, i1, i2, i3] -> [(i0)]; RS3_affine_parallel[i0, i1, i2] -> [(i0)]; RS0_affine_parallel[i0, i1, i2] -> [(i0)] }]"
    permutable: 1
    coincident: [ 1, 1 ]
    array_expansion: [ [ A_memref_alloca_res_10: 1, A_memref_alloca_res_7: 1, A_memref_alloca_res_4: 1 ], [ A_memref_alloca_res_10: 1, A_memref_alloca_res_7: 1, A_memref_alloca_res_4: 1 ] ]
    child:
      sequence:
      - filter: "[P0, P1, P2, P3] -> { RS0_affine_parallel[i0, i1, i2]; RS2_affine_parallel[i0, i1, i2, i3]; RS1_affine_parallel[i0, i1, i2, i3] }"
        child:
          schedule: "[P0, P1, P2, P3] -> [{ RS1_affine_parallel[i0, i1, i2, i3] -> [(i3)]; RS2_affine_parallel[i0, i1, i2, i3] -> [(21 + i3)]; RS0_affine_parallel[i0, i1, i2] -> [(0)] }]"
          permutable: 1
          coincident: [ 1 ]
          array_expansion: [ [ A_memref_alloca_res_10: 22, A_memref_alloca_res_7: 22, A_memref_alloca_res_4: 1 ] ]
          child:
            set:
            - # YOU ARE HERE
              filter: "[P0, P1, P2, P3] -> { RS2_affine_parallel[i0, i1, i2, i3]; RS1_affine_parallel[i0, i1, i2, i3] }"
              child:
                sequence:
                - filter: "[P0, P1, P2, P3] -> { RS2_affine_parallel[i0, i1, i2, i3] }"
                - filter: "[P0, P1, P2, P3] -> { RS1_affine_parallel[i0, i1, i2, i3] }"
            - filter: "[P0, P1, P2, P3] -> { RS0_affine_parallel[i0, i1, i2] }"
      - filter: "[P0, P1, P2, P3] -> { RS3_affine_parallel[i0, i1, i2] }"
Building ast for schedule node:
Executed: [P0, P1, P2, P3] -> { [[[] -> [i0, i1]] -> [i2]] -> RS1_affine_parallel[o0, o1, o2, o3] : o0 = i1 and o1 = i0 and o2 = 0 and o3 = i2 and i1 >= 0 and i1 < P3 and i0 >= 0 and i0 < P2 and i2 >= 0 and 16i2 < P0 and P3 > 0 and i2 <= 20 }
domain: "[P0, P1, P2, P3] -> { RS0_affine_parallel[i0, i1, 0] : 0 <= i0 < P3 and 0 <= i1 < P2; RS2_affine_parallel[i0, i1, 0, i3] : 0 <= i0 < P3 and 0 <= i1 < P2 and i3 >= 0 and 16i3 < P0; RS1_affine_parallel[i0, i1, 0, i3] : 0 <= i0 < P3 and 0 <= i1 < P2 and i3 >= 0 and 16i3 < P0; RS3_affine_parallel[i0, i1, 0] : 0 <= i0 < P3 and 0 <= i1 < P2 }"
child:
  mark: "grid_parallel"
  child:
    schedule: "[P0, P1, P2, P3] -> [{ RS1_affine_parallel[i0, i1, i2, i3] -> [(i1)]; RS2_affine_parallel[i0, i1, i2, i3] -> [(i1)]; RS3_affine_parallel[i0, i1, i2] -> [(i1)]; RS0_affine_parallel[i0, i1, i2] -> [(i1)] }, { RS1_affine_parallel[i0, i1, i2, i3] -> [(i0)]; RS2_affine_parallel[i0, i1, i2, i3] -> [(i0)]; RS3_affine_parallel[i0, i1, i2] -> [(i0)]; RS0_affine_parallel[i0, i1, i2] -> [(i0)] }]"
    permutable: 1
    coincident: [ 1, 1 ]
    array_expansion: [ [ A_memref_alloca_res_10: 1, A_memref_alloca_res_7: 1, A_memref_alloca_res_4: 1 ], [ A_memref_alloca_res_10: 1, A_memref_alloca_res_7: 1, A_memref_alloca_res_4: 1 ] ]
    child:
      sequence:
      - filter: "[P0, P1, P2, P3] -> { RS0_affine_parallel[i0, i1, i2]; RS2_affine_parallel[i0, i1, i2, i3]; RS1_affine_parallel[i0, i1, i2, i3] }"
        child:
          schedule: "[P0, P1, P2, P3] -> [{ RS1_affine_parallel[i0, i1, i2, i3] -> [(i3)]; RS2_affine_parallel[i0, i1, i2, i3] -> [(21 + i3)]; RS0_affine_parallel[i0, i1, i2] -> [(0)] }]"
          permutable: 1
          coincident: [ 1 ]
          array_expansion: [ [ A_memref_alloca_res_10: 22, A_memref_alloca_res_7: 22, A_memref_alloca_res_4: 1 ] ]
          child:
            set:
            - filter: "[P0, P1, P2, P3] -> { RS2_affine_parallel[i0, i1, i2, i3]; RS1_affine_parallel[i0, i1, i2, i3] }"
              child:
                # YOU ARE HERE
                sequence:
                - filter: "[P0, P1, P2, P3] -> { RS2_affine_parallel[i0, i1, i2, i3] }"
                - filter: "[P0, P1, P2, P3] -> { RS1_affine_parallel[i0, i1, i2, i3] }"
            - filter: "[P0, P1, P2, P3] -> { RS0_affine_parallel[i0, i1, i2] }"
      - filter: "[P0, P1, P2, P3] -> { RS3_affine_parallel[i0, i1, i2] }"
Building ast for schedule node:
Executed: [P0, P1, P2, P3] -> { [[[] -> [i0, i1]] -> [i2]] -> RS1_affine_parallel[o0, o1, o2, o3] : o0 = i1 and o1 = i0 and o2 = 0 and o3 = i2 and i1 >= 0 and i1 < P3 and i0 >= 0 and i0 < P2 and i2 >= 0 and 16i2 < P0 and P3 > 0 and i2 <= 20 }
domain: "[P0, P1, P2, P3] -> { RS0_affine_parallel[i0, i1, 0] : 0 <= i0 < P3 and 0 <= i1 < P2; RS2_affine_parallel[i0, i1, 0, i3] : 0 <= i0 < P3 and 0 <= i1 < P2 and i3 >= 0 and 16i3 < P0; RS1_affine_parallel[i0, i1, 0, i3] : 0 <= i0 < P3 and 0 <= i1 < P2 and i3 >= 0 and 16i3 < P0; RS3_affine_parallel[i0, i1, 0] : 0 <= i0 < P3 and 0 <= i1 < P2 }"
child:
  mark: "grid_parallel"
  child:
    schedule: "[P0, P1, P2, P3] -> [{ RS1_affine_parallel[i0, i1, i2, i3] -> [(i1)]; RS2_affine_parallel[i0, i1, i2, i3] -> [(i1)]; RS3_affine_parallel[i0, i1, i2] -> [(i1)]; RS0_affine_parallel[i0, i1, i2] -> [(i1)] }, { RS1_affine_parallel[i0, i1, i2, i3] -> [(i0)]; RS2_affine_parallel[i0, i1, i2, i3] -> [(i0)]; RS3_affine_parallel[i0, i1, i2] -> [(i0)]; RS0_affine_parallel[i0, i1, i2] -> [(i0)] }]"
    permutable: 1
    coincident: [ 1, 1 ]
    array_expansion: [ [ A_memref_alloca_res_10: 1, A_memref_alloca_res_7: 1, A_memref_alloca_res_4: 1 ], [ A_memref_alloca_res_10: 1, A_memref_alloca_res_7: 1, A_memref_alloca_res_4: 1 ] ]
    child:
      sequence:
      - filter: "[P0, P1, P2, P3] -> { RS0_affine_parallel[i0, i1, i2]; RS2_affine_parallel[i0, i1, i2, i3]; RS1_affine_parallel[i0, i1, i2, i3] }"
        child:
          schedule: "[P0, P1, P2, P3] -> [{ RS1_affine_parallel[i0, i1, i2, i3] -> [(i3)]; RS2_affine_parallel[i0, i1, i2, i3] -> [(21 + i3)]; RS0_affine_parallel[i0, i1, i2] -> [(0)] }]"
          permutable: 1
          coincident: [ 1 ]
          array_expansion: [ [ A_memref_alloca_res_10: 22, A_memref_alloca_res_7: 22, A_memref_alloca_res_4: 1 ] ]
          child:
            set:
            - filter: "[P0, P1, P2, P3] -> { RS2_affine_parallel[i0, i1, i2, i3]; RS1_affine_parallel[i0, i1, i2, i3] }"
              child:
                sequence:
                - # YOU ARE HERE
                  filter: "[P0, P1, P2, P3] -> { RS2_affine_parallel[i0, i1, i2, i3] }"
                - filter: "[P0, P1, P2, P3] -> { RS1_affine_parallel[i0, i1, i2, i3] }"
            - filter: "[P0, P1, P2, P3] -> { RS0_affine_parallel[i0, i1, i2] }"
      - filter: "[P0, P1, P2, P3] -> { RS3_affine_parallel[i0, i1, i2] }"
Building ast for schedule node:
Executed: [P0, P1, P2, P3] -> { [[[] -> [i0, i1]] -> [i2]] -> RS1_affine_parallel[o0, o1, o2, o3] : o0 = i1 and o1 = i0 and o2 = 0 and o3 = i2 and i1 >= 0 and i1 < P3 and i0 >= 0 and i0 < P2 and i2 >= 0 and 16i2 < P0 and P3 > 0 and i2 <= 20 }
domain: "[P0, P1, P2, P3] -> { RS0_affine_parallel[i0, i1, 0] : 0 <= i0 < P3 and 0 <= i1 < P2; RS2_affine_parallel[i0, i1, 0, i3] : 0 <= i0 < P3 and 0 <= i1 < P2 and i3 >= 0 and 16i3 < P0; RS1_affine_parallel[i0, i1, 0, i3] : 0 <= i0 < P3 and 0 <= i1 < P2 and i3 >= 0 and 16i3 < P0; RS3_affine_parallel[i0, i1, 0] : 0 <= i0 < P3 and 0 <= i1 < P2 }"
child:
  mark: "grid_parallel"
  child:
    schedule: "[P0, P1, P2, P3] -> [{ RS1_affine_parallel[i0, i1, i2, i3] -> [(i1)]; RS2_affine_parallel[i0, i1, i2, i3] -> [(i1)]; RS3_affine_parallel[i0, i1, i2] -> [(i1)]; RS0_affine_parallel[i0, i1, i2] -> [(i1)] }, { RS1_affine_parallel[i0, i1, i2, i3] -> [(i0)]; RS2_affine_parallel[i0, i1, i2, i3] -> [(i0)]; RS3_affine_parallel[i0, i1, i2] -> [(i0)]; RS0_affine_parallel[i0, i1, i2] -> [(i0)] }]"
    permutable: 1
    coincident: [ 1, 1 ]
    array_expansion: [ [ A_memref_alloca_res_10: 1, A_memref_alloca_res_7: 1, A_memref_alloca_res_4: 1 ], [ A_memref_alloca_res_10: 1, A_memref_alloca_res_7: 1, A_memref_alloca_res_4: 1 ] ]
    child:
      sequence:
      - filter: "[P0, P1, P2, P3] -> { RS0_affine_parallel[i0, i1, i2]; RS2_affine_parallel[i0, i1, i2, i3]; RS1_affine_parallel[i0, i1, i2, i3] }"
        child:
          schedule: "[P0, P1, P2, P3] -> [{ RS1_affine_parallel[i0, i1, i2, i3] -> [(i3)]; RS2_affine_parallel[i0, i1, i2, i3] -> [(21 + i3)]; RS0_affine_parallel[i0, i1, i2] -> [(0)] }]"
          permutable: 1
          coincident: [ 1 ]
          array_expansion: [ [ A_memref_alloca_res_10: 22, A_memref_alloca_res_7: 22, A_memref_alloca_res_4: 1 ] ]
          child:
            set:
            - filter: "[P0, P1, P2, P3] -> { RS2_affine_parallel[i0, i1, i2, i3]; RS1_affine_parallel[i0, i1, i2, i3] }"
              child:
                sequence:
                - filter: "[P0, P1, P2, P3] -> { RS2_affine_parallel[i0, i1, i2, i3] }"
                - # YOU ARE HERE
                  filter: "[P0, P1, P2, P3] -> { RS1_affine_parallel[i0, i1, i2, i3] }"
            - filter: "[P0, P1, P2, P3] -> { RS0_affine_parallel[i0, i1, i2] }"
      - filter: "[P0, P1, P2, P3] -> { RS3_affine_parallel[i0, i1, i2] }"
Building ast for schedule node:
Executed: [P0, P1, P2, P3] -> { [[[] -> [i0, i1]] -> [i2]] -> RS1_affine_parallel[o0, o1, o2, o3] : o0 = i1 and o1 = i0 and o2 = 0 and o3 = i2 and i1 >= 0 and i1 < P3 and i0 >= 0 and i0 < P2 and i2 >= 0 and 16i2 < P0 and P3 > 0 and i2 <= 20 }
domain: "[P0, P1, P2, P3] -> { RS0_affine_parallel[i0, i1, 0] : 0 <= i0 < P3 and 0 <= i1 < P2; RS2_affine_parallel[i0, i1, 0, i3] : 0 <= i0 < P3 and 0 <= i1 < P2 and i3 >= 0 and 16i3 < P0; RS1_affine_parallel[i0, i1, 0, i3] : 0 <= i0 < P3 and 0 <= i1 < P2 and i3 >= 0 and 16i3 < P0; RS3_affine_parallel[i0, i1, 0] : 0 <= i0 < P3 and 0 <= i1 < P2 }"
child:
  mark: "grid_parallel"
  child:
    schedule: "[P0, P1, P2, P3] -> [{ RS1_affine_parallel[i0, i1, i2, i3] -> [(i1)]; RS2_affine_parallel[i0, i1, i2, i3] -> [(i1)]; RS3_affine_parallel[i0, i1, i2] -> [(i1)]; RS0_affine_parallel[i0, i1, i2] -> [(i1)] }, { RS1_affine_parallel[i0, i1, i2, i3] -> [(i0)]; RS2_affine_parallel[i0, i1, i2, i3] -> [(i0)]; RS3_affine_parallel[i0, i1, i2] -> [(i0)]; RS0_affine_parallel[i0, i1, i2] -> [(i0)] }]"
    permutable: 1
    coincident: [ 1, 1 ]
    array_expansion: [ [ A_memref_alloca_res_10: 1, A_memref_alloca_res_7: 1, A_memref_alloca_res_4: 1 ], [ A_memref_alloca_res_10: 1, A_memref_alloca_res_7: 1, A_memref_alloca_res_4: 1 ] ]
    child:
      sequence:
      - filter: "[P0, P1, P2, P3] -> { RS0_affine_parallel[i0, i1, i2]; RS2_affine_parallel[i0, i1, i2, i3]; RS1_affine_parallel[i0, i1, i2, i3] }"
        child:
          schedule: "[P0, P1, P2, P3] -> [{ RS1_affine_parallel[i0, i1, i2, i3] -> [(i3)]; RS2_affine_parallel[i0, i1, i2, i3] -> [(21 + i3)]; RS0_affine_parallel[i0, i1, i2] -> [(0)] }]"
          permutable: 1
          coincident: [ 1 ]
          array_expansion: [ [ A_memref_alloca_res_10: 22, A_memref_alloca_res_7: 22, A_memref_alloca_res_4: 1 ] ]
          child:
            set:
            - filter: "[P0, P1, P2, P3] -> { RS2_affine_parallel[i0, i1, i2, i3]; RS1_affine_parallel[i0, i1, i2, i3] }"
              child:
                sequence:
                - filter: "[P0, P1, P2, P3] -> { RS2_affine_parallel[i0, i1, i2, i3] }"
                - filter: "[P0, P1, P2, P3] -> { RS1_affine_parallel[i0, i1, i2, i3] }"
                  child:
                    # YOU ARE HERE
                    leaf
            - filter: "[P0, P1, P2, P3] -> { RS0_affine_parallel[i0, i1, i2] }"
      - filter: "[P0, P1, P2, P3] -> { RS3_affine_parallel[i0, i1, i2] }"
We have reached a schedule wtih executed:
[P0, P1, P2, P3] -> { [[[] -> [i0, i1]] -> [i2]] -> RS1_affine_parallel[o0, o1, o2, o3] : o0 = i1 and o1 = i0 and o2 = 0 and o3 = i2 and i1 >= 0 and i1 < P3 and i0 >= 0 and i0 < P2 and i2 >= 0 and 16i2 < P0 and P3 > 0 and i2 <= 20 }
Generating domain for:
[P0, P1, P2, P3] -> { [[[] -> [i0, i1]] -> [i2]] -> RS1_affine_parallel[o0, o1, o2, o3] : o0 = i1 and o1 = i0 and o2 = 0 and o3 = i2 and i1 >= 0 and i1 < P3 and i0 >= 0 and i0 < P2 and i2 >= 0 and 16i2 < P0 and P3 > 0 and i2 <= 20 }

Building call from executed:
[P0, P1, P2, P3] -> { [[[] -> [i0, i1]] -> [i2]] -> RS1_affine_parallel[o0, o1, o2, o3] : o0 = i1 and o1 = i0 and o2 = 0 and o3 = i2 and i1 >= 0 and i1 < P3 and i0 >= 0 and i0 < P2 and i2 >= 0 and 16i2 < P0 and P3 > 0 and i2 <= 20 }
BEFORE
[P0, P1, P2, P3] -> { [[[] -> [i0, i1]] -> [i2]] -> [A_memref_alloca_res_7[o0, o1, o2] -> RS1_affine_parallel[]] : exists (e0 = floor((1 - i2 + o2)/22): o0 = 0 and o1 = 0 and 22e0 = 1 - i2 + o2 and o2 >= 0 and o2 <= 21) }
PROJECTED OUT
[P0, P1, P2, P3] -> { [[[] -> [i0, i1]] -> [i2]] -> A_memref_alloca_res_7[o0, o1, o2] : exists (e0 = floor((1 - i2 + o2)/22): o0 = 0 and o1 = 0 and 22e0 = 1 - i2 + o2 and o2 >= 0 and o2 <= 21) }
Building call from executed:
[P0, P1, P2, P3] -> { [[[] -> [i0, i1]] -> [i2]] -> A_memref_alloca_res_7[o0, o1, o2] : exists (e0 = floor((1 - i2 + o2)/22): o0 = 0 and o1 = 0 and 22e0 = 1 - i2 + o2 and o2 >= 0 and o2 <= 21) }
BEFORE
[P0, P1, P2, P3] -> { [[[] -> [i0, i1]] -> [i2]] -> [A_memref_alloca_res_10[o0, o1, o2] -> RS1_affine_parallel[]] : exists (e0 = floor((1 - i2 + o2)/22): o0 = 0 and o1 = 0 and 22e0 = 1 - i2 + o2 and o2 >= 0 and o2 <= 21) }
PROJECTED OUT
[P0, P1, P2, P3] -> { [[[] -> [i0, i1]] -> [i2]] -> A_memref_alloca_res_10[o0, o1, o2] : exists (e0 = floor((1 - i2 + o2)/22): o0 = 0 and o1 = 0 and 22e0 = 1 - i2 + o2 and o2 >= 0 and o2 <= 21) }
Building call from executed:
[P0, P1, P2, P3] -> { [[[] -> [i0, i1]] -> [i2]] -> A_memref_alloca_res_10[o0, o1, o2] : exists (e0 = floor((1 - i2 + o2)/22): o0 = 0 and o1 = 0 and 22e0 = 1 - i2 + o2 and o2 >= 0 and o2 <= 21) }
TODO use the executed_ea
[P0, P1, P2, P3] -> { [[[] -> [i0, i1]] -> [i2]] -> [A_memref_alloca_res_10[o0, o1, o2] -> RS2_affine_parallel[]] : exists (e0 = floor((1 - i2 + o2)/22): o0 = 0 and o1 = 0 and 22e0 = 1 - i2 + o2 and o2 >= 0 and o2 <= 21); [[[] -> [i0, i1]] -> [i2]] -> [A_memref_alloca_res_4[o0, o1, o2] -> RS2_affine_parallel[]] : o0 = 0 and o1 = 0 and o2 = 0; [[[] -> [i0, i1]] -> [i2]] -> [A_memref_alloca_res_7[o0, o1, o2] -> RS2_affine_parallel[]] : exists (e0 = floor((1 - i2 + o2)/22): o0 = 0 and o1 = 0 and 22e0 = 1 - i2 + o2 and o2 >= 0 and o2 <= 21); [[[] -> [i0, i1]] -> [i2]] -> [A_memref_alloca_res_7[o0, o1, o2] -> RS1_affine_parallel[]] : exists (e0 = floor((1 - i2 + o2)/22): o0 = 0 and o1 = 0 and 22e0 = 1 - i2 + o2 and o2 >= 0 and o2 <= 21); [[[] -> [i0, i1]] -> [i2]] -> [A_memref_alloca_res_10[o0, o1, o2] -> RS1_affine_parallel[]] : exists (e0 = floor((1 - i2 + o2)/22): o0 = 0 and o1 = 0 and 22e0 = 1 - i2 + o2 and o2 >= 0 and o2 <= 21) }
Generated graft for user:
user:
  op: call
  args:
  - id: RS1_affine_parallel@0x46988f10
  - id: c1
  - id: c0
  - val: 0
  - id: c2
  - op: call
    args:
    - id: A_memref_alloca_res_7@0x469c6770
    - val: 0
    - val: 0
    - op: pdiv_r
      args:
      - op: add
        args:
        - id: c2
        - val: 21
      - val: 22
  - op: call
    args:
    - id: A_memref_alloca_res_10@0x46985f80
    - val: 0
    - val: 0
    - op: pdiv_r
      args:
      - op: add
        args:
        - id: c2
        - val: 21
      - val: 22

Building ast for schedule node:
Executed: [P0, P1, P2, P3] -> { [[[] -> [i0, i1]] -> [i2]] -> RS1_affine_parallel[o0, o1, o2, o3] : o0 = i1 and o1 = i0 and o2 = 0 and o3 = i2 and i1 >= 0 and i1 < P3 and i0 >= 0 and i0 < P2 and i2 >= 0 and 16i2 < P0 and P3 > 0 and i2 <= 20 }
domain: "[P0, P1, P2, P3] -> { RS0_affine_parallel[i0, i1, 0] : 0 <= i0 < P3 and 0 <= i1 < P2; RS2_affine_parallel[i0, i1, 0, i3] : 0 <= i0 < P3 and 0 <= i1 < P2 and i3 >= 0 and 16i3 < P0; RS1_affine_parallel[i0, i1, 0, i3] : 0 <= i0 < P3 and 0 <= i1 < P2 and i3 >= 0 and 16i3 < P0; RS3_affine_parallel[i0, i1, 0] : 0 <= i0 < P3 and 0 <= i1 < P2 }"
child:
  mark: "grid_parallel"
  child:
    schedule: "[P0, P1, P2, P3] -> [{ RS1_affine_parallel[i0, i1, i2, i3] -> [(i1)]; RS2_affine_parallel[i0, i1, i2, i3] -> [(i1)]; RS3_affine_parallel[i0, i1, i2] -> [(i1)]; RS0_affine_parallel[i0, i1, i2] -> [(i1)] }, { RS1_affine_parallel[i0, i1, i2, i3] -> [(i0)]; RS2_affine_parallel[i0, i1, i2, i3] -> [(i0)]; RS3_affine_parallel[i0, i1, i2] -> [(i0)]; RS0_affine_parallel[i0, i1, i2] -> [(i0)] }]"
    permutable: 1
    coincident: [ 1, 1 ]
    array_expansion: [ [ A_memref_alloca_res_10: 1, A_memref_alloca_res_7: 1, A_memref_alloca_res_4: 1 ], [ A_memref_alloca_res_10: 1, A_memref_alloca_res_7: 1, A_memref_alloca_res_4: 1 ] ]
    child:
      sequence:
      - filter: "[P0, P1, P2, P3] -> { RS0_affine_parallel[i0, i1, i2]; RS2_affine_parallel[i0, i1, i2, i3]; RS1_affine_parallel[i0, i1, i2, i3] }"
        child:
          schedule: "[P0, P1, P2, P3] -> [{ RS1_affine_parallel[i0, i1, i2, i3] -> [(i3)]; RS2_affine_parallel[i0, i1, i2, i3] -> [(21 + i3)]; RS0_affine_parallel[i0, i1, i2] -> [(0)] }]"
          permutable: 1
          coincident: [ 1 ]
          array_expansion: [ [ A_memref_alloca_res_10: 22, A_memref_alloca_res_7: 22, A_memref_alloca_res_4: 1 ] ]
          child:
            set:
            - filter: "[P0, P1, P2, P3] -> { RS2_affine_parallel[i0, i1, i2, i3]; RS1_affine_parallel[i0, i1, i2, i3] }"
              child:
                sequence:
                - filter: "[P0, P1, P2, P3] -> { RS2_affine_parallel[i0, i1, i2, i3] }"
                - filter: "[P0, P1, P2, P3] -> { RS1_affine_parallel[i0, i1, i2, i3] }"
            - # YOU ARE HERE
              filter: "[P0, P1, P2, P3] -> { RS0_affine_parallel[i0, i1, i2] }"
      - filter: "[P0, P1, P2, P3] -> { RS3_affine_parallel[i0, i1, i2] }"
Generated graft for band:
iterator:
  id: c2
init:
  val: 0
cond:
  op: le
  args:
  - id: c2
  - op: min
    args:
    - val: 20
    - op: fdiv_q
      args:
      - op: sub
        args:
        - id: P0@0x46974500
        - val: 1
      - val: 16
inc:
  val: 1
body:
  user:
    op: call
    args:
    - id: RS1_affine_parallel@0x46988f10
    - id: c1
    - id: c0
    - val: 0
    - id: c2
    - op: call
      args:
      - id: A_memref_alloca_res_7@0x469c6770
      - val: 0
      - val: 0
      - op: pdiv_r
        args:
        - op: add
          args:
          - id: c2
          - val: 21
        - val: 22
    - op: call
      args:
      - id: A_memref_alloca_res_10@0x46985f80
      - val: 0
      - val: 0
      - op: pdiv_r
        args:
        - op: add
          args:
          - id: c2
          - val: 21
        - val: 22
[P0, P1, P2, P3] -> { [[[] -> [i0, i1]] -> [i2]] : P0 > 0 }
[P0, P1, P2, P3] -> { [[[] -> [i0, i1]] -> [i2]] }
graft for band end

Building ast for schedule node:
Executed: [P0, P1, P2, P3] -> { [[[] -> [i0, i1]] -> [i2]] -> RS2_affine_parallel[o0, o1, o2, o3] : o0 = i1 and o1 = i0 and o2 = 0 and o3 = -21 + i2 and i1 >= 0 and i1 < P3 and i0 >= 0 and i0 < P2 and i2 >= 21 and 16i2 <= 335 + P0 and P3 > 0; [[[] -> [i0, i1]] -> [i2]] -> RS1_affine_parallel[o0, o1, o2, o3] : o0 = i1 and o1 = i0 and o2 = 0 and o3 = i2 and i1 >= 0 and i1 < P3 and i0 >= 0 and i0 < P2 and i2 >= 21 and 16i2 < P0 and P3 > 0 }
domain: "[P0, P1, P2, P3] -> { RS0_affine_parallel[i0, i1, 0] : 0 <= i0 < P3 and 0 <= i1 < P2; RS2_affine_parallel[i0, i1, 0, i3] : 0 <= i0 < P3 and 0 <= i1 < P2 and i3 >= 0 and 16i3 < P0; RS1_affine_parallel[i0, i1, 0, i3] : 0 <= i0 < P3 and 0 <= i1 < P2 and i3 >= 0 and 16i3 < P0; RS3_affine_parallel[i0, i1, 0] : 0 <= i0 < P3 and 0 <= i1 < P2 }"
child:
  mark: "grid_parallel"
  child:
    schedule: "[P0, P1, P2, P3] -> [{ RS1_affine_parallel[i0, i1, i2, i3] -> [(i1)]; RS2_affine_parallel[i0, i1, i2, i3] -> [(i1)]; RS3_affine_parallel[i0, i1, i2] -> [(i1)]; RS0_affine_parallel[i0, i1, i2] -> [(i1)] }, { RS1_affine_parallel[i0, i1, i2, i3] -> [(i0)]; RS2_affine_parallel[i0, i1, i2, i3] -> [(i0)]; RS3_affine_parallel[i0, i1, i2] -> [(i0)]; RS0_affine_parallel[i0, i1, i2] -> [(i0)] }]"
    permutable: 1
    coincident: [ 1, 1 ]
    array_expansion: [ [ A_memref_alloca_res_10: 1, A_memref_alloca_res_7: 1, A_memref_alloca_res_4: 1 ], [ A_memref_alloca_res_10: 1, A_memref_alloca_res_7: 1, A_memref_alloca_res_4: 1 ] ]
    child:
      sequence:
      - filter: "[P0, P1, P2, P3] -> { RS0_affine_parallel[i0, i1, i2]; RS2_affine_parallel[i0, i1, i2, i3]; RS1_affine_parallel[i0, i1, i2, i3] }"
        child:
          schedule: "[P0, P1, P2, P3] -> [{ RS1_affine_parallel[i0, i1, i2, i3] -> [(i3)]; RS2_affine_parallel[i0, i1, i2, i3] -> [(21 + i3)]; RS0_affine_parallel[i0, i1, i2] -> [(0)] }]"
          permutable: 1
          coincident: [ 1 ]
          array_expansion: [ [ A_memref_alloca_res_10: 22, A_memref_alloca_res_7: 22, A_memref_alloca_res_4: 1 ] ]
          child:
            # YOU ARE HERE
            set:
            - filter: "[P0, P1, P2, P3] -> { RS2_affine_parallel[i0, i1, i2, i3]; RS1_affine_parallel[i0, i1, i2, i3] }"
              child:
                sequence:
                - filter: "[P0, P1, P2, P3] -> { RS2_affine_parallel[i0, i1, i2, i3] }"
                - filter: "[P0, P1, P2, P3] -> { RS1_affine_parallel[i0, i1, i2, i3] }"
            - filter: "[P0, P1, P2, P3] -> { RS0_affine_parallel[i0, i1, i2] }"
      - filter: "[P0, P1, P2, P3] -> { RS3_affine_parallel[i0, i1, i2] }"
Building ast for schedule node:
Executed: [P0, P1, P2, P3] -> { [[[] -> [i0, i1]] -> [i2]] -> RS2_affine_parallel[o0, o1, o2, o3] : o0 = i1 and o1 = i0 and o2 = 0 and o3 = -21 + i2 and i1 >= 0 and i1 < P3 and i0 >= 0 and i0 < P2 and i2 >= 21 and 16i2 <= 335 + P0 and P3 > 0; [[[] -> [i0, i1]] -> [i2]] -> RS1_affine_parallel[o0, o1, o2, o3] : o0 = i1 and o1 = i0 and o2 = 0 and o3 = i2 and i1 >= 0 and i1 < P3 and i0 >= 0 and i0 < P2 and i2 >= 21 and 16i2 < P0 and P3 > 0 }
domain: "[P0, P1, P2, P3] -> { RS0_affine_parallel[i0, i1, 0] : 0 <= i0 < P3 and 0 <= i1 < P2; RS2_affine_parallel[i0, i1, 0, i3] : 0 <= i0 < P3 and 0 <= i1 < P2 and i3 >= 0 and 16i3 < P0; RS1_affine_parallel[i0, i1, 0, i3] : 0 <= i0 < P3 and 0 <= i1 < P2 and i3 >= 0 and 16i3 < P0; RS3_affine_parallel[i0, i1, 0] : 0 <= i0 < P3 and 0 <= i1 < P2 }"
child:
  mark: "grid_parallel"
  child:
    schedule: "[P0, P1, P2, P3] -> [{ RS1_affine_parallel[i0, i1, i2, i3] -> [(i1)]; RS2_affine_parallel[i0, i1, i2, i3] -> [(i1)]; RS3_affine_parallel[i0, i1, i2] -> [(i1)]; RS0_affine_parallel[i0, i1, i2] -> [(i1)] }, { RS1_affine_parallel[i0, i1, i2, i3] -> [(i0)]; RS2_affine_parallel[i0, i1, i2, i3] -> [(i0)]; RS3_affine_parallel[i0, i1, i2] -> [(i0)]; RS0_affine_parallel[i0, i1, i2] -> [(i0)] }]"
    permutable: 1
    coincident: [ 1, 1 ]
    array_expansion: [ [ A_memref_alloca_res_10: 1, A_memref_alloca_res_7: 1, A_memref_alloca_res_4: 1 ], [ A_memref_alloca_res_10: 1, A_memref_alloca_res_7: 1, A_memref_alloca_res_4: 1 ] ]
    child:
      sequence:
      - filter: "[P0, P1, P2, P3] -> { RS0_affine_parallel[i0, i1, i2]; RS2_affine_parallel[i0, i1, i2, i3]; RS1_affine_parallel[i0, i1, i2, i3] }"
        child:
          schedule: "[P0, P1, P2, P3] -> [{ RS1_affine_parallel[i0, i1, i2, i3] -> [(i3)]; RS2_affine_parallel[i0, i1, i2, i3] -> [(21 + i3)]; RS0_affine_parallel[i0, i1, i2] -> [(0)] }]"
          permutable: 1
          coincident: [ 1 ]
          array_expansion: [ [ A_memref_alloca_res_10: 22, A_memref_alloca_res_7: 22, A_memref_alloca_res_4: 1 ] ]
          child:
            set:
            - # YOU ARE HERE
              filter: "[P0, P1, P2, P3] -> { RS2_affine_parallel[i0, i1, i2, i3]; RS1_affine_parallel[i0, i1, i2, i3] }"
              child:
                sequence:
                - filter: "[P0, P1, P2, P3] -> { RS2_affine_parallel[i0, i1, i2, i3] }"
                - filter: "[P0, P1, P2, P3] -> { RS1_affine_parallel[i0, i1, i2, i3] }"
            - filter: "[P0, P1, P2, P3] -> { RS0_affine_parallel[i0, i1, i2] }"
      - filter: "[P0, P1, P2, P3] -> { RS3_affine_parallel[i0, i1, i2] }"
Building ast for schedule node:
Executed: [P0, P1, P2, P3] -> { [[[] -> [i0, i1]] -> [i2]] -> RS2_affine_parallel[o0, o1, o2, o3] : o0 = i1 and o1 = i0 and o2 = 0 and o3 = -21 + i2 and i1 >= 0 and i1 < P3 and i0 >= 0 and i0 < P2 and i2 >= 21 and 16i2 <= 335 + P0 and P3 > 0; [[[] -> [i0, i1]] -> [i2]] -> RS1_affine_parallel[o0, o1, o2, o3] : o0 = i1 and o1 = i0 and o2 = 0 and o3 = i2 and i1 >= 0 and i1 < P3 and i0 >= 0 and i0 < P2 and i2 >= 21 and 16i2 < P0 and P3 > 0 }
domain: "[P0, P1, P2, P3] -> { RS0_affine_parallel[i0, i1, 0] : 0 <= i0 < P3 and 0 <= i1 < P2; RS2_affine_parallel[i0, i1, 0, i3] : 0 <= i0 < P3 and 0 <= i1 < P2 and i3 >= 0 and 16i3 < P0; RS1_affine_parallel[i0, i1, 0, i3] : 0 <= i0 < P3 and 0 <= i1 < P2 and i3 >= 0 and 16i3 < P0; RS3_affine_parallel[i0, i1, 0] : 0 <= i0 < P3 and 0 <= i1 < P2 }"
child:
  mark: "grid_parallel"
  child:
    schedule: "[P0, P1, P2, P3] -> [{ RS1_affine_parallel[i0, i1, i2, i3] -> [(i1)]; RS2_affine_parallel[i0, i1, i2, i3] -> [(i1)]; RS3_affine_parallel[i0, i1, i2] -> [(i1)]; RS0_affine_parallel[i0, i1, i2] -> [(i1)] }, { RS1_affine_parallel[i0, i1, i2, i3] -> [(i0)]; RS2_affine_parallel[i0, i1, i2, i3] -> [(i0)]; RS3_affine_parallel[i0, i1, i2] -> [(i0)]; RS0_affine_parallel[i0, i1, i2] -> [(i0)] }]"
    permutable: 1
    coincident: [ 1, 1 ]
    array_expansion: [ [ A_memref_alloca_res_10: 1, A_memref_alloca_res_7: 1, A_memref_alloca_res_4: 1 ], [ A_memref_alloca_res_10: 1, A_memref_alloca_res_7: 1, A_memref_alloca_res_4: 1 ] ]
    child:
      sequence:
      - filter: "[P0, P1, P2, P3] -> { RS0_affine_parallel[i0, i1, i2]; RS2_affine_parallel[i0, i1, i2, i3]; RS1_affine_parallel[i0, i1, i2, i3] }"
        child:
          schedule: "[P0, P1, P2, P3] -> [{ RS1_affine_parallel[i0, i1, i2, i3] -> [(i3)]; RS2_affine_parallel[i0, i1, i2, i3] -> [(21 + i3)]; RS0_affine_parallel[i0, i1, i2] -> [(0)] }]"
          permutable: 1
          coincident: [ 1 ]
          array_expansion: [ [ A_memref_alloca_res_10: 22, A_memref_alloca_res_7: 22, A_memref_alloca_res_4: 1 ] ]
          child:
            set:
            - filter: "[P0, P1, P2, P3] -> { RS2_affine_parallel[i0, i1, i2, i3]; RS1_affine_parallel[i0, i1, i2, i3] }"
              child:
                # YOU ARE HERE
                sequence:
                - filter: "[P0, P1, P2, P3] -> { RS2_affine_parallel[i0, i1, i2, i3] }"
                - filter: "[P0, P1, P2, P3] -> { RS1_affine_parallel[i0, i1, i2, i3] }"
            - filter: "[P0, P1, P2, P3] -> { RS0_affine_parallel[i0, i1, i2] }"
      - filter: "[P0, P1, P2, P3] -> { RS3_affine_parallel[i0, i1, i2] }"
Building ast for schedule node:
Executed: [P0, P1, P2, P3] -> { [[[] -> [i0, i1]] -> [i2]] -> RS2_affine_parallel[o0, o1, o2, o3] : o0 = i1 and o1 = i0 and o2 = 0 and o3 = -21 + i2 and i1 >= 0 and i1 < P3 and i0 >= 0 and i0 < P2 and i2 >= 21 and 16i2 <= 335 + P0 and P3 > 0; [[[] -> [i0, i1]] -> [i2]] -> RS1_affine_parallel[o0, o1, o2, o3] : o0 = i1 and o1 = i0 and o2 = 0 and o3 = i2 and i1 >= 0 and i1 < P3 and i0 >= 0 and i0 < P2 and i2 >= 21 and 16i2 < P0 and P3 > 0 }
domain: "[P0, P1, P2, P3] -> { RS0_affine_parallel[i0, i1, 0] : 0 <= i0 < P3 and 0 <= i1 < P2; RS2_affine_parallel[i0, i1, 0, i3] : 0 <= i0 < P3 and 0 <= i1 < P2 and i3 >= 0 and 16i3 < P0; RS1_affine_parallel[i0, i1, 0, i3] : 0 <= i0 < P3 and 0 <= i1 < P2 and i3 >= 0 and 16i3 < P0; RS3_affine_parallel[i0, i1, 0] : 0 <= i0 < P3 and 0 <= i1 < P2 }"
child:
  mark: "grid_parallel"
  child:
    schedule: "[P0, P1, P2, P3] -> [{ RS1_affine_parallel[i0, i1, i2, i3] -> [(i1)]; RS2_affine_parallel[i0, i1, i2, i3] -> [(i1)]; RS3_affine_parallel[i0, i1, i2] -> [(i1)]; RS0_affine_parallel[i0, i1, i2] -> [(i1)] }, { RS1_affine_parallel[i0, i1, i2, i3] -> [(i0)]; RS2_affine_parallel[i0, i1, i2, i3] -> [(i0)]; RS3_affine_parallel[i0, i1, i2] -> [(i0)]; RS0_affine_parallel[i0, i1, i2] -> [(i0)] }]"
    permutable: 1
    coincident: [ 1, 1 ]
    array_expansion: [ [ A_memref_alloca_res_10: 1, A_memref_alloca_res_7: 1, A_memref_alloca_res_4: 1 ], [ A_memref_alloca_res_10: 1, A_memref_alloca_res_7: 1, A_memref_alloca_res_4: 1 ] ]
    child:
      sequence:
      - filter: "[P0, P1, P2, P3] -> { RS0_affine_parallel[i0, i1, i2]; RS2_affine_parallel[i0, i1, i2, i3]; RS1_affine_parallel[i0, i1, i2, i3] }"
        child:
          schedule: "[P0, P1, P2, P3] -> [{ RS1_affine_parallel[i0, i1, i2, i3] -> [(i3)]; RS2_affine_parallel[i0, i1, i2, i3] -> [(21 + i3)]; RS0_affine_parallel[i0, i1, i2] -> [(0)] }]"
          permutable: 1
          coincident: [ 1 ]
          array_expansion: [ [ A_memref_alloca_res_10: 22, A_memref_alloca_res_7: 22, A_memref_alloca_res_4: 1 ] ]
          child:
            set:
            - filter: "[P0, P1, P2, P3] -> { RS2_affine_parallel[i0, i1, i2, i3]; RS1_affine_parallel[i0, i1, i2, i3] }"
              child:
                sequence:
                - # YOU ARE HERE
                  filter: "[P0, P1, P2, P3] -> { RS2_affine_parallel[i0, i1, i2, i3] }"
                - filter: "[P0, P1, P2, P3] -> { RS1_affine_parallel[i0, i1, i2, i3] }"
            - filter: "[P0, P1, P2, P3] -> { RS0_affine_parallel[i0, i1, i2] }"
      - filter: "[P0, P1, P2, P3] -> { RS3_affine_parallel[i0, i1, i2] }"
Building ast for schedule node:
Executed: [P0, P1, P2, P3] -> { [[[] -> [i0, i1]] -> [i2]] -> RS2_affine_parallel[o0, o1, o2, o3] : o0 = i1 and o1 = i0 and o2 = 0 and o3 = -21 + i2 and i1 >= 0 and i1 < P3 and i0 >= 0 and i0 < P2 and i2 >= 21 and 16i2 <= 335 + P0 and P3 > 0 }
domain: "[P0, P1, P2, P3] -> { RS0_affine_parallel[i0, i1, 0] : 0 <= i0 < P3 and 0 <= i1 < P2; RS2_affine_parallel[i0, i1, 0, i3] : 0 <= i0 < P3 and 0 <= i1 < P2 and i3 >= 0 and 16i3 < P0; RS1_affine_parallel[i0, i1, 0, i3] : 0 <= i0 < P3 and 0 <= i1 < P2 and i3 >= 0 and 16i3 < P0; RS3_affine_parallel[i0, i1, 0] : 0 <= i0 < P3 and 0 <= i1 < P2 }"
child:
  mark: "grid_parallel"
  child:
    schedule: "[P0, P1, P2, P3] -> [{ RS1_affine_parallel[i0, i1, i2, i3] -> [(i1)]; RS2_affine_parallel[i0, i1, i2, i3] -> [(i1)]; RS3_affine_parallel[i0, i1, i2] -> [(i1)]; RS0_affine_parallel[i0, i1, i2] -> [(i1)] }, { RS1_affine_parallel[i0, i1, i2, i3] -> [(i0)]; RS2_affine_parallel[i0, i1, i2, i3] -> [(i0)]; RS3_affine_parallel[i0, i1, i2] -> [(i0)]; RS0_affine_parallel[i0, i1, i2] -> [(i0)] }]"
    permutable: 1
    coincident: [ 1, 1 ]
    array_expansion: [ [ A_memref_alloca_res_10: 1, A_memref_alloca_res_7: 1, A_memref_alloca_res_4: 1 ], [ A_memref_alloca_res_10: 1, A_memref_alloca_res_7: 1, A_memref_alloca_res_4: 1 ] ]
    child:
      sequence:
      - filter: "[P0, P1, P2, P3] -> { RS0_affine_parallel[i0, i1, i2]; RS2_affine_parallel[i0, i1, i2, i3]; RS1_affine_parallel[i0, i1, i2, i3] }"
        child:
          schedule: "[P0, P1, P2, P3] -> [{ RS1_affine_parallel[i0, i1, i2, i3] -> [(i3)]; RS2_affine_parallel[i0, i1, i2, i3] -> [(21 + i3)]; RS0_affine_parallel[i0, i1, i2] -> [(0)] }]"
          permutable: 1
          coincident: [ 1 ]
          array_expansion: [ [ A_memref_alloca_res_10: 22, A_memref_alloca_res_7: 22, A_memref_alloca_res_4: 1 ] ]
          child:
            set:
            - filter: "[P0, P1, P2, P3] -> { RS2_affine_parallel[i0, i1, i2, i3]; RS1_affine_parallel[i0, i1, i2, i3] }"
              child:
                sequence:
                - filter: "[P0, P1, P2, P3] -> { RS2_affine_parallel[i0, i1, i2, i3] }"
                  child:
                    # YOU ARE HERE
                    leaf
                - filter: "[P0, P1, P2, P3] -> { RS1_affine_parallel[i0, i1, i2, i3] }"
            - filter: "[P0, P1, P2, P3] -> { RS0_affine_parallel[i0, i1, i2] }"
      - filter: "[P0, P1, P2, P3] -> { RS3_affine_parallel[i0, i1, i2] }"
We have reached a schedule wtih executed:
[P0, P1, P2, P3] -> { [[[] -> [i0, i1]] -> [i2]] -> RS2_affine_parallel[o0, o1, o2, o3] : o0 = i1 and o1 = i0 and o2 = 0 and o3 = -21 + i2 and i1 >= 0 and i1 < P3 and i0 >= 0 and i0 < P2 and i2 >= 21 and 16i2 <= 335 + P0 and P3 > 0 }
Generating domain for:
[P0, P1, P2, P3] -> { [[[] -> [i0, i1]] -> [i2]] -> RS2_affine_parallel[o0, o1, o2, o3] : o0 = i1 and o1 = i0 and o2 = 0 and o3 = -21 + i2 and i1 >= 0 and i1 < P3 and i0 >= 0 and i0 < P2 and i2 >= 21 and 16i2 <= 335 + P0 and P3 > 0 }

Building call from executed:
[P0, P1, P2, P3] -> { [[[] -> [i0, i1]] -> [i2]] -> RS2_affine_parallel[o0, o1, o2, o3] : o0 = i1 and o1 = i0 and o2 = 0 and o3 = -21 + i2 and i1 >= 0 and i1 < P3 and i0 >= 0 and i0 < P2 and i2 >= 21 and 16i2 <= 335 + P0 and P3 > 0 }
BEFORE
[P0, P1, P2, P3] -> { [[[] -> [i0, i1]] -> [i2]] -> [A_memref_alloca_res_4[o0, o1, o2] -> RS2_affine_parallel[]] : o0 = 0 and o1 = 0 and o2 = 0 }
PROJECTED OUT
[P0, P1, P2, P3] -> { [[[] -> [i0, i1]] -> [i2]] -> A_memref_alloca_res_4[o0, o1, o2] : o0 = 0 and o1 = 0 and o2 = 0 }
Building call from executed:
[P0, P1, P2, P3] -> { [[[] -> [i0, i1]] -> [i2]] -> A_memref_alloca_res_4[o0, o1, o2] : o0 = 0 and o1 = 0 and o2 = 0 }
BEFORE
[P0, P1, P2, P3] -> { [[[] -> [i0, i1]] -> [i2]] -> [A_memref_alloca_res_7[o0, o1, o2] -> RS2_affine_parallel[]] : exists (e0 = floor((1 - i2 + o2)/22): o0 = 0 and o1 = 0 and 22e0 = 1 - i2 + o2 and o2 >= 0 and o2 <= 21) }
PROJECTED OUT
[P0, P1, P2, P3] -> { [[[] -> [i0, i1]] -> [i2]] -> A_memref_alloca_res_7[o0, o1, o2] : exists (e0 = floor((1 - i2 + o2)/22): o0 = 0 and o1 = 0 and 22e0 = 1 - i2 + o2 and o2 >= 0 and o2 <= 21) }
Building call from executed:
[P0, P1, P2, P3] -> { [[[] -> [i0, i1]] -> [i2]] -> A_memref_alloca_res_7[o0, o1, o2] : exists (e0 = floor((1 - i2 + o2)/22): o0 = 0 and o1 = 0 and 22e0 = 1 - i2 + o2 and o2 >= 0 and o2 <= 21) }
BEFORE
[P0, P1, P2, P3] -> { [[[] -> [i0, i1]] -> [i2]] -> [A_memref_alloca_res_10[o0, o1, o2] -> RS2_affine_parallel[]] : exists (e0 = floor((1 - i2 + o2)/22): o0 = 0 and o1 = 0 and 22e0 = 1 - i2 + o2 and o2 >= 0 and o2 <= 21) }
PROJECTED OUT
[P0, P1, P2, P3] -> { [[[] -> [i0, i1]] -> [i2]] -> A_memref_alloca_res_10[o0, o1, o2] : exists (e0 = floor((1 - i2 + o2)/22): o0 = 0 and o1 = 0 and 22e0 = 1 - i2 + o2 and o2 >= 0 and o2 <= 21) }
Building call from executed:
[P0, P1, P2, P3] -> { [[[] -> [i0, i1]] -> [i2]] -> A_memref_alloca_res_10[o0, o1, o2] : exists (e0 = floor((1 - i2 + o2)/22): o0 = 0 and o1 = 0 and 22e0 = 1 - i2 + o2 and o2 >= 0 and o2 <= 21) }
TODO use the executed_ea
[P0, P1, P2, P3] -> { [[[] -> [i0, i1]] -> [i2]] -> [A_memref_alloca_res_10[o0, o1, o2] -> RS2_affine_parallel[]] : exists (e0 = floor((1 - i2 + o2)/22): o0 = 0 and o1 = 0 and 22e0 = 1 - i2 + o2 and o2 >= 0 and o2 <= 21); [[[] -> [i0, i1]] -> [i2]] -> [A_memref_alloca_res_4[o0, o1, o2] -> RS2_affine_parallel[]] : o0 = 0 and o1 = 0 and o2 = 0; [[[] -> [i0, i1]] -> [i2]] -> [A_memref_alloca_res_7[o0, o1, o2] -> RS2_affine_parallel[]] : exists (e0 = floor((1 - i2 + o2)/22): o0 = 0 and o1 = 0 and 22e0 = 1 - i2 + o2 and o2 >= 0 and o2 <= 21); [[[] -> [i0, i1]] -> [i2]] -> [A_memref_alloca_res_7[o0, o1, o2] -> RS1_affine_parallel[]] : exists (e0 = floor((1 - i2 + o2)/22): o0 = 0 and o1 = 0 and 22e0 = 1 - i2 + o2 and o2 >= 0 and o2 <= 21); [[[] -> [i0, i1]] -> [i2]] -> [A_memref_alloca_res_10[o0, o1, o2] -> RS1_affine_parallel[]] : exists (e0 = floor((1 - i2 + o2)/22): o0 = 0 and o1 = 0 and 22e0 = 1 - i2 + o2 and o2 >= 0 and o2 <= 21) }
Generated graft for user:
user:
  op: call
  args:
  - id: RS2_affine_parallel@0x46998260
  - id: c1
  - id: c0
  - val: 0
  - op: sub
    args:
    - id: c2
    - val: 21
  - op: call
    args:
    - id: A_memref_alloca_res_4@0x469c72c0
    - val: 0
    - val: 0
    - val: 0
  - op: call
    args:
    - id: A_memref_alloca_res_7@0x469c6770
    - val: 0
    - val: 0
    - op: pdiv_r
      args:
      - op: sub
        args:
        - id: c2
        - val: 1
      - val: 22
  - op: call
    args:
    - id: A_memref_alloca_res_10@0x46985f80
    - val: 0
    - val: 0
    - op: pdiv_r
      args:
      - op: sub
        args:
        - id: c2
        - val: 1
      - val: 22

Building ast for schedule node:
Executed: [P0, P1, P2, P3] -> { [[[] -> [i0, i1]] -> [i2]] -> RS2_affine_parallel[o0, o1, o2, o3] : o0 = i1 and o1 = i0 and o2 = 0 and o3 = -21 + i2 and i1 >= 0 and i1 < P3 and i0 >= 0 and i0 < P2 and i2 >= 21 and 16i2 <= 335 + P0 and P3 > 0; [[[] -> [i0, i1]] -> [i2]] -> RS1_affine_parallel[o0, o1, o2, o3] : o0 = i1 and o1 = i0 and o2 = 0 and o3 = i2 and i1 >= 0 and i1 < P3 and i0 >= 0 and i0 < P2 and i2 >= 21 and 16i2 < P0 and P3 > 0 }
domain: "[P0, P1, P2, P3] -> { RS0_affine_parallel[i0, i1, 0] : 0 <= i0 < P3 and 0 <= i1 < P2; RS2_affine_parallel[i0, i1, 0, i3] : 0 <= i0 < P3 and 0 <= i1 < P2 and i3 >= 0 and 16i3 < P0; RS1_affine_parallel[i0, i1, 0, i3] : 0 <= i0 < P3 and 0 <= i1 < P2 and i3 >= 0 and 16i3 < P0; RS3_affine_parallel[i0, i1, 0] : 0 <= i0 < P3 and 0 <= i1 < P2 }"
child:
  mark: "grid_parallel"
  child:
    schedule: "[P0, P1, P2, P3] -> [{ RS1_affine_parallel[i0, i1, i2, i3] -> [(i1)]; RS2_affine_parallel[i0, i1, i2, i3] -> [(i1)]; RS3_affine_parallel[i0, i1, i2] -> [(i1)]; RS0_affine_parallel[i0, i1, i2] -> [(i1)] }, { RS1_affine_parallel[i0, i1, i2, i3] -> [(i0)]; RS2_affine_parallel[i0, i1, i2, i3] -> [(i0)]; RS3_affine_parallel[i0, i1, i2] -> [(i0)]; RS0_affine_parallel[i0, i1, i2] -> [(i0)] }]"
    permutable: 1
    coincident: [ 1, 1 ]
    array_expansion: [ [ A_memref_alloca_res_10: 1, A_memref_alloca_res_7: 1, A_memref_alloca_res_4: 1 ], [ A_memref_alloca_res_10: 1, A_memref_alloca_res_7: 1, A_memref_alloca_res_4: 1 ] ]
    child:
      sequence:
      - filter: "[P0, P1, P2, P3] -> { RS0_affine_parallel[i0, i1, i2]; RS2_affine_parallel[i0, i1, i2, i3]; RS1_affine_parallel[i0, i1, i2, i3] }"
        child:
          schedule: "[P0, P1, P2, P3] -> [{ RS1_affine_parallel[i0, i1, i2, i3] -> [(i3)]; RS2_affine_parallel[i0, i1, i2, i3] -> [(21 + i3)]; RS0_affine_parallel[i0, i1, i2] -> [(0)] }]"
          permutable: 1
          coincident: [ 1 ]
          array_expansion: [ [ A_memref_alloca_res_10: 22, A_memref_alloca_res_7: 22, A_memref_alloca_res_4: 1 ] ]
          child:
            set:
            - filter: "[P0, P1, P2, P3] -> { RS2_affine_parallel[i0, i1, i2, i3]; RS1_affine_parallel[i0, i1, i2, i3] }"
              child:
                sequence:
                - filter: "[P0, P1, P2, P3] -> { RS2_affine_parallel[i0, i1, i2, i3] }"
                - # YOU ARE HERE
                  filter: "[P0, P1, P2, P3] -> { RS1_affine_parallel[i0, i1, i2, i3] }"
            - filter: "[P0, P1, P2, P3] -> { RS0_affine_parallel[i0, i1, i2] }"
      - filter: "[P0, P1, P2, P3] -> { RS3_affine_parallel[i0, i1, i2] }"
Building ast for schedule node:
Executed: [P0, P1, P2, P3] -> { [[[] -> [i0, i1]] -> [i2]] -> RS1_affine_parallel[o0, o1, o2, o3] : o0 = i1 and o1 = i0 and o2 = 0 and o3 = i2 and i1 >= 0 and i1 < P3 and i0 >= 0 and i0 < P2 and i2 >= 21 and 16i2 < P0 and P3 > 0 }
domain: "[P0, P1, P2, P3] -> { RS0_affine_parallel[i0, i1, 0] : 0 <= i0 < P3 and 0 <= i1 < P2; RS2_affine_parallel[i0, i1, 0, i3] : 0 <= i0 < P3 and 0 <= i1 < P2 and i3 >= 0 and 16i3 < P0; RS1_affine_parallel[i0, i1, 0, i3] : 0 <= i0 < P3 and 0 <= i1 < P2 and i3 >= 0 and 16i3 < P0; RS3_affine_parallel[i0, i1, 0] : 0 <= i0 < P3 and 0 <= i1 < P2 }"
child:
  mark: "grid_parallel"
  child:
    schedule: "[P0, P1, P2, P3] -> [{ RS1_affine_parallel[i0, i1, i2, i3] -> [(i1)]; RS2_affine_parallel[i0, i1, i2, i3] -> [(i1)]; RS3_affine_parallel[i0, i1, i2] -> [(i1)]; RS0_affine_parallel[i0, i1, i2] -> [(i1)] }, { RS1_affine_parallel[i0, i1, i2, i3] -> [(i0)]; RS2_affine_parallel[i0, i1, i2, i3] -> [(i0)]; RS3_affine_parallel[i0, i1, i2] -> [(i0)]; RS0_affine_parallel[i0, i1, i2] -> [(i0)] }]"
    permutable: 1
    coincident: [ 1, 1 ]
    array_expansion: [ [ A_memref_alloca_res_10: 1, A_memref_alloca_res_7: 1, A_memref_alloca_res_4: 1 ], [ A_memref_alloca_res_10: 1, A_memref_alloca_res_7: 1, A_memref_alloca_res_4: 1 ] ]
    child:
      sequence:
      - filter: "[P0, P1, P2, P3] -> { RS0_affine_parallel[i0, i1, i2]; RS2_affine_parallel[i0, i1, i2, i3]; RS1_affine_parallel[i0, i1, i2, i3] }"
        child:
          schedule: "[P0, P1, P2, P3] -> [{ RS1_affine_parallel[i0, i1, i2, i3] -> [(i3)]; RS2_affine_parallel[i0, i1, i2, i3] -> [(21 + i3)]; RS0_affine_parallel[i0, i1, i2] -> [(0)] }]"
          permutable: 1
          coincident: [ 1 ]
          array_expansion: [ [ A_memref_alloca_res_10: 22, A_memref_alloca_res_7: 22, A_memref_alloca_res_4: 1 ] ]
          child:
            set:
            - filter: "[P0, P1, P2, P3] -> { RS2_affine_parallel[i0, i1, i2, i3]; RS1_affine_parallel[i0, i1, i2, i3] }"
              child:
                sequence:
                - filter: "[P0, P1, P2, P3] -> { RS2_affine_parallel[i0, i1, i2, i3] }"
                - filter: "[P0, P1, P2, P3] -> { RS1_affine_parallel[i0, i1, i2, i3] }"
                  child:
                    # YOU ARE HERE
                    leaf
            - filter: "[P0, P1, P2, P3] -> { RS0_affine_parallel[i0, i1, i2] }"
      - filter: "[P0, P1, P2, P3] -> { RS3_affine_parallel[i0, i1, i2] }"
We have reached a schedule wtih executed:
[P0, P1, P2, P3] -> { [[[] -> [i0, i1]] -> [i2]] -> RS1_affine_parallel[o0, o1, o2, o3] : o0 = i1 and o1 = i0 and o2 = 0 and o3 = i2 and i1 >= 0 and i1 < P3 and i0 >= 0 and i0 < P2 and i2 >= 21 and 16i2 < P0 and P3 > 0 }
Generating domain for:
[P0, P1, P2, P3] -> { [[[] -> [i0, i1]] -> [i2]] -> RS1_affine_parallel[o0, o1, o2, o3] : o0 = i1 and o1 = i0 and o2 = 0 and o3 = i2 and i1 >= 0 and i1 < P3 and i0 >= 0 and i0 < P2 and i2 >= 21 and 16i2 < P0 and P3 > 0 }

Building call from executed:
[P0, P1, P2, P3] -> { [[[] -> [i0, i1]] -> [i2]] -> RS1_affine_parallel[o0, o1, o2, o3] : o0 = i1 and o1 = i0 and o2 = 0 and o3 = i2 and i1 >= 0 and i1 < P3 and i0 >= 0 and i0 < P2 and i2 >= 21 and 16i2 < P0 and P3 > 0 }
BEFORE
[P0, P1, P2, P3] -> { [[[] -> [i0, i1]] -> [i2]] -> [A_memref_alloca_res_7[o0, o1, o2] -> RS1_affine_parallel[]] : exists (e0 = floor((1 - i2 + o2)/22): o0 = 0 and o1 = 0 and 22e0 = 1 - i2 + o2 and o2 >= 0 and o2 <= 21) }
PROJECTED OUT
[P0, P1, P2, P3] -> { [[[] -> [i0, i1]] -> [i2]] -> A_memref_alloca_res_7[o0, o1, o2] : exists (e0 = floor((1 - i2 + o2)/22): o0 = 0 and o1 = 0 and 22e0 = 1 - i2 + o2 and o2 >= 0 and o2 <= 21) }
Building call from executed:
[P0, P1, P2, P3] -> { [[[] -> [i0, i1]] -> [i2]] -> A_memref_alloca_res_7[o0, o1, o2] : exists (e0 = floor((1 - i2 + o2)/22): o0 = 0 and o1 = 0 and 22e0 = 1 - i2 + o2 and o2 >= 0 and o2 <= 21) }
BEFORE
[P0, P1, P2, P3] -> { [[[] -> [i0, i1]] -> [i2]] -> [A_memref_alloca_res_10[o0, o1, o2] -> RS1_affine_parallel[]] : exists (e0 = floor((1 - i2 + o2)/22): o0 = 0 and o1 = 0 and 22e0 = 1 - i2 + o2 and o2 >= 0 and o2 <= 21) }
PROJECTED OUT
[P0, P1, P2, P3] -> { [[[] -> [i0, i1]] -> [i2]] -> A_memref_alloca_res_10[o0, o1, o2] : exists (e0 = floor((1 - i2 + o2)/22): o0 = 0 and o1 = 0 and 22e0 = 1 - i2 + o2 and o2 >= 0 and o2 <= 21) }
Building call from executed:
[P0, P1, P2, P3] -> { [[[] -> [i0, i1]] -> [i2]] -> A_memref_alloca_res_10[o0, o1, o2] : exists (e0 = floor((1 - i2 + o2)/22): o0 = 0 and o1 = 0 and 22e0 = 1 - i2 + o2 and o2 >= 0 and o2 <= 21) }
TODO use the executed_ea
[P0, P1, P2, P3] -> { [[[] -> [i0, i1]] -> [i2]] -> [A_memref_alloca_res_10[o0, o1, o2] -> RS2_affine_parallel[]] : exists (e0 = floor((1 - i2 + o2)/22): o0 = 0 and o1 = 0 and 22e0 = 1 - i2 + o2 and o2 >= 0 and o2 <= 21); [[[] -> [i0, i1]] -> [i2]] -> [A_memref_alloca_res_4[o0, o1, o2] -> RS2_affine_parallel[]] : o0 = 0 and o1 = 0 and o2 = 0; [[[] -> [i0, i1]] -> [i2]] -> [A_memref_alloca_res_7[o0, o1, o2] -> RS2_affine_parallel[]] : exists (e0 = floor((1 - i2 + o2)/22): o0 = 0 and o1 = 0 and 22e0 = 1 - i2 + o2 and o2 >= 0 and o2 <= 21); [[[] -> [i0, i1]] -> [i2]] -> [A_memref_alloca_res_7[o0, o1, o2] -> RS1_affine_parallel[]] : exists (e0 = floor((1 - i2 + o2)/22): o0 = 0 and o1 = 0 and 22e0 = 1 - i2 + o2 and o2 >= 0 and o2 <= 21); [[[] -> [i0, i1]] -> [i2]] -> [A_memref_alloca_res_10[o0, o1, o2] -> RS1_affine_parallel[]] : exists (e0 = floor((1 - i2 + o2)/22): o0 = 0 and o1 = 0 and 22e0 = 1 - i2 + o2 and o2 >= 0 and o2 <= 21) }
Generated graft for user:
user:
  op: call
  args:
  - id: RS1_affine_parallel@0x46988f10
  - id: c1
  - id: c0
  - val: 0
  - id: c2
  - op: call
    args:
    - id: A_memref_alloca_res_7@0x469c6770
    - val: 0
    - val: 0
    - op: pdiv_r
      args:
      - op: sub
        args:
        - id: c2
        - val: 1
      - val: 22
  - op: call
    args:
    - id: A_memref_alloca_res_10@0x46985f80
    - val: 0
    - val: 0
    - op: pdiv_r
      args:
      - op: sub
        args:
        - id: c2
        - val: 1
      - val: 22

Building ast for schedule node:
Executed: [P0, P1, P2, P3] -> { [[[] -> [i0, i1]] -> [i2]] -> RS2_affine_parallel[o0, o1, o2, o3] : o0 = i1 and o1 = i0 and o2 = 0 and o3 = -21 + i2 and i1 >= 0 and i1 < P3 and i0 >= 0 and i0 < P2 and i2 >= 21 and 16i2 <= 335 + P0 and P3 > 0; [[[] -> [i0, i1]] -> [i2]] -> RS1_affine_parallel[o0, o1, o2, o3] : o0 = i1 and o1 = i0 and o2 = 0 and o3 = i2 and i1 >= 0 and i1 < P3 and i0 >= 0 and i0 < P2 and i2 >= 21 and 16i2 < P0 and P3 > 0 }
domain: "[P0, P1, P2, P3] -> { RS0_affine_parallel[i0, i1, 0] : 0 <= i0 < P3 and 0 <= i1 < P2; RS2_affine_parallel[i0, i1, 0, i3] : 0 <= i0 < P3 and 0 <= i1 < P2 and i3 >= 0 and 16i3 < P0; RS1_affine_parallel[i0, i1, 0, i3] : 0 <= i0 < P3 and 0 <= i1 < P2 and i3 >= 0 and 16i3 < P0; RS3_affine_parallel[i0, i1, 0] : 0 <= i0 < P3 and 0 <= i1 < P2 }"
child:
  mark: "grid_parallel"
  child:
    schedule: "[P0, P1, P2, P3] -> [{ RS1_affine_parallel[i0, i1, i2, i3] -> [(i1)]; RS2_affine_parallel[i0, i1, i2, i3] -> [(i1)]; RS3_affine_parallel[i0, i1, i2] -> [(i1)]; RS0_affine_parallel[i0, i1, i2] -> [(i1)] }, { RS1_affine_parallel[i0, i1, i2, i3] -> [(i0)]; RS2_affine_parallel[i0, i1, i2, i3] -> [(i0)]; RS3_affine_parallel[i0, i1, i2] -> [(i0)]; RS0_affine_parallel[i0, i1, i2] -> [(i0)] }]"
    permutable: 1
    coincident: [ 1, 1 ]
    array_expansion: [ [ A_memref_alloca_res_10: 1, A_memref_alloca_res_7: 1, A_memref_alloca_res_4: 1 ], [ A_memref_alloca_res_10: 1, A_memref_alloca_res_7: 1, A_memref_alloca_res_4: 1 ] ]
    child:
      sequence:
      - filter: "[P0, P1, P2, P3] -> { RS0_affine_parallel[i0, i1, i2]; RS2_affine_parallel[i0, i1, i2, i3]; RS1_affine_parallel[i0, i1, i2, i3] }"
        child:
          schedule: "[P0, P1, P2, P3] -> [{ RS1_affine_parallel[i0, i1, i2, i3] -> [(i3)]; RS2_affine_parallel[i0, i1, i2, i3] -> [(21 + i3)]; RS0_affine_parallel[i0, i1, i2] -> [(0)] }]"
          permutable: 1
          coincident: [ 1 ]
          array_expansion: [ [ A_memref_alloca_res_10: 22, A_memref_alloca_res_7: 22, A_memref_alloca_res_4: 1 ] ]
          child:
            set:
            - filter: "[P0, P1, P2, P3] -> { RS2_affine_parallel[i0, i1, i2, i3]; RS1_affine_parallel[i0, i1, i2, i3] }"
              child:
                sequence:
                - filter: "[P0, P1, P2, P3] -> { RS2_affine_parallel[i0, i1, i2, i3] }"
                - filter: "[P0, P1, P2, P3] -> { RS1_affine_parallel[i0, i1, i2, i3] }"
            - # YOU ARE HERE
              filter: "[P0, P1, P2, P3] -> { RS0_affine_parallel[i0, i1, i2] }"
      - filter: "[P0, P1, P2, P3] -> { RS3_affine_parallel[i0, i1, i2] }"
Generated graft for band:
iterator:
  id: c2
init:
  val: 21
cond:
  op: le
  args:
  - id: c2
  - op: add
    args:
    - op: fdiv_q
      args:
      - op: sub
        args:
        - id: P0@0x46974500
        - val: 1
      - val: 16
    - val: 21
inc:
  val: 1
body:
- user:
    op: call
    args:
    - id: RS2_affine_parallel@0x46998260
    - id: c1
    - id: c0
    - val: 0
    - op: sub
      args:
      - id: c2
      - val: 21
    - op: call
      args:
      - id: A_memref_alloca_res_4@0x469c72c0
      - val: 0
      - val: 0
      - val: 0
    - op: call
      args:
      - id: A_memref_alloca_res_7@0x469c6770
      - val: 0
      - val: 0
      - op: pdiv_r
        args:
        - op: sub
          args:
          - id: c2
          - val: 1
        - val: 22
    - op: call
      args:
      - id: A_memref_alloca_res_10@0x46985f80
      - val: 0
      - val: 0
      - op: pdiv_r
        args:
        - op: sub
          args:
          - id: c2
          - val: 1
        - val: 22
- guard:
    op: ge
    args:
    - id: P0@0x46974500
    - op: add
      args:
      - op: mul
        args:
        - val: 16
        - id: c2
      - val: 1
  then:
    user:
      op: call
      args:
      - id: RS1_affine_parallel@0x46988f10
      - id: c1
      - id: c0
      - val: 0
      - id: c2
      - op: call
        args:
        - id: A_memref_alloca_res_7@0x469c6770
        - val: 0
        - val: 0
        - op: pdiv_r
          args:
          - op: sub
            args:
            - id: c2
            - val: 1
          - val: 22
      - op: call
        args:
        - id: A_memref_alloca_res_10@0x46985f80
        - val: 0
        - val: 0
        - op: pdiv_r
          args:
          - op: sub
            args:
            - id: c2
            - val: 1
          - val: 22
[P0, P1, P2, P3] -> { [[[] -> [i0, i1]] -> [i2]] : P0 > 0 }
[P0, P1, P2, P3] -> { [[[] -> [i0, i1]] -> [i2]] }
graft for band end

Building ast for schedule node:
Executed: [P0, P1, P2, P3] -> { [[] -> [i0, i1]] -> RS1_affine_parallel[o0, o1, o2, o3] : o0 = i1 and o1 = i0 and o2 = 0 and i1 >= 0 and i1 < P3 and i0 >= 0 and i0 < P2 and o3 >= 0 and 16o3 < P0 and P3 > 0; [[] -> [i0, i1]] -> RS2_affine_parallel[o0, o1, o2, o3] : o0 = i1 and o1 = i0 and o2 = 0 and i1 >= 0 and i1 < P3 and i0 >= 0 and i0 < P2 and o3 >= 0 and 16o3 < P0 and P3 > 0; [[] -> [i0, i1]] -> RS0_affine_parallel[o0, o1, o2] : o0 = i1 and o1 = i0 and o2 = 0 and i1 >= 0 and i1 < P3 and i0 >= 0 and i0 < P2 and P3 > 0; [[] -> [i0, i1]] -> RS3_affine_parallel[o0, o1, o2] : o0 = i1 and o1 = i0 and o2 = 0 and i1 >= 0 and i1 < P3 and i0 >= 0 and i0 < P2 and P3 > 0 }
domain: "[P0, P1, P2, P3] -> { RS0_affine_parallel[i0, i1, 0] : 0 <= i0 < P3 and 0 <= i1 < P2; RS2_affine_parallel[i0, i1, 0, i3] : 0 <= i0 < P3 and 0 <= i1 < P2 and i3 >= 0 and 16i3 < P0; RS1_affine_parallel[i0, i1, 0, i3] : 0 <= i0 < P3 and 0 <= i1 < P2 and i3 >= 0 and 16i3 < P0; RS3_affine_parallel[i0, i1, 0] : 0 <= i0 < P3 and 0 <= i1 < P2 }"
child:
  mark: "grid_parallel"
  child:
    schedule: "[P0, P1, P2, P3] -> [{ RS1_affine_parallel[i0, i1, i2, i3] -> [(i1)]; RS2_affine_parallel[i0, i1, i2, i3] -> [(i1)]; RS3_affine_parallel[i0, i1, i2] -> [(i1)]; RS0_affine_parallel[i0, i1, i2] -> [(i1)] }, { RS1_affine_parallel[i0, i1, i2, i3] -> [(i0)]; RS2_affine_parallel[i0, i1, i2, i3] -> [(i0)]; RS3_affine_parallel[i0, i1, i2] -> [(i0)]; RS0_affine_parallel[i0, i1, i2] -> [(i0)] }]"
    permutable: 1
    coincident: [ 1, 1 ]
    array_expansion: [ [ A_memref_alloca_res_10: 1, A_memref_alloca_res_7: 1, A_memref_alloca_res_4: 1 ], [ A_memref_alloca_res_10: 1, A_memref_alloca_res_7: 1, A_memref_alloca_res_4: 1 ] ]
    child:
      sequence:
      - filter: "[P0, P1, P2, P3] -> { RS0_affine_parallel[i0, i1, i2]; RS2_affine_parallel[i0, i1, i2, i3]; RS1_affine_parallel[i0, i1, i2, i3] }"
        child:
          schedule: "[P0, P1, P2, P3] -> [{ RS1_affine_parallel[i0, i1, i2, i3] -> [(i3)]; RS2_affine_parallel[i0, i1, i2, i3] -> [(21 + i3)]; RS0_affine_parallel[i0, i1, i2] -> [(0)] }]"
          permutable: 1
          coincident: [ 1 ]
          array_expansion: [ [ A_memref_alloca_res_10: 22, A_memref_alloca_res_7: 22, A_memref_alloca_res_4: 1 ] ]
          child:
            set:
            - filter: "[P0, P1, P2, P3] -> { RS2_affine_parallel[i0, i1, i2, i3]; RS1_affine_parallel[i0, i1, i2, i3] }"
              child:
                sequence:
                - filter: "[P0, P1, P2, P3] -> { RS2_affine_parallel[i0, i1, i2, i3] }"
                - filter: "[P0, P1, P2, P3] -> { RS1_affine_parallel[i0, i1, i2, i3] }"
            - filter: "[P0, P1, P2, P3] -> { RS0_affine_parallel[i0, i1, i2] }"
      - # YOU ARE HERE
        filter: "[P0, P1, P2, P3] -> { RS3_affine_parallel[i0, i1, i2] }"
Building ast for schedule node:
Executed: [P0, P1, P2, P3] -> { [[] -> [i0, i1]] -> RS3_affine_parallel[o0, o1, o2] : o0 = i1 and o1 = i0 and o2 = 0 and i1 >= 0 and i1 < P3 and i0 >= 0 and i0 < P2 and P3 > 0 }
domain: "[P0, P1, P2, P3] -> { RS0_affine_parallel[i0, i1, 0] : 0 <= i0 < P3 and 0 <= i1 < P2; RS2_affine_parallel[i0, i1, 0, i3] : 0 <= i0 < P3 and 0 <= i1 < P2 and i3 >= 0 and 16i3 < P0; RS1_affine_parallel[i0, i1, 0, i3] : 0 <= i0 < P3 and 0 <= i1 < P2 and i3 >= 0 and 16i3 < P0; RS3_affine_parallel[i0, i1, 0] : 0 <= i0 < P3 and 0 <= i1 < P2 }"
child:
  mark: "grid_parallel"
  child:
    schedule: "[P0, P1, P2, P3] -> [{ RS1_affine_parallel[i0, i1, i2, i3] -> [(i1)]; RS2_affine_parallel[i0, i1, i2, i3] -> [(i1)]; RS3_affine_parallel[i0, i1, i2] -> [(i1)]; RS0_affine_parallel[i0, i1, i2] -> [(i1)] }, { RS1_affine_parallel[i0, i1, i2, i3] -> [(i0)]; RS2_affine_parallel[i0, i1, i2, i3] -> [(i0)]; RS3_affine_parallel[i0, i1, i2] -> [(i0)]; RS0_affine_parallel[i0, i1, i2] -> [(i0)] }]"
    permutable: 1
    coincident: [ 1, 1 ]
    array_expansion: [ [ A_memref_alloca_res_10: 1, A_memref_alloca_res_7: 1, A_memref_alloca_res_4: 1 ], [ A_memref_alloca_res_10: 1, A_memref_alloca_res_7: 1, A_memref_alloca_res_4: 1 ] ]
    child:
      sequence:
      - filter: "[P0, P1, P2, P3] -> { RS0_affine_parallel[i0, i1, i2]; RS2_affine_parallel[i0, i1, i2, i3]; RS1_affine_parallel[i0, i1, i2, i3] }"
        child:
          schedule: "[P0, P1, P2, P3] -> [{ RS1_affine_parallel[i0, i1, i2, i3] -> [(i3)]; RS2_affine_parallel[i0, i1, i2, i3] -> [(21 + i3)]; RS0_affine_parallel[i0, i1, i2] -> [(0)] }]"
          permutable: 1
          coincident: [ 1 ]
          array_expansion: [ [ A_memref_alloca_res_10: 22, A_memref_alloca_res_7: 22, A_memref_alloca_res_4: 1 ] ]
          child:
            set:
            - filter: "[P0, P1, P2, P3] -> { RS2_affine_parallel[i0, i1, i2, i3]; RS1_affine_parallel[i0, i1, i2, i3] }"
              child:
                sequence:
                - filter: "[P0, P1, P2, P3] -> { RS2_affine_parallel[i0, i1, i2, i3] }"
                - filter: "[P0, P1, P2, P3] -> { RS1_affine_parallel[i0, i1, i2, i3] }"
            - filter: "[P0, P1, P2, P3] -> { RS0_affine_parallel[i0, i1, i2] }"
      - filter: "[P0, P1, P2, P3] -> { RS3_affine_parallel[i0, i1, i2] }"
        child:
          # YOU ARE HERE
          leaf
We have reached a schedule wtih executed:
[P0, P1, P2, P3] -> { [[] -> [i0, i1]] -> RS3_affine_parallel[o0, o1, o2] : o0 = i1 and o1 = i0 and o2 = 0 and i1 >= 0 and i1 < P3 and i0 >= 0 and i0 < P2 and P3 > 0 }
Generating domain for:
[P0, P1, P2, P3] -> { [[] -> [i0, i1]] -> RS3_affine_parallel[o0, o1, o2] : o0 = i1 and o1 = i0 and o2 = 0 and i1 >= 0 and i1 < P3 and i0 >= 0 and i0 < P2 and P3 > 0 }

Building call from executed:
[P0, P1, P2, P3] -> { [[] -> [i0, i1]] -> RS3_affine_parallel[o0, o1, o2] : o0 = i1 and o1 = i0 and o2 = 0 and i1 >= 0 and i1 < P3 and i0 >= 0 and i0 < P2 and P3 > 0 }
BEFORE
[P0, P1, P2, P3] -> { [[] -> [i0, i1]] -> [A_memref_alloca_res_4[o0, o1] -> RS3_affine_parallel[]] : o0 = 0 and o1 = 0 }
PROJECTED OUT
[P0, P1, P2, P3] -> { [[] -> [i0, i1]] -> A_memref_alloca_res_4[o0, o1] : o0 = 0 and o1 = 0 }
Building call from executed:
[P0, P1, P2, P3] -> { [[] -> [i0, i1]] -> A_memref_alloca_res_4[o0, o1] : o0 = 0 and o1 = 0 }
TODO use the executed_ea
[P0, P1, P2, P3] -> { [[] -> [i0, i1]] -> [A_memref_alloca_res_7[o0, o1] -> RS1_affine_parallel[]] : o0 = 0 and o1 = 0; [[] -> [i0, i1]] -> [A_memref_alloca_res_4[o0, o1] -> RS2_affine_parallel[]] : o0 = 0 and o1 = 0; [[] -> [i0, i1]] -> [A_memref_alloca_res_4[o0, o1] -> RS0_affine_parallel[]] : o0 = 0 and o1 = 0; [[] -> [i0, i1]] -> [A_memref_alloca_res_10[o0, o1] -> RS2_affine_parallel[]] : o0 = 0 and o1 = 0; [[] -> [i0, i1]] -> [A_memref_alloca_res_4[o0, o1] -> RS3_affine_parallel[]] : o0 = 0 and o1 = 0; [[] -> [i0, i1]] -> [A_memref_alloca_res_7[o0, o1] -> RS2_affine_parallel[]] : o0 = 0 and o1 = 0; [[] -> [i0, i1]] -> [A_memref_alloca_res_10[o0, o1] -> RS1_affine_parallel[]] : o0 = 0 and o1 = 0 }
Generated graft for user:
user:
  op: call
  args:
  - id: RS3_affine_parallel@0x4699ff70
  - id: c1
  - id: c0
  - val: 0
  - op: call
    args:
    - id: A_memref_alloca_res_4@0x469c72c0
    - val: 0
    - val: 0

Generated graft for band:
iterator:
  id: c1
init:
  val: 0
cond:
  op: lt
  args:
  - id: c1
  - id: P3@0x4698d660
inc:
  val: 1
body:
- 
  - user:
      op: call
      args:
      - id: RS0_affine_parallel@0x4699ea60
      - id: c1
      - id: c0
      - val: 0
      - op: call
        args:
        - id: A_memref_alloca_res_4@0x469c72c0
        - val: 0
        - val: 0
        - val: 0
  - iterator:
      id: c2
    init:
      val: 0
    cond:
      op: le
      args:
      - id: c2
      - op: min
        args:
        - val: 20
        - op: fdiv_q
          args:
          - op: sub
            args:
            - id: P0@0x46974500
            - val: 1
          - val: 16
    inc:
      val: 1
    body:
      user:
        op: call
        args:
        - id: RS1_affine_parallel@0x46988f10
        - id: c1
        - id: c0
        - val: 0
        - id: c2
        - op: call
          args:
          - id: A_memref_alloca_res_7@0x469c6770
          - val: 0
          - val: 0
          - op: pdiv_r
            args:
            - op: add
              args:
              - id: c2
              - val: 21
            - val: 22
        - op: call
          args:
          - id: A_memref_alloca_res_10@0x46985f80
          - val: 0
          - val: 0
          - op: pdiv_r
            args:
            - op: add
              args:
              - id: c2
              - val: 21
            - val: 22
- iterator:
    id: c2
  init:
    val: 21
  cond:
    op: le
    args:
    - id: c2
    - op: add
      args:
      - op: fdiv_q
        args:
        - op: sub
          args:
          - id: P0@0x46974500
          - val: 1
        - val: 16
      - val: 21
  inc:
    val: 1
  body:
  - user:
      op: call
      args:
      - id: RS2_affine_parallel@0x46998260
      - id: c1
      - id: c0
      - val: 0
      - op: sub
        args:
        - id: c2
        - val: 21
      - op: call
        args:
        - id: A_memref_alloca_res_4@0x469c72c0
        - val: 0
        - val: 0
        - val: 0
      - op: call
        args:
        - id: A_memref_alloca_res_7@0x469c6770
        - val: 0
        - val: 0
        - op: pdiv_r
          args:
          - op: sub
            args:
            - id: c2
            - val: 1
          - val: 22
      - op: call
        args:
        - id: A_memref_alloca_res_10@0x46985f80
        - val: 0
        - val: 0
        - op: pdiv_r
          args:
          - op: sub
            args:
            - id: c2
            - val: 1
          - val: 22
  - guard:
      op: ge
      args:
      - id: P0@0x46974500
      - op: add
        args:
        - op: mul
          args:
          - val: 16
          - id: c2
        - val: 1
    then:
      user:
        op: call
        args:
        - id: RS1_affine_parallel@0x46988f10
        - id: c1
        - id: c0
        - val: 0
        - id: c2
        - op: call
          args:
          - id: A_memref_alloca_res_7@0x469c6770
          - val: 0
          - val: 0
          - op: pdiv_r
            args:
            - op: sub
              args:
              - id: c2
              - val: 1
            - val: 22
        - op: call
          args:
          - id: A_memref_alloca_res_10@0x46985f80
          - val: 0
          - val: 0
          - op: pdiv_r
            args:
            - op: sub
              args:
              - id: c2
              - val: 1
            - val: 22
- user:
    op: call
    args:
    - id: RS3_affine_parallel@0x4699ff70
    - id: c1
    - id: c0
    - val: 0
    - op: call
      args:
      - id: A_memref_alloca_res_4@0x469c72c0
      - val: 0
      - val: 0
[P0, P1, P2, P3] -> { [[] -> [i0, i1]] : P3 > 0 }
[P0, P1, P2, P3] -> { [[] -> [i0, i1]] }
graft for band end

Generated graft for band:
iterator:
  id: c0
init:
  val: 0
cond:
  op: lt
  args:
  - id: c0
  - id: P2@0x4698d570
inc:
  val: 1
body:
  iterator:
    id: c1
  init:
    val: 0
  cond:
    op: lt
    args:
    - id: c1
    - id: P3@0x4698d660
  inc:
    val: 1
  body:
  - 
    - user:
        op: call
        args:
        - id: RS0_affine_parallel@0x4699ea60
        - id: c1
        - id: c0
        - val: 0
        - op: call
          args:
          - id: A_memref_alloca_res_4@0x469c72c0
          - val: 0
          - val: 0
          - val: 0
    - iterator:
        id: c2
      init:
        val: 0
      cond:
        op: le
        args:
        - id: c2
        - op: min
          args:
          - val: 20
          - op: fdiv_q
            args:
            - op: sub
              args:
              - id: P0@0x46974500
              - val: 1
            - val: 16
      inc:
        val: 1
      body:
        user:
          op: call
          args:
          - id: RS1_affine_parallel@0x46988f10
          - id: c1
          - id: c0
          - val: 0
          - id: c2
          - op: call
            args:
            - id: A_memref_alloca_res_7@0x469c6770
            - val: 0
            - val: 0
            - op: pdiv_r
              args:
              - op: add
                args:
                - id: c2
                - val: 21
              - val: 22
          - op: call
            args:
            - id: A_memref_alloca_res_10@0x46985f80
            - val: 0
            - val: 0
            - op: pdiv_r
              args:
              - op: add
                args:
                - id: c2
                - val: 21
              - val: 22
  - iterator:
      id: c2
    init:
      val: 21
    cond:
      op: le
      args:
      - id: c2
      - op: add
        args:
        - op: fdiv_q
          args:
          - op: sub
            args:
            - id: P0@0x46974500
            - val: 1
          - val: 16
        - val: 21
    inc:
      val: 1
    body:
    - user:
        op: call
        args:
        - id: RS2_affine_parallel@0x46998260
        - id: c1
        - id: c0
        - val: 0
        - op: sub
          args:
          - id: c2
          - val: 21
        - op: call
          args:
          - id: A_memref_alloca_res_4@0x469c72c0
          - val: 0
          - val: 0
          - val: 0
        - op: call
          args:
          - id: A_memref_alloca_res_7@0x469c6770
          - val: 0
          - val: 0
          - op: pdiv_r
            args:
            - op: sub
              args:
              - id: c2
              - val: 1
            - val: 22
        - op: call
          args:
          - id: A_memref_alloca_res_10@0x46985f80
          - val: 0
          - val: 0
          - op: pdiv_r
            args:
            - op: sub
              args:
              - id: c2
              - val: 1
            - val: 22
    - guard:
        op: ge
        args:
        - id: P0@0x46974500
        - op: add
          args:
          - op: mul
            args:
            - val: 16
            - id: c2
          - val: 1
      then:
        user:
          op: call
          args:
          - id: RS1_affine_parallel@0x46988f10
          - id: c1
          - id: c0
          - val: 0
          - id: c2
          - op: call
            args:
            - id: A_memref_alloca_res_7@0x469c6770
            - val: 0
            - val: 0
            - op: pdiv_r
              args:
              - op: sub
                args:
                - id: c2
                - val: 1
              - val: 22
          - op: call
            args:
            - id: A_memref_alloca_res_10@0x46985f80
            - val: 0
            - val: 0
            - op: pdiv_r
              args:
              - op: sub
                args:
                - id: c2
                - val: 1
              - val: 22
  - user:
      op: call
      args:
      - id: RS3_affine_parallel@0x4699ff70
      - id: c1
      - id: c0
      - val: 0
      - op: call
        args:
        - id: A_memref_alloca_res_4@0x469c72c0
        - val: 0
        - val: 0
[P0, P1, P2, P3] -> { [[] -> [i0, i1]] : P3 > 0 and P2 > 0 }
[P0, P1, P2, P3] -> { [[] -> [i0, i1]] }
graft for band end

New AST:
mark: grid_parallel@0x2
node:
  iterator:
    id: c0
  init:
    val: 0
  cond:
    op: lt
    args:
    - id: c0
    - id: P2@0x4698d570
  inc:
    val: 1
  body:
    iterator:
      id: c1
    init:
      val: 0
    cond:
      op: lt
      args:
      - id: c1
      - id: P3@0x4698d660
    inc:
      val: 1
    body:
    - 
      - user:
          op: call
          args:
          - id: RS0_affine_parallel@0x4699ea60
          - id: c1
          - id: c0
          - val: 0
          - op: call
            args:
            - id: A_memref_alloca_res_4@0x469c72c0
            - val: 0
            - val: 0
            - val: 0
      - iterator:
          id: c2
        init:
          val: 0
        cond:
          op: le
          args:
          - id: c2
          - op: min
            args:
            - val: 20
            - op: fdiv_q
              args:
              - op: sub
                args:
                - id: P0@0x46974500
                - val: 1
              - val: 16
        inc:
          val: 1
        body:
          user:
            op: call
            args:
            - id: RS1_affine_parallel@0x46988f10
            - id: c1
            - id: c0
            - val: 0
            - id: c2
            - op: call
              args:
              - id: A_memref_alloca_res_7@0x469c6770
              - val: 0
              - val: 0
              - op: pdiv_r
                args:
                - op: add
                  args:
                  - id: c2
                  - val: 21
                - val: 22
            - op: call
              args:
              - id: A_memref_alloca_res_10@0x46985f80
              - val: 0
              - val: 0
              - op: pdiv_r
                args:
                - op: add
                  args:
                  - id: c2
                  - val: 21
                - val: 22
    - iterator:
        id: c2
      init:
        val: 21
      cond:
        op: le
        args:
        - id: c2
        - op: add
          args:
          - op: fdiv_q
            args:
            - op: sub
              args:
              - id: P0@0x46974500
              - val: 1
            - val: 16
          - val: 21
      inc:
        val: 1
      body:
      - user:
          op: call
          args:
          - id: RS2_affine_parallel@0x46998260
          - id: c1
          - id: c0
          - val: 0
          - op: sub
            args:
            - id: c2
            - val: 21
          - op: call
            args:
            - id: A_memref_alloca_res_4@0x469c72c0
            - val: 0
            - val: 0
            - val: 0
          - op: call
            args:
            - id: A_memref_alloca_res_7@0x469c6770
            - val: 0
            - val: 0
            - op: pdiv_r
              args:
              - op: sub
                args:
                - id: c2
                - val: 1
              - val: 22
          - op: call
            args:
            - id: A_memref_alloca_res_10@0x46985f80
            - val: 0
            - val: 0
            - op: pdiv_r
              args:
              - op: sub
                args:
                - id: c2
                - val: 1
              - val: 22
      - guard:
          op: ge
          args:
          - id: P0@0x46974500
          - op: add
            args:
            - op: mul
              args:
              - val: 16
              - id: c2
            - val: 1
        then:
          user:
            op: call
            args:
            - id: RS1_affine_parallel@0x46988f10
            - id: c1
            - id: c0
            - val: 0
            - id: c2
            - op: call
              args:
              - id: A_memref_alloca_res_7@0x469c6770
              - val: 0
              - val: 0
              - op: pdiv_r
                args:
                - op: sub
                  args:
                  - id: c2
                  - val: 1
                - val: 22
            - op: call
              args:
              - id: A_memref_alloca_res_10@0x46985f80
              - val: 0
              - val: 0
              - op: pdiv_r
                args:
                - op: sub
                  args:
                  - id: c2
                  - val: 1
                - val: 22
    - user:
        op: call
        args:
        - id: RS3_affine_parallel@0x4699ff70
        - id: c1
        - id: c0
        - val: 0
        - op: call
          args:
          - id: A_memref_alloca_res_4@0x469c72c0
          - val: 0
          - val: 0
expanded_array:
[P0, P1, P2, P3] -> { [A_memref_alloca_res_7[] -> RS2_affine_parallel[]]; [A_memref_alloca_res_4[] -> RS3_affine_parallel[]]; [A_memref_alloca_res_10[] -> RS2_affine_parallel[]]; [A_memref_alloca_res_4[] -> RS0_affine_parallel[]]; [A_memref_alloca_res_7[] -> RS1_affine_parallel[]]; [A_memref_alloca_res_4[] -> RS2_affine_parallel[]]; [A_memref_alloca_res_10[] -> RS1_affine_parallel[]] }
Initial executed_ea:
[P0, P1, P2, P3] -> { [] -> [A_memref_alloca_res_7[] -> RS2_affine_parallel[]]; [] -> [A_memref_alloca_res_4[] -> RS3_affine_parallel[]]; [] -> [A_memref_alloca_res_10[] -> RS2_affine_parallel[]]; [] -> [A_memref_alloca_res_4[] -> RS0_affine_parallel[]]; [] -> [A_memref_alloca_res_7[] -> RS1_affine_parallel[]]; [] -> [A_memref_alloca_res_4[] -> RS2_affine_parallel[]]; [] -> [A_memref_alloca_res_10[] -> RS1_affine_parallel[]] }
Initial executed:
[P0, P1, P2, P3] -> { [] -> RS2_affine_parallel[o0, o1, o2, o3] : o2 = 0 and o0 >= 0 and o0 < P3 and o1 >= 0 and o1 < P2 and o3 >= 0 and 16o3 < P0; [] -> RS0_affine_parallel[o0, o1, o2] : o2 = 0 and o0 >= 0 and o0 < P3 and o1 >= 0 and o1 < P2; [] -> RS1_affine_parallel[o0, o1, o2, o3] : o2 = 0 and o0 >= 0 and o0 < P3 and o1 >= 0 and o1 < P2 and o3 >= 0 and 16o3 < P0; [] -> RS3_affine_parallel[o0, o1, o2] : o2 = 0 and o0 >= 0 and o0 < P3 and o1 >= 0 and o1 < P2 }
Building ast for schedule node:
Executed: [P0, P1, P2, P3] -> { [] -> RS2_affine_parallel[o0, o1, o2, o3] : o2 = 0 and o0 >= 0 and o0 < P3 and o1 >= 0 and o1 < P2 and o3 >= 0 and 16o3 < P0; [] -> RS0_affine_parallel[o0, o1, o2] : o2 = 0 and o0 >= 0 and o0 < P3 and o1 >= 0 and o1 < P2; [] -> RS1_affine_parallel[o0, o1, o2, o3] : o2 = 0 and o0 >= 0 and o0 < P3 and o1 >= 0 and o1 < P2 and o3 >= 0 and 16o3 < P0; [] -> RS3_affine_parallel[o0, o1, o2] : o2 = 0 and o0 >= 0 and o0 < P3 and o1 >= 0 and o1 < P2 }
domain: "[P0, P1, P2, P3] -> { RS0_affine_parallel[i0, i1, 0] : 0 <= i0 < P3 and 0 <= i1 < P2; RS2_affine_parallel[i0, i1, 0, i3] : 0 <= i0 < P3 and 0 <= i1 < P2 and i3 >= 0 and 16i3 < P0; RS1_affine_parallel[i0, i1, 0, i3] : 0 <= i0 < P3 and 0 <= i1 < P2 and i3 >= 0 and 16i3 < P0; RS3_affine_parallel[i0, i1, 0] : 0 <= i0 < P3 and 0 <= i1 < P2 }"
child:
  # YOU ARE HERE
  mark: "grid_parallel"
  child:
    schedule: "[P0, P1, P2, P3] -> [{ RS1_affine_parallel[i0, i1, i2, i3] -> [(i1)]; RS2_affine_parallel[i0, i1, i2, i3] -> [(i1)]; RS3_affine_parallel[i0, i1, i2] -> [(i1)]; RS0_affine_parallel[i0, i1, i2] -> [(i1)] }, { RS1_affine_parallel[i0, i1, i2, i3] -> [(i0)]; RS2_affine_parallel[i0, i1, i2, i3] -> [(i0)]; RS3_affine_parallel[i0, i1, i2] -> [(i0)]; RS0_affine_parallel[i0, i1, i2] -> [(i0)] }]"
    permutable: 1
    coincident: [ 1, 1 ]
    array_expansion: [ [ A_memref_alloca_res_10: 1, A_memref_alloca_res_7: 1, A_memref_alloca_res_4: 1 ], [ A_memref_alloca_res_10: 1, A_memref_alloca_res_7: 1, A_memref_alloca_res_4: 1 ] ]
    child:
      sequence:
      - filter: "[P0, P1, P2, P3] -> { RS0_affine_parallel[i0, i1, i2]; RS2_affine_parallel[i0, i1, i2, i3]; RS1_affine_parallel[i0, i1, i2, i3] }"
        child:
          schedule: "[P0, P1, P2, P3] -> [{ RS1_affine_parallel[i0, i1, i2, i3] -> [(i3)]; RS2_affine_parallel[i0, i1, i2, i3] -> [(21 + i3)]; RS0_affine_parallel[i0, i1, i2] -> [(0)] }]"
          permutable: 1
          coincident: [ 1 ]
          array_expansion: [ [ A_memref_alloca_res_10: 22, A_memref_alloca_res_7: 22, A_memref_alloca_res_4: 1 ] ]
          child:
            set:
            - filter: "[P0, P1, P2, P3] -> { RS2_affine_parallel[i0, i1, i2, i3]; RS1_affine_parallel[i0, i1, i2, i3] }"
              child:
                sequence:
                - filter: "[P0, P1, P2, P3] -> { RS2_affine_parallel[i0, i1, i2, i3] }"
                - filter: "[P0, P1, P2, P3] -> { RS1_affine_parallel[i0, i1, i2, i3] }"
            - filter: "[P0, P1, P2, P3] -> { RS0_affine_parallel[i0, i1, i2] }"
      - filter: "[P0, P1, P2, P3] -> { RS3_affine_parallel[i0, i1, i2] }"
Building ast for schedule node:
Executed: [P0, P1, P2, P3] -> { [] -> RS2_affine_parallel[o0, o1, o2, o3] : o2 = 0 and o0 >= 0 and o0 < P3 and o1 >= 0 and o1 < P2 and o3 >= 0 and 16o3 < P0; [] -> RS0_affine_parallel[o0, o1, o2] : o2 = 0 and o0 >= 0 and o0 < P3 and o1 >= 0 and o1 < P2; [] -> RS1_affine_parallel[o0, o1, o2, o3] : o2 = 0 and o0 >= 0 and o0 < P3 and o1 >= 0 and o1 < P2 and o3 >= 0 and 16o3 < P0; [] -> RS3_affine_parallel[o0, o1, o2] : o2 = 0 and o0 >= 0 and o0 < P3 and o1 >= 0 and o1 < P2 }
domain: "[P0, P1, P2, P3] -> { RS0_affine_parallel[i0, i1, 0] : 0 <= i0 < P3 and 0 <= i1 < P2; RS2_affine_parallel[i0, i1, 0, i3] : 0 <= i0 < P3 and 0 <= i1 < P2 and i3 >= 0 and 16i3 < P0; RS1_affine_parallel[i0, i1, 0, i3] : 0 <= i0 < P3 and 0 <= i1 < P2 and i3 >= 0 and 16i3 < P0; RS3_affine_parallel[i0, i1, 0] : 0 <= i0 < P3 and 0 <= i1 < P2 }"
child:
  mark: "grid_parallel"
  child:
    # YOU ARE HERE
    schedule: "[P0, P1, P2, P3] -> [{ RS1_affine_parallel[i0, i1, i2, i3] -> [(i1)]; RS2_affine_parallel[i0, i1, i2, i3] -> [(i1)]; RS3_affine_parallel[i0, i1, i2] -> [(i1)]; RS0_affine_parallel[i0, i1, i2] -> [(i1)] }, { RS1_affine_parallel[i0, i1, i2, i3] -> [(i0)]; RS2_affine_parallel[i0, i1, i2, i3] -> [(i0)]; RS3_affine_parallel[i0, i1, i2] -> [(i0)]; RS0_affine_parallel[i0, i1, i2] -> [(i0)] }]"
    permutable: 1
    coincident: [ 1, 1 ]
    array_expansion: [ [ A_memref_alloca_res_10: 1, A_memref_alloca_res_7: 1, A_memref_alloca_res_4: 1 ], [ A_memref_alloca_res_10: 1, A_memref_alloca_res_7: 1, A_memref_alloca_res_4: 1 ] ]
    child:
      sequence:
      - filter: "[P0, P1, P2, P3] -> { RS0_affine_parallel[i0, i1, i2]; RS2_affine_parallel[i0, i1, i2, i3]; RS1_affine_parallel[i0, i1, i2, i3] }"
        child:
          schedule: "[P0, P1, P2, P3] -> [{ RS1_affine_parallel[i0, i1, i2, i3] -> [(i3)]; RS2_affine_parallel[i0, i1, i2, i3] -> [(21 + i3)]; RS0_affine_parallel[i0, i1, i2] -> [(0)] }]"
          permutable: 1
          coincident: [ 1 ]
          array_expansion: [ [ A_memref_alloca_res_10: 22, A_memref_alloca_res_7: 22, A_memref_alloca_res_4: 1 ] ]
          child:
            set:
            - filter: "[P0, P1, P2, P3] -> { RS2_affine_parallel[i0, i1, i2, i3]; RS1_affine_parallel[i0, i1, i2, i3] }"
              child:
                sequence:
                - filter: "[P0, P1, P2, P3] -> { RS2_affine_parallel[i0, i1, i2, i3] }"
                - filter: "[P0, P1, P2, P3] -> { RS1_affine_parallel[i0, i1, i2, i3] }"
            - filter: "[P0, P1, P2, P3] -> { RS0_affine_parallel[i0, i1, i2] }"
      - filter: "[P0, P1, P2, P3] -> { RS3_affine_parallel[i0, i1, i2] }"
executed: [P0, P1, P2, P3] -> { [] -> RS2_affine_parallel[o0, o1, o2, o3] : o2 = 0 and o0 >= 0 and o0 < P3 and o1 >= 0 and o1 < P2 and o3 >= 0 and 16o3 < P0; [] -> RS0_affine_parallel[o0, o1, o2] : o2 = 0 and o0 >= 0 and o0 < P3 and o1 >= 0 and o1 < P2; [] -> RS1_affine_parallel[o0, o1, o2, o3] : o2 = 0 and o0 >= 0 and o0 < P3 and o1 >= 0 and o1 < P2 and o3 >= 0 and 16o3 < P0; [] -> RS3_affine_parallel[o0, o1, o2] : o2 = 0 and o0 >= 0 and o0 < P3 and o1 >= 0 and o1 < P2 }
executed_ea: [P0, P1, P2, P3] -> { [] -> [A_memref_alloca_res_7[] -> RS2_affine_parallel[]]; [] -> [A_memref_alloca_res_4[] -> RS3_affine_parallel[]]; [] -> [A_memref_alloca_res_10[] -> RS2_affine_parallel[]]; [] -> [A_memref_alloca_res_4[] -> RS0_affine_parallel[]]; [] -> [A_memref_alloca_res_7[] -> RS1_affine_parallel[]]; [] -> [A_memref_alloca_res_4[] -> RS2_affine_parallel[]]; [] -> [A_memref_alloca_res_10[] -> RS1_affine_parallel[]] }
extra: [P0, P1, P2, P3] -> [{ RS1_affine_parallel[i0, i1, i2, i3] -> [(i1)]; RS2_affine_parallel[i0, i1, i2, i3] -> [(i1)]; RS3_affine_parallel[i0, i1, i2] -> [(i1)]; RS0_affine_parallel[i0, i1, i2] -> [(i1)] }, { RS1_affine_parallel[i0, i1, i2, i3] -> [(i0)]; RS2_affine_parallel[i0, i1, i2, i3] -> [(i0)]; RS3_affine_parallel[i0, i1, i2] -> [(i0)]; RS0_affine_parallel[i0, i1, i2] -> [(i0)] }]
extra_umap: [P0, P1, P2, P3] -> { [i0, i1] -> RS3_affine_parallel[o0, o1, o2] : o0 = i1 and o1 = i0; [i0, i1] -> RS0_affine_parallel[o0, o1, o2] : o0 = i1 and o1 = i0; [i0, i1] -> RS2_affine_parallel[o0, o1, o2, o3] : o0 = i1 and o1 = i0; [i0, i1] -> RS1_affine_parallel[o0, o1, o2, o3] : o0 = i1 and o1 = i0 }
ADD_ARRAY_DIMS
[P0, P1, P2, P3] -> { A_memref_alloca_res_7[] -> A_memref_alloca_res_7[o0, o1] }
[P0, P1, P2, P3] -> { RS2_affine_parallel[] -> RS2_affine_parallel[] }
[P0, P1, P2, P3] -> { [A_memref_alloca_res_7[] -> RS2_affine_parallel[]] -> [A_memref_alloca_res_7[o0, o1] -> RS2_affine_parallel[]] }
[P0, P1, P2, P3] -> { [] -> [A_memref_alloca_res_7[o0, o1] -> RS2_affine_parallel[]] }
ADD_ARRAY_DIMS
[P0, P1, P2, P3] -> { A_memref_alloca_res_4[] -> A_memref_alloca_res_4[o0, o1] }
[P0, P1, P2, P3] -> { RS3_affine_parallel[] -> RS3_affine_parallel[] }
[P0, P1, P2, P3] -> { [A_memref_alloca_res_4[] -> RS3_affine_parallel[]] -> [A_memref_alloca_res_4[o0, o1] -> RS3_affine_parallel[]] }
[P0, P1, P2, P3] -> { [] -> [A_memref_alloca_res_4[o0, o1] -> RS3_affine_parallel[]] }
ADD_ARRAY_DIMS
[P0, P1, P2, P3] -> { A_memref_alloca_res_10[] -> A_memref_alloca_res_10[o0, o1] }
[P0, P1, P2, P3] -> { RS2_affine_parallel[] -> RS2_affine_parallel[] }
[P0, P1, P2, P3] -> { [A_memref_alloca_res_10[] -> RS2_affine_parallel[]] -> [A_memref_alloca_res_10[o0, o1] -> RS2_affine_parallel[]] }
[P0, P1, P2, P3] -> { [] -> [A_memref_alloca_res_10[o0, o1] -> RS2_affine_parallel[]] }
ADD_ARRAY_DIMS
[P0, P1, P2, P3] -> { A_memref_alloca_res_4[] -> A_memref_alloca_res_4[o0, o1] }
[P0, P1, P2, P3] -> { RS0_affine_parallel[] -> RS0_affine_parallel[] }
[P0, P1, P2, P3] -> { [A_memref_alloca_res_4[] -> RS0_affine_parallel[]] -> [A_memref_alloca_res_4[o0, o1] -> RS0_affine_parallel[]] }
[P0, P1, P2, P3] -> { [] -> [A_memref_alloca_res_4[o0, o1] -> RS0_affine_parallel[]] }
ADD_ARRAY_DIMS
[P0, P1, P2, P3] -> { A_memref_alloca_res_7[] -> A_memref_alloca_res_7[o0, o1] }
[P0, P1, P2, P3] -> { RS1_affine_parallel[] -> RS1_affine_parallel[] }
[P0, P1, P2, P3] -> { [A_memref_alloca_res_7[] -> RS1_affine_parallel[]] -> [A_memref_alloca_res_7[o0, o1] -> RS1_affine_parallel[]] }
[P0, P1, P2, P3] -> { [] -> [A_memref_alloca_res_7[o0, o1] -> RS1_affine_parallel[]] }
ADD_ARRAY_DIMS
[P0, P1, P2, P3] -> { A_memref_alloca_res_4[] -> A_memref_alloca_res_4[o0, o1] }
[P0, P1, P2, P3] -> { RS2_affine_parallel[] -> RS2_affine_parallel[] }
[P0, P1, P2, P3] -> { [A_memref_alloca_res_4[] -> RS2_affine_parallel[]] -> [A_memref_alloca_res_4[o0, o1] -> RS2_affine_parallel[]] }
[P0, P1, P2, P3] -> { [] -> [A_memref_alloca_res_4[o0, o1] -> RS2_affine_parallel[]] }
ADD_ARRAY_DIMS
[P0, P1, P2, P3] -> { A_memref_alloca_res_10[] -> A_memref_alloca_res_10[o0, o1] }
[P0, P1, P2, P3] -> { RS1_affine_parallel[] -> RS1_affine_parallel[] }
[P0, P1, P2, P3] -> { [A_memref_alloca_res_10[] -> RS1_affine_parallel[]] -> [A_memref_alloca_res_10[o0, o1] -> RS1_affine_parallel[]] }
[P0, P1, P2, P3] -> { [] -> [A_memref_alloca_res_10[o0, o1] -> RS1_affine_parallel[]] }
added new array dims in executed_ea: [P0, P1, P2, P3] -> { [] -> [A_memref_alloca_res_4[o0, o1] -> RS3_affine_parallel[]]; [] -> [A_memref_alloca_res_7[o0, o1] -> RS1_affine_parallel[]]; [] -> [A_memref_alloca_res_10[o0, o1] -> RS1_affine_parallel[]]; [] -> [A_memref_alloca_res_7[o0, o1] -> RS2_affine_parallel[]]; [] -> [A_memref_alloca_res_10[o0, o1] -> RS2_affine_parallel[]]; [] -> [A_memref_alloca_res_4[o0, o1] -> RS2_affine_parallel[]]; [] -> [A_memref_alloca_res_4[o0, o1] -> RS0_affine_parallel[]] }
extra_umap with array expansion: [P0, P1, P2, P3] -> { [i0, i1] -> [A_memref_alloca_res_7[o0, o1] -> RS2_affine_parallel[]] : o0 = 0 and o1 = 0; [i0, i1] -> RS0_affine_parallel[o0, o1, o2] : o0 = i1 and o1 = i0; [i0, i1] -> [A_memref_alloca_res_7[o0, o1] -> RS1_affine_parallel[]] : o0 = 0 and o1 = 0; [i0, i1] -> [A_memref_alloca_res_10[o0, o1] -> RS2_affine_parallel[]] : o0 = 0 and o1 = 0; [i0, i1] -> [A_memref_alloca_res_4[o0, o1] -> RS0_affine_parallel[]] : o0 = 0 and o1 = 0; [i0, i1] -> [A_memref_alloca_res_4[o0, o1] -> RS3_affine_parallel[]] : o0 = 0 and o1 = 0; [i0, i1] -> RS1_affine_parallel[o0, o1, o2, o3] : o0 = i1 and o1 = i0; [i0, i1] -> RS2_affine_parallel[o0, o1, o2, o3] : o0 = i1 and o1 = i0; [i0, i1] -> [A_memref_alloca_res_10[o0, o1] -> RS1_affine_parallel[]] : o0 = 0 and o1 = 0; [i0, i1] -> [A_memref_alloca_res_7[o0, o1] -> RS0_affine_parallel[]] : o0 = 0 and o1 = 0; [i0, i1] -> [A_memref_alloca_res_10[o0, o1] -> RS0_affine_parallel[]] : o0 = 0 and o1 = 0; [i0, i1] -> [A_memref_alloca_res_4[o0, o1] -> RS2_affine_parallel[]] : o0 = 0 and o1 = 0; [i0, i1] -> RS3_affine_parallel[o0, o1, o2] : o0 = i1 and o1 = i0; [i0, i1] -> [A_memref_alloca_res_4[o0, o1] -> RS1_affine_parallel[]] : o0 = 0 and o1 = 0; [i0, i1] -> [A_memref_alloca_res_10[o0, o1] -> RS3_affine_parallel[]] : o0 = 0 and o1 = 0; [i0, i1] -> [A_memref_alloca_res_7[o0, o1] -> RS3_affine_parallel[]] : o0 = 0 and o1 = 0 }
executed . extra_umap: [P0, P1, P2, P3] -> { [[] -> [i0, i1]] -> RS1_affine_parallel[o0, o1, o2, o3] : o0 = i1 and o1 = i0 and o2 = 0 and i1 >= 0 and i1 < P3 and i0 >= 0 and i0 < P2 and o3 >= 0 and 16o3 < P0; [[] -> [i0, i1]] -> RS2_affine_parallel[o0, o1, o2, o3] : o0 = i1 and o1 = i0 and o2 = 0 and i1 >= 0 and i1 < P3 and i0 >= 0 and i0 < P2 and o3 >= 0 and 16o3 < P0; [[] -> [i0, i1]] -> RS0_affine_parallel[o0, o1, o2] : o0 = i1 and o1 = i0 and o2 = 0 and i1 >= 0 and i1 < P3 and i0 >= 0 and i0 < P2; [[] -> [i0, i1]] -> RS3_affine_parallel[o0, o1, o2] : o0 = i1 and o1 = i0 and o2 = 0 and i1 >= 0 and i1 < P3 and i0 >= 0 and i0 < P2 }
executed_ea . extra_umap: [P0, P1, P2, P3] -> { [[] -> [i0, i1]] -> [A_memref_alloca_res_7[o0, o1] -> RS2_affine_parallel[]] : o0 = 0 and o1 = 0; [[] -> [i0, i1]] -> [A_memref_alloca_res_4[o0, o1] -> RS0_affine_parallel[]] : o0 = 0 and o1 = 0; [[] -> [i0, i1]] -> [A_memref_alloca_res_4[o0, o1] -> RS3_affine_parallel[]] : o0 = 0 and o1 = 0; [[] -> [i0, i1]] -> [A_memref_alloca_res_4[o0, o1] -> RS2_affine_parallel[]] : o0 = 0 and o1 = 0; [[] -> [i0, i1]] -> [A_memref_alloca_res_7[o0, o1] -> RS1_affine_parallel[]] : o0 = 0 and o1 = 0; [[] -> [i0, i1]] -> [A_memref_alloca_res_10[o0, o1] -> RS1_affine_parallel[]] : o0 = 0 and o1 = 0; [[] -> [i0, i1]] -> [A_memref_alloca_res_10[o0, o1] -> RS2_affine_parallel[]] : o0 = 0 and o1 = 0 }
Generated shifted component from list
[P0, P1, P2, P3] -> { [[] -> [i0, i1]] -> RS1_affine_parallel[o0, o1, o2, o3] : o0 = i1 and o1 = i0 and o2 = 0 and i1 >= 0 and i1 < P3 and i0 >= 0 and i0 < P2 and o3 >= 0 and 16o3 < P0; [[] -> [i0, i1]] -> RS0_affine_parallel[o0, o1, o2] : o0 = i1 and o1 = i0 and o2 = 0 and i1 >= 0 and i1 < P3 and i0 >= 0 and i0 < P2; [[] -> [i0, i1]] -> RS2_affine_parallel[o0, o1, o2, o3] : o0 = i1 and o1 = i0 and o2 = 0 and i1 >= 0 and i1 < P3 and i0 >= 0 and i0 < P2 and o3 >= 0 and 16o3 < P0; [[] -> [i0, i1]] -> RS3_affine_parallel[o0, o1, o2] : o0 = i1 and o1 = i0 and o2 = 0 and i1 >= 0 and i1 < P3 and i0 >= 0 and i0 < P2 }
[P0, P1, P2, P3] -> { [[] -> [i0, i1]] -> [A_memref_alloca_res_7[o0, o1] -> RS1_affine_parallel[]] : o0 = 0 and o1 = 0; [[] -> [i0, i1]] -> [A_memref_alloca_res_4[o0, o1] -> RS2_affine_parallel[]] : o0 = 0 and o1 = 0; [[] -> [i0, i1]] -> [A_memref_alloca_res_4[o0, o1] -> RS0_affine_parallel[]] : o0 = 0 and o1 = 0; [[] -> [i0, i1]] -> [A_memref_alloca_res_10[o0, o1] -> RS2_affine_parallel[]] : o0 = 0 and o1 = 0; [[] -> [i0, i1]] -> [A_memref_alloca_res_4[o0, o1] -> RS3_affine_parallel[]] : o0 = 0 and o1 = 0; [[] -> [i0, i1]] -> [A_memref_alloca_res_7[o0, o1] -> RS2_affine_parallel[]] : o0 = 0 and o1 = 0; [[] -> [i0, i1]] -> [A_memref_alloca_res_10[o0, o1] -> RS1_affine_parallel[]] : o0 = 0 and o1 = 0 }
Generated shifted component from list
[P0, P1, P2, P3] -> { [[] -> [i0, i1]] -> RS1_affine_parallel[o0, o1, o2, o3] : o0 = i1 and o1 = i0 and o2 = 0 and i1 >= 0 and i1 < P3 and i0 >= 0 and i0 < P2 and o3 >= 0 and 16o3 < P0 and P3 > 0; [[] -> [i0, i1]] -> RS0_affine_parallel[o0, o1, o2] : o0 = i1 and o1 = i0 and o2 = 0 and i1 >= 0 and i1 < P3 and i0 >= 0 and i0 < P2 and P3 > 0; [[] -> [i0, i1]] -> RS2_affine_parallel[o0, o1, o2, o3] : o0 = i1 and o1 = i0 and o2 = 0 and i1 >= 0 and i1 < P3 and i0 >= 0 and i0 < P2 and o3 >= 0 and 16o3 < P0 and P3 > 0; [[] -> [i0, i1]] -> RS3_affine_parallel[o0, o1, o2] : o0 = i1 and o1 = i0 and o2 = 0 and i1 >= 0 and i1 < P3 and i0 >= 0 and i0 < P2 and P3 > 0 }
[P0, P1, P2, P3] -> { [[] -> [i0, i1]] -> [A_memref_alloca_res_7[o0, o1] -> RS1_affine_parallel[]] : o0 = 0 and o1 = 0; [[] -> [i0, i1]] -> [A_memref_alloca_res_4[o0, o1] -> RS2_affine_parallel[]] : o0 = 0 and o1 = 0; [[] -> [i0, i1]] -> [A_memref_alloca_res_4[o0, o1] -> RS0_affine_parallel[]] : o0 = 0 and o1 = 0; [[] -> [i0, i1]] -> [A_memref_alloca_res_10[o0, o1] -> RS2_affine_parallel[]] : o0 = 0 and o1 = 0; [[] -> [i0, i1]] -> [A_memref_alloca_res_4[o0, o1] -> RS3_affine_parallel[]] : o0 = 0 and o1 = 0; [[] -> [i0, i1]] -> [A_memref_alloca_res_7[o0, o1] -> RS2_affine_parallel[]] : o0 = 0 and o1 = 0; [[] -> [i0, i1]] -> [A_memref_alloca_res_10[o0, o1] -> RS1_affine_parallel[]] : o0 = 0 and o1 = 0 }
Building ast for schedule node:
Executed: [P0, P1, P2, P3] -> { [[] -> [i0, i1]] -> RS1_affine_parallel[o0, o1, o2, o3] : o0 = i1 and o1 = i0 and o2 = 0 and i1 >= 0 and i1 < P3 and i0 >= 0 and i0 < P2 and o3 >= 0 and 16o3 < P0 and P3 > 0; [[] -> [i0, i1]] -> RS2_affine_parallel[o0, o1, o2, o3] : o0 = i1 and o1 = i0 and o2 = 0 and i1 >= 0 and i1 < P3 and i0 >= 0 and i0 < P2 and o3 >= 0 and 16o3 < P0 and P3 > 0; [[] -> [i0, i1]] -> RS0_affine_parallel[o0, o1, o2] : o0 = i1 and o1 = i0 and o2 = 0 and i1 >= 0 and i1 < P3 and i0 >= 0 and i0 < P2 and P3 > 0; [[] -> [i0, i1]] -> RS3_affine_parallel[o0, o1, o2] : o0 = i1 and o1 = i0 and o2 = 0 and i1 >= 0 and i1 < P3 and i0 >= 0 and i0 < P2 and P3 > 0 }
domain: "[P0, P1, P2, P3] -> { RS0_affine_parallel[i0, i1, 0] : 0 <= i0 < P3 and 0 <= i1 < P2; RS2_affine_parallel[i0, i1, 0, i3] : 0 <= i0 < P3 and 0 <= i1 < P2 and i3 >= 0 and 16i3 < P0; RS1_affine_parallel[i0, i1, 0, i3] : 0 <= i0 < P3 and 0 <= i1 < P2 and i3 >= 0 and 16i3 < P0; RS3_affine_parallel[i0, i1, 0] : 0 <= i0 < P3 and 0 <= i1 < P2 }"
child:
  mark: "grid_parallel"
  child:
    schedule: "[P0, P1, P2, P3] -> [{ RS1_affine_parallel[i0, i1, i2, i3] -> [(i1)]; RS2_affine_parallel[i0, i1, i2, i3] -> [(i1)]; RS3_affine_parallel[i0, i1, i2] -> [(i1)]; RS0_affine_parallel[i0, i1, i2] -> [(i1)] }, { RS1_affine_parallel[i0, i1, i2, i3] -> [(i0)]; RS2_affine_parallel[i0, i1, i2, i3] -> [(i0)]; RS3_affine_parallel[i0, i1, i2] -> [(i0)]; RS0_affine_parallel[i0, i1, i2] -> [(i0)] }]"
    permutable: 1
    coincident: [ 1, 1 ]
    array_expansion: [ [ A_memref_alloca_res_10: 1, A_memref_alloca_res_7: 1, A_memref_alloca_res_4: 1 ], [ A_memref_alloca_res_10: 1, A_memref_alloca_res_7: 1, A_memref_alloca_res_4: 1 ] ]
    child:
      # YOU ARE HERE
      sequence:
      - filter: "[P0, P1, P2, P3] -> { RS0_affine_parallel[i0, i1, i2]; RS2_affine_parallel[i0, i1, i2, i3]; RS1_affine_parallel[i0, i1, i2, i3] }"
        child:
          schedule: "[P0, P1, P2, P3] -> [{ RS1_affine_parallel[i0, i1, i2, i3] -> [(i3)]; RS2_affine_parallel[i0, i1, i2, i3] -> [(21 + i3)]; RS0_affine_parallel[i0, i1, i2] -> [(0)] }]"
          permutable: 1
          coincident: [ 1 ]
          array_expansion: [ [ A_memref_alloca_res_10: 22, A_memref_alloca_res_7: 22, A_memref_alloca_res_4: 1 ] ]
          child:
            set:
            - filter: "[P0, P1, P2, P3] -> { RS2_affine_parallel[i0, i1, i2, i3]; RS1_affine_parallel[i0, i1, i2, i3] }"
              child:
                sequence:
                - filter: "[P0, P1, P2, P3] -> { RS2_affine_parallel[i0, i1, i2, i3] }"
                - filter: "[P0, P1, P2, P3] -> { RS1_affine_parallel[i0, i1, i2, i3] }"
            - filter: "[P0, P1, P2, P3] -> { RS0_affine_parallel[i0, i1, i2] }"
      - filter: "[P0, P1, P2, P3] -> { RS3_affine_parallel[i0, i1, i2] }"
Building ast for schedule node:
Executed: [P0, P1, P2, P3] -> { [[] -> [i0, i1]] -> RS1_affine_parallel[o0, o1, o2, o3] : o0 = i1 and o1 = i0 and o2 = 0 and i1 >= 0 and i1 < P3 and i0 >= 0 and i0 < P2 and o3 >= 0 and 16o3 < P0 and P3 > 0; [[] -> [i0, i1]] -> RS2_affine_parallel[o0, o1, o2, o3] : o0 = i1 and o1 = i0 and o2 = 0 and i1 >= 0 and i1 < P3 and i0 >= 0 and i0 < P2 and o3 >= 0 and 16o3 < P0 and P3 > 0; [[] -> [i0, i1]] -> RS0_affine_parallel[o0, o1, o2] : o0 = i1 and o1 = i0 and o2 = 0 and i1 >= 0 and i1 < P3 and i0 >= 0 and i0 < P2 and P3 > 0; [[] -> [i0, i1]] -> RS3_affine_parallel[o0, o1, o2] : o0 = i1 and o1 = i0 and o2 = 0 and i1 >= 0 and i1 < P3 and i0 >= 0 and i0 < P2 and P3 > 0 }
domain: "[P0, P1, P2, P3] -> { RS0_affine_parallel[i0, i1, 0] : 0 <= i0 < P3 and 0 <= i1 < P2; RS2_affine_parallel[i0, i1, 0, i3] : 0 <= i0 < P3 and 0 <= i1 < P2 and i3 >= 0 and 16i3 < P0; RS1_affine_parallel[i0, i1, 0, i3] : 0 <= i0 < P3 and 0 <= i1 < P2 and i3 >= 0 and 16i3 < P0; RS3_affine_parallel[i0, i1, 0] : 0 <= i0 < P3 and 0 <= i1 < P2 }"
child:
  mark: "grid_parallel"
  child:
    schedule: "[P0, P1, P2, P3] -> [{ RS1_affine_parallel[i0, i1, i2, i3] -> [(i1)]; RS2_affine_parallel[i0, i1, i2, i3] -> [(i1)]; RS3_affine_parallel[i0, i1, i2] -> [(i1)]; RS0_affine_parallel[i0, i1, i2] -> [(i1)] }, { RS1_affine_parallel[i0, i1, i2, i3] -> [(i0)]; RS2_affine_parallel[i0, i1, i2, i3] -> [(i0)]; RS3_affine_parallel[i0, i1, i2] -> [(i0)]; RS0_affine_parallel[i0, i1, i2] -> [(i0)] }]"
    permutable: 1
    coincident: [ 1, 1 ]
    array_expansion: [ [ A_memref_alloca_res_10: 1, A_memref_alloca_res_7: 1, A_memref_alloca_res_4: 1 ], [ A_memref_alloca_res_10: 1, A_memref_alloca_res_7: 1, A_memref_alloca_res_4: 1 ] ]
    child:
      sequence:
      - # YOU ARE HERE
        filter: "[P0, P1, P2, P3] -> { RS0_affine_parallel[i0, i1, i2]; RS2_affine_parallel[i0, i1, i2, i3]; RS1_affine_parallel[i0, i1, i2, i3] }"
        child:
          schedule: "[P0, P1, P2, P3] -> [{ RS1_affine_parallel[i0, i1, i2, i3] -> [(i3)]; RS2_affine_parallel[i0, i1, i2, i3] -> [(21 + i3)]; RS0_affine_parallel[i0, i1, i2] -> [(0)] }]"
          permutable: 1
          coincident: [ 1 ]
          array_expansion: [ [ A_memref_alloca_res_10: 22, A_memref_alloca_res_7: 22, A_memref_alloca_res_4: 1 ] ]
          child:
            set:
            - filter: "[P0, P1, P2, P3] -> { RS2_affine_parallel[i0, i1, i2, i3]; RS1_affine_parallel[i0, i1, i2, i3] }"
              child:
                sequence:
                - filter: "[P0, P1, P2, P3] -> { RS2_affine_parallel[i0, i1, i2, i3] }"
                - filter: "[P0, P1, P2, P3] -> { RS1_affine_parallel[i0, i1, i2, i3] }"
            - filter: "[P0, P1, P2, P3] -> { RS0_affine_parallel[i0, i1, i2] }"
      - filter: "[P0, P1, P2, P3] -> { RS3_affine_parallel[i0, i1, i2] }"
Building ast for schedule node:
Executed: [P0, P1, P2, P3] -> { [[] -> [i0, i1]] -> RS1_affine_parallel[o0, o1, o2, o3] : o0 = i1 and o1 = i0 and o2 = 0 and i1 >= 0 and i1 < P3 and i0 >= 0 and i0 < P2 and o3 >= 0 and 16o3 < P0 and P3 > 0; [[] -> [i0, i1]] -> RS2_affine_parallel[o0, o1, o2, o3] : o0 = i1 and o1 = i0 and o2 = 0 and i1 >= 0 and i1 < P3 and i0 >= 0 and i0 < P2 and o3 >= 0 and 16o3 < P0 and P3 > 0; [[] -> [i0, i1]] -> RS0_affine_parallel[o0, o1, o2] : o0 = i1 and o1 = i0 and o2 = 0 and i1 >= 0 and i1 < P3 and i0 >= 0 and i0 < P2 and P3 > 0 }
domain: "[P0, P1, P2, P3] -> { RS0_affine_parallel[i0, i1, 0] : 0 <= i0 < P3 and 0 <= i1 < P2; RS2_affine_parallel[i0, i1, 0, i3] : 0 <= i0 < P3 and 0 <= i1 < P2 and i3 >= 0 and 16i3 < P0; RS1_affine_parallel[i0, i1, 0, i3] : 0 <= i0 < P3 and 0 <= i1 < P2 and i3 >= 0 and 16i3 < P0; RS3_affine_parallel[i0, i1, 0] : 0 <= i0 < P3 and 0 <= i1 < P2 }"
child:
  mark: "grid_parallel"
  child:
    schedule: "[P0, P1, P2, P3] -> [{ RS1_affine_parallel[i0, i1, i2, i3] -> [(i1)]; RS2_affine_parallel[i0, i1, i2, i3] -> [(i1)]; RS3_affine_parallel[i0, i1, i2] -> [(i1)]; RS0_affine_parallel[i0, i1, i2] -> [(i1)] }, { RS1_affine_parallel[i0, i1, i2, i3] -> [(i0)]; RS2_affine_parallel[i0, i1, i2, i3] -> [(i0)]; RS3_affine_parallel[i0, i1, i2] -> [(i0)]; RS0_affine_parallel[i0, i1, i2] -> [(i0)] }]"
    permutable: 1
    coincident: [ 1, 1 ]
    array_expansion: [ [ A_memref_alloca_res_10: 1, A_memref_alloca_res_7: 1, A_memref_alloca_res_4: 1 ], [ A_memref_alloca_res_10: 1, A_memref_alloca_res_7: 1, A_memref_alloca_res_4: 1 ] ]
    child:
      sequence:
      - filter: "[P0, P1, P2, P3] -> { RS0_affine_parallel[i0, i1, i2]; RS2_affine_parallel[i0, i1, i2, i3]; RS1_affine_parallel[i0, i1, i2, i3] }"
        child:
          # YOU ARE HERE
          schedule: "[P0, P1, P2, P3] -> [{ RS1_affine_parallel[i0, i1, i2, i3] -> [(i3)]; RS2_affine_parallel[i0, i1, i2, i3] -> [(21 + i3)]; RS0_affine_parallel[i0, i1, i2] -> [(0)] }]"
          permutable: 1
          coincident: [ 1 ]
          array_expansion: [ [ A_memref_alloca_res_10: 22, A_memref_alloca_res_7: 22, A_memref_alloca_res_4: 1 ] ]
          child:
            set:
            - filter: "[P0, P1, P2, P3] -> { RS2_affine_parallel[i0, i1, i2, i3]; RS1_affine_parallel[i0, i1, i2, i3] }"
              child:
                sequence:
                - filter: "[P0, P1, P2, P3] -> { RS2_affine_parallel[i0, i1, i2, i3] }"
                - filter: "[P0, P1, P2, P3] -> { RS1_affine_parallel[i0, i1, i2, i3] }"
            - filter: "[P0, P1, P2, P3] -> { RS0_affine_parallel[i0, i1, i2] }"
      - filter: "[P0, P1, P2, P3] -> { RS3_affine_parallel[i0, i1, i2] }"
executed: [P0, P1, P2, P3] -> { [[] -> [i0, i1]] -> RS1_affine_parallel[o0, o1, o2, o3] : o0 = i1 and o1 = i0 and o2 = 0 and i1 >= 0 and i1 < P3 and i0 >= 0 and i0 < P2 and o3 >= 0 and 16o3 < P0 and P3 > 0; [[] -> [i0, i1]] -> RS2_affine_parallel[o0, o1, o2, o3] : o0 = i1 and o1 = i0 and o2 = 0 and i1 >= 0 and i1 < P3 and i0 >= 0 and i0 < P2 and o3 >= 0 and 16o3 < P0 and P3 > 0; [[] -> [i0, i1]] -> RS0_affine_parallel[o0, o1, o2] : o0 = i1 and o1 = i0 and o2 = 0 and i1 >= 0 and i1 < P3 and i0 >= 0 and i0 < P2 and P3 > 0 }
executed_ea: [P0, P1, P2, P3] -> { [[] -> [i0, i1]] -> [A_memref_alloca_res_7[o0, o1] -> RS1_affine_parallel[]] : o0 = 0 and o1 = 0; [[] -> [i0, i1]] -> [A_memref_alloca_res_4[o0, o1] -> RS2_affine_parallel[]] : o0 = 0 and o1 = 0; [[] -> [i0, i1]] -> [A_memref_alloca_res_4[o0, o1] -> RS0_affine_parallel[]] : o0 = 0 and o1 = 0; [[] -> [i0, i1]] -> [A_memref_alloca_res_10[o0, o1] -> RS2_affine_parallel[]] : o0 = 0 and o1 = 0; [[] -> [i0, i1]] -> [A_memref_alloca_res_4[o0, o1] -> RS3_affine_parallel[]] : o0 = 0 and o1 = 0; [[] -> [i0, i1]] -> [A_memref_alloca_res_7[o0, o1] -> RS2_affine_parallel[]] : o0 = 0 and o1 = 0; [[] -> [i0, i1]] -> [A_memref_alloca_res_10[o0, o1] -> RS1_affine_parallel[]] : o0 = 0 and o1 = 0 }
extra: [P0, P1, P2, P3] -> [{ RS1_affine_parallel[i0, i1, i2, i3] -> [(i3)]; RS2_affine_parallel[i0, i1, i2, i3] -> [(21 + i3)]; RS0_affine_parallel[i0, i1, i2] -> [(0)] }]
extra_umap: [P0, P1, P2, P3] -> { [i0] -> RS2_affine_parallel[o0, o1, o2, o3] : o3 = -21 + i0; [i0] -> RS1_affine_parallel[o0, o1, o2, o3] : o3 = i0; [i0] -> RS0_affine_parallel[o0, o1, o2] : i0 = 0 }
ADD_ARRAY_DIMS
[P0, P1, P2, P3] -> { A_memref_alloca_res_7[i0, i1] -> A_memref_alloca_res_7[o0, o1, o2] : o1 = i1 and o0 = i0 }
[P0, P1, P2, P3] -> { RS1_affine_parallel[] -> RS1_affine_parallel[] }
[P0, P1, P2, P3] -> { [A_memref_alloca_res_7[i0, i1] -> RS1_affine_parallel[]] -> [A_memref_alloca_res_7[o0, o1, o2] -> RS1_affine_parallel[]] : o0 = i0 and o1 = i1 }
[P0, P1, P2, P3] -> { [[] -> [i0, i1]] -> [A_memref_alloca_res_7[o0, o1, o2] -> RS1_affine_parallel[]] : o0 = 0 and o1 = 0 }
ADD_ARRAY_DIMS
[P0, P1, P2, P3] -> { A_memref_alloca_res_4[i0, i1] -> A_memref_alloca_res_4[o0, o1, o2] : o1 = i1 and o0 = i0 }
[P0, P1, P2, P3] -> { RS2_affine_parallel[] -> RS2_affine_parallel[] }
[P0, P1, P2, P3] -> { [A_memref_alloca_res_4[i0, i1] -> RS2_affine_parallel[]] -> [A_memref_alloca_res_4[o0, o1, o2] -> RS2_affine_parallel[]] : o0 = i0 and o1 = i1 }
[P0, P1, P2, P3] -> { [[] -> [i0, i1]] -> [A_memref_alloca_res_4[o0, o1, o2] -> RS2_affine_parallel[]] : o0 = 0 and o1 = 0 }
ADD_ARRAY_DIMS
[P0, P1, P2, P3] -> { A_memref_alloca_res_4[i0, i1] -> A_memref_alloca_res_4[o0, o1, o2] : o1 = i1 and o0 = i0 }
[P0, P1, P2, P3] -> { RS0_affine_parallel[] -> RS0_affine_parallel[] }
[P0, P1, P2, P3] -> { [A_memref_alloca_res_4[i0, i1] -> RS0_affine_parallel[]] -> [A_memref_alloca_res_4[o0, o1, o2] -> RS0_affine_parallel[]] : o0 = i0 and o1 = i1 }
[P0, P1, P2, P3] -> { [[] -> [i0, i1]] -> [A_memref_alloca_res_4[o0, o1, o2] -> RS0_affine_parallel[]] : o0 = 0 and o1 = 0 }
ADD_ARRAY_DIMS
[P0, P1, P2, P3] -> { A_memref_alloca_res_10[i0, i1] -> A_memref_alloca_res_10[o0, o1, o2] : o1 = i1 and o0 = i0 }
[P0, P1, P2, P3] -> { RS2_affine_parallel[] -> RS2_affine_parallel[] }
[P0, P1, P2, P3] -> { [A_memref_alloca_res_10[i0, i1] -> RS2_affine_parallel[]] -> [A_memref_alloca_res_10[o0, o1, o2] -> RS2_affine_parallel[]] : o0 = i0 and o1 = i1 }
[P0, P1, P2, P3] -> { [[] -> [i0, i1]] -> [A_memref_alloca_res_10[o0, o1, o2] -> RS2_affine_parallel[]] : o0 = 0 and o1 = 0 }
ADD_ARRAY_DIMS
[P0, P1, P2, P3] -> { A_memref_alloca_res_4[i0, i1] -> A_memref_alloca_res_4[o0, o1, o2] : o1 = i1 and o0 = i0 }
[P0, P1, P2, P3] -> { RS3_affine_parallel[] -> RS3_affine_parallel[] }
[P0, P1, P2, P3] -> { [A_memref_alloca_res_4[i0, i1] -> RS3_affine_parallel[]] -> [A_memref_alloca_res_4[o0, o1, o2] -> RS3_affine_parallel[]] : o0 = i0 and o1 = i1 }
[P0, P1, P2, P3] -> { [[] -> [i0, i1]] -> [A_memref_alloca_res_4[o0, o1, o2] -> RS3_affine_parallel[]] : o0 = 0 and o1 = 0 }
ADD_ARRAY_DIMS
[P0, P1, P2, P3] -> { A_memref_alloca_res_7[i0, i1] -> A_memref_alloca_res_7[o0, o1, o2] : o1 = i1 and o0 = i0 }
[P0, P1, P2, P3] -> { RS2_affine_parallel[] -> RS2_affine_parallel[] }
[P0, P1, P2, P3] -> { [A_memref_alloca_res_7[i0, i1] -> RS2_affine_parallel[]] -> [A_memref_alloca_res_7[o0, o1, o2] -> RS2_affine_parallel[]] : o0 = i0 and o1 = i1 }
[P0, P1, P2, P3] -> { [[] -> [i0, i1]] -> [A_memref_alloca_res_7[o0, o1, o2] -> RS2_affine_parallel[]] : o0 = 0 and o1 = 0 }
ADD_ARRAY_DIMS
[P0, P1, P2, P3] -> { A_memref_alloca_res_10[i0, i1] -> A_memref_alloca_res_10[o0, o1, o2] : o1 = i1 and o0 = i0 }
[P0, P1, P2, P3] -> { RS1_affine_parallel[] -> RS1_affine_parallel[] }
[P0, P1, P2, P3] -> { [A_memref_alloca_res_10[i0, i1] -> RS1_affine_parallel[]] -> [A_memref_alloca_res_10[o0, o1, o2] -> RS1_affine_parallel[]] : o0 = i0 and o1 = i1 }
[P0, P1, P2, P3] -> { [[] -> [i0, i1]] -> [A_memref_alloca_res_10[o0, o1, o2] -> RS1_affine_parallel[]] : o0 = 0 and o1 = 0 }
added new array dims in executed_ea: [P0, P1, P2, P3] -> { [[] -> [i0, i1]] -> [A_memref_alloca_res_4[o0, o1, o2] -> RS2_affine_parallel[]] : o0 = 0 and o1 = 0; [[] -> [i0, i1]] -> [A_memref_alloca_res_7[o0, o1, o2] -> RS2_affine_parallel[]] : o0 = 0 and o1 = 0; [[] -> [i0, i1]] -> [A_memref_alloca_res_4[o0, o1, o2] -> RS0_affine_parallel[]] : o0 = 0 and o1 = 0; [[] -> [i0, i1]] -> [A_memref_alloca_res_10[o0, o1, o2] -> RS1_affine_parallel[]] : o0 = 0 and o1 = 0; [[] -> [i0, i1]] -> [A_memref_alloca_res_4[o0, o1, o2] -> RS3_affine_parallel[]] : o0 = 0 and o1 = 0; [[] -> [i0, i1]] -> [A_memref_alloca_res_10[o0, o1, o2] -> RS2_affine_parallel[]] : o0 = 0 and o1 = 0; [[] -> [i0, i1]] -> [A_memref_alloca_res_7[o0, o1, o2] -> RS1_affine_parallel[]] : o0 = 0 and o1 = 0 }
extra_umap with array expansion: [P0, P1, P2, P3] -> { [i0] -> [A_memref_alloca_res_10[o0, o1, o2] -> RS0_affine_parallel[]] : exists (e0 = floor((1 - i0 + o2)/22): 22e0 = 1 - i0 + o2 and o2 >= 0 and o2 <= 21); [i0] -> [A_memref_alloca_res_4[o0, o1, o2] -> RS1_affine_parallel[]] : o2 = 0; [i0] -> RS0_affine_parallel[o0, o1, o2] : i0 = 0; [i0] -> RS1_affine_parallel[o0, o1, o2, o3] : o3 = i0; [i0] -> [A_memref_alloca_res_10[o0, o1, o2] -> RS2_affine_parallel[]] : exists (e0 = floor((1 - i0 + o2)/22): 22e0 = 1 - i0 + o2 and o2 >= 0 and o2 <= 21); [i0] -> [A_memref_alloca_res_7[o0, o1, o2] -> RS2_affine_parallel[]] : exists (e0 = floor((1 - i0 + o2)/22): 22e0 = 1 - i0 + o2 and o2 >= 0 and o2 <= 21); [i0] -> [A_memref_alloca_res_4[o0, o1, o2] -> RS2_affine_parallel[]] : o2 = 0; [i0] -> [A_memref_alloca_res_4[o0, o1, o2] -> RS0_affine_parallel[]] : o2 = 0; [i0] -> [A_memref_alloca_res_7[o0, o1, o2] -> RS0_affine_parallel[]] : exists (e0 = floor((1 - i0 + o2)/22): 22e0 = 1 - i0 + o2 and o2 >= 0 and o2 <= 21); [i0] -> [A_memref_alloca_res_10[o0, o1, o2] -> RS1_affine_parallel[]] : exists (e0 = floor((1 - i0 + o2)/22): 22e0 = 1 - i0 + o2 and o2 >= 0 and o2 <= 21); [i0] -> [A_memref_alloca_res_7[o0, o1, o2] -> RS1_affine_parallel[]] : exists (e0 = floor((1 - i0 + o2)/22): 22e0 = 1 - i0 + o2 and o2 >= 0 and o2 <= 21); [i0] -> RS2_affine_parallel[o0, o1, o2, o3] : o3 = -21 + i0 }
executed . extra_umap: [P0, P1, P2, P3] -> { [[[] -> [i0, i1]] -> [i2]] -> RS2_affine_parallel[o0, o1, o2, o3] : o0 = i1 and o1 = i0 and o2 = 0 and o3 = -21 + i2 and i1 >= 0 and i1 < P3 and i0 >= 0 and i0 < P2 and i2 >= 21 and 16i2 <= 335 + P0 and P3 > 0; [[[] -> [i0, i1]] -> [i2]] -> RS1_affine_parallel[o0, o1, o2, o3] : o0 = i1 and o1 = i0 and o2 = 0 and o3 = i2 and i1 >= 0 and i1 < P3 and i0 >= 0 and i0 < P2 and i2 >= 0 and 16i2 < P0 and P3 > 0; [[[] -> [i0, i1]] -> [i2]] -> RS0_affine_parallel[o0, o1, o2] : i2 = 0 and o0 = i1 and o1 = i0 and o2 = 0 and i1 >= 0 and i1 < P3 and i0 >= 0 and i0 < P2 and P3 > 0 }
executed_ea . extra_umap: [P0, P1, P2, P3] -> { [[[] -> [i0, i1]] -> [i2]] -> [A_memref_alloca_res_7[o0, o1, o2] -> RS1_affine_parallel[]] : exists (e0 = floor((1 - i2 + o2)/22): o0 = 0 and o1 = 0 and 22e0 = 1 - i2 + o2 and o2 >= 0 and o2 <= 21); [[[] -> [i0, i1]] -> [i2]] -> [A_memref_alloca_res_4[o0, o1, o2] -> RS0_affine_parallel[]] : o0 = 0 and o1 = 0 and o2 = 0; [[[] -> [i0, i1]] -> [i2]] -> [A_memref_alloca_res_10[o0, o1, o2] -> RS1_affine_parallel[]] : exists (e0 = floor((1 - i2 + o2)/22): o0 = 0 and o1 = 0 and 22e0 = 1 - i2 + o2 and o2 >= 0 and o2 <= 21); [[[] -> [i0, i1]] -> [i2]] -> [A_memref_alloca_res_4[o0, o1, o2] -> RS2_affine_parallel[]] : o0 = 0 and o1 = 0 and o2 = 0; [[[] -> [i0, i1]] -> [i2]] -> [A_memref_alloca_res_7[o0, o1, o2] -> RS2_affine_parallel[]] : exists (e0 = floor((1 - i2 + o2)/22): o0 = 0 and o1 = 0 and 22e0 = 1 - i2 + o2 and o2 >= 0 and o2 <= 21); [[[] -> [i0, i1]] -> [i2]] -> [A_memref_alloca_res_10[o0, o1, o2] -> RS2_affine_parallel[]] : exists (e0 = floor((1 - i2 + o2)/22): o0 = 0 and o1 = 0 and 22e0 = 1 - i2 + o2 and o2 >= 0 and o2 <= 21) }
Generated shifted component from list
[P0, P1, P2, P3] -> { [[[] -> [i0, i1]] -> [i2]] -> RS0_affine_parallel[o0, o1, o2] : i2 = 0 and o0 = i1 and o1 = i0 and o2 = 0 and i1 >= 0 and i1 < P3 and i0 >= 0 and i0 < P2 and P3 > 0; [[[] -> [i0, i1]] -> [i2]] -> RS2_affine_parallel[o0, o1, o2, o3] : o0 = i1 and o1 = i0 and o2 = 0 and o3 = -21 + i2 and i1 >= 0 and i1 < P3 and i0 >= 0 and i0 < P2 and i2 >= 21 and 16i2 <= 335 + P0 and P3 > 0; [[[] -> [i0, i1]] -> [i2]] -> RS1_affine_parallel[o0, o1, o2, o3] : o0 = i1 and o1 = i0 and o2 = 0 and o3 = i2 and i1 >= 0 and i1 < P3 and i0 >= 0 and i0 < P2 and i2 >= 0 and 16i2 < P0 and P3 > 0 }
[P0, P1, P2, P3] -> { [[[] -> [i0, i1]] -> [i2]] -> [A_memref_alloca_res_10[o0, o1, o2] -> RS2_affine_parallel[]] : exists (e0 = floor((1 - i2 + o2)/22): o0 = 0 and o1 = 0 and 22e0 = 1 - i2 + o2 and o2 >= 0 and o2 <= 21); [[[] -> [i0, i1]] -> [i2]] -> [A_memref_alloca_res_4[o0, o1, o2] -> RS2_affine_parallel[]] : o0 = 0 and o1 = 0 and o2 = 0; [[[] -> [i0, i1]] -> [i2]] -> [A_memref_alloca_res_4[o0, o1, o2] -> RS0_affine_parallel[]] : o0 = 0 and o1 = 0 and o2 = 0; [[[] -> [i0, i1]] -> [i2]] -> [A_memref_alloca_res_7[o0, o1, o2] -> RS2_affine_parallel[]] : exists (e0 = floor((1 - i2 + o2)/22): o0 = 0 and o1 = 0 and 22e0 = 1 - i2 + o2 and o2 >= 0 and o2 <= 21); [[[] -> [i0, i1]] -> [i2]] -> [A_memref_alloca_res_7[o0, o1, o2] -> RS1_affine_parallel[]] : exists (e0 = floor((1 - i2 + o2)/22): o0 = 0 and o1 = 0 and 22e0 = 1 - i2 + o2 and o2 >= 0 and o2 <= 21); [[[] -> [i0, i1]] -> [i2]] -> [A_memref_alloca_res_10[o0, o1, o2] -> RS1_affine_parallel[]] : exists (e0 = floor((1 - i2 + o2)/22): o0 = 0 and o1 = 0 and 22e0 = 1 - i2 + o2 and o2 >= 0 and o2 <= 21) }
Building ast for schedule node:
Executed: [P0, P1, P2, P3] -> { [[[] -> [i0, i1]] -> [i2]] -> RS1_affine_parallel[o0, o1, o2, o3] : o0 = i1 and o1 = i0 and o2 = 0 and o3 = 0 and i1 >= 0 and i1 < P3 and i0 >= 0 and i0 < P2 and P3 > 0 and P0 > 0; [[[] -> [i0, i1]] -> [i2]] -> RS0_affine_parallel[o0, o1, o2] : o0 = i1 and o1 = i0 and o2 = 0 and i1 >= 0 and i1 < P3 and i0 >= 0 and i0 < P2 and P3 > 0 }
domain: "[P0, P1, P2, P3] -> { RS0_affine_parallel[i0, i1, 0] : 0 <= i0 < P3 and 0 <= i1 < P2; RS2_affine_parallel[i0, i1, 0, i3] : 0 <= i0 < P3 and 0 <= i1 < P2 and i3 >= 0 and 16i3 < P0; RS1_affine_parallel[i0, i1, 0, i3] : 0 <= i0 < P3 and 0 <= i1 < P2 and i3 >= 0 and 16i3 < P0; RS3_affine_parallel[i0, i1, 0] : 0 <= i0 < P3 and 0 <= i1 < P2 }"
child:
  mark: "grid_parallel"
  child:
    schedule: "[P0, P1, P2, P3] -> [{ RS1_affine_parallel[i0, i1, i2, i3] -> [(i1)]; RS2_affine_parallel[i0, i1, i2, i3] -> [(i1)]; RS3_affine_parallel[i0, i1, i2] -> [(i1)]; RS0_affine_parallel[i0, i1, i2] -> [(i1)] }, { RS1_affine_parallel[i0, i1, i2, i3] -> [(i0)]; RS2_affine_parallel[i0, i1, i2, i3] -> [(i0)]; RS3_affine_parallel[i0, i1, i2] -> [(i0)]; RS0_affine_parallel[i0, i1, i2] -> [(i0)] }]"
    permutable: 1
    coincident: [ 1, 1 ]
    array_expansion: [ [ A_memref_alloca_res_10: 1, A_memref_alloca_res_7: 1, A_memref_alloca_res_4: 1 ], [ A_memref_alloca_res_10: 1, A_memref_alloca_res_7: 1, A_memref_alloca_res_4: 1 ] ]
    child:
      sequence:
      - filter: "[P0, P1, P2, P3] -> { RS0_affine_parallel[i0, i1, i2]; RS2_affine_parallel[i0, i1, i2, i3]; RS1_affine_parallel[i0, i1, i2, i3] }"
        child:
          schedule: "[P0, P1, P2, P3] -> [{ RS1_affine_parallel[i0, i1, i2, i3] -> [(i3)]; RS2_affine_parallel[i0, i1, i2, i3] -> [(21 + i3)]; RS0_affine_parallel[i0, i1, i2] -> [(0)] }]"
          permutable: 1
          coincident: [ 1 ]
          array_expansion: [ [ A_memref_alloca_res_10: 22, A_memref_alloca_res_7: 22, A_memref_alloca_res_4: 1 ] ]
          child:
            # YOU ARE HERE
            set:
            - filter: "[P0, P1, P2, P3] -> { RS2_affine_parallel[i0, i1, i2, i3]; RS1_affine_parallel[i0, i1, i2, i3] }"
              child:
                sequence:
                - filter: "[P0, P1, P2, P3] -> { RS2_affine_parallel[i0, i1, i2, i3] }"
                - filter: "[P0, P1, P2, P3] -> { RS1_affine_parallel[i0, i1, i2, i3] }"
            - filter: "[P0, P1, P2, P3] -> { RS0_affine_parallel[i0, i1, i2] }"
      - filter: "[P0, P1, P2, P3] -> { RS3_affine_parallel[i0, i1, i2] }"
Building ast for schedule node:
Executed: [P0, P1, P2, P3] -> { [[[] -> [i0, i1]] -> [i2]] -> RS1_affine_parallel[o0, o1, o2, o3] : o0 = i1 and o1 = i0 and o2 = 0 and o3 = 0 and i1 >= 0 and i1 < P3 and i0 >= 0 and i0 < P2 and P3 > 0 and P0 > 0; [[[] -> [i0, i1]] -> [i2]] -> RS0_affine_parallel[o0, o1, o2] : o0 = i1 and o1 = i0 and o2 = 0 and i1 >= 0 and i1 < P3 and i0 >= 0 and i0 < P2 and P3 > 0 }
domain: "[P0, P1, P2, P3] -> { RS0_affine_parallel[i0, i1, 0] : 0 <= i0 < P3 and 0 <= i1 < P2; RS2_affine_parallel[i0, i1, 0, i3] : 0 <= i0 < P3 and 0 <= i1 < P2 and i3 >= 0 and 16i3 < P0; RS1_affine_parallel[i0, i1, 0, i3] : 0 <= i0 < P3 and 0 <= i1 < P2 and i3 >= 0 and 16i3 < P0; RS3_affine_parallel[i0, i1, 0] : 0 <= i0 < P3 and 0 <= i1 < P2 }"
child:
  mark: "grid_parallel"
  child:
    schedule: "[P0, P1, P2, P3] -> [{ RS1_affine_parallel[i0, i1, i2, i3] -> [(i1)]; RS2_affine_parallel[i0, i1, i2, i3] -> [(i1)]; RS3_affine_parallel[i0, i1, i2] -> [(i1)]; RS0_affine_parallel[i0, i1, i2] -> [(i1)] }, { RS1_affine_parallel[i0, i1, i2, i3] -> [(i0)]; RS2_affine_parallel[i0, i1, i2, i3] -> [(i0)]; RS3_affine_parallel[i0, i1, i2] -> [(i0)]; RS0_affine_parallel[i0, i1, i2] -> [(i0)] }]"
    permutable: 1
    coincident: [ 1, 1 ]
    array_expansion: [ [ A_memref_alloca_res_10: 1, A_memref_alloca_res_7: 1, A_memref_alloca_res_4: 1 ], [ A_memref_alloca_res_10: 1, A_memref_alloca_res_7: 1, A_memref_alloca_res_4: 1 ] ]
    child:
      sequence:
      - filter: "[P0, P1, P2, P3] -> { RS0_affine_parallel[i0, i1, i2]; RS2_affine_parallel[i0, i1, i2, i3]; RS1_affine_parallel[i0, i1, i2, i3] }"
        child:
          schedule: "[P0, P1, P2, P3] -> [{ RS1_affine_parallel[i0, i1, i2, i3] -> [(i3)]; RS2_affine_parallel[i0, i1, i2, i3] -> [(21 + i3)]; RS0_affine_parallel[i0, i1, i2] -> [(0)] }]"
          permutable: 1
          coincident: [ 1 ]
          array_expansion: [ [ A_memref_alloca_res_10: 22, A_memref_alloca_res_7: 22, A_memref_alloca_res_4: 1 ] ]
          child:
            set:
            - # YOU ARE HERE
              filter: "[P0, P1, P2, P3] -> { RS2_affine_parallel[i0, i1, i2, i3]; RS1_affine_parallel[i0, i1, i2, i3] }"
              child:
                sequence:
                - filter: "[P0, P1, P2, P3] -> { RS2_affine_parallel[i0, i1, i2, i3] }"
                - filter: "[P0, P1, P2, P3] -> { RS1_affine_parallel[i0, i1, i2, i3] }"
            - filter: "[P0, P1, P2, P3] -> { RS0_affine_parallel[i0, i1, i2] }"
      - filter: "[P0, P1, P2, P3] -> { RS3_affine_parallel[i0, i1, i2] }"
Building ast for schedule node:
Executed: [P0, P1, P2, P3] -> { [[[] -> [i0, i1]] -> [i2]] -> RS1_affine_parallel[o0, o1, o2, o3] : o0 = i1 and o1 = i0 and o2 = 0 and o3 = 0 and i1 >= 0 and i1 < P3 and i0 >= 0 and i0 < P2 and P3 > 0 and P0 > 0 }
domain: "[P0, P1, P2, P3] -> { RS0_affine_parallel[i0, i1, 0] : 0 <= i0 < P3 and 0 <= i1 < P2; RS2_affine_parallel[i0, i1, 0, i3] : 0 <= i0 < P3 and 0 <= i1 < P2 and i3 >= 0 and 16i3 < P0; RS1_affine_parallel[i0, i1, 0, i3] : 0 <= i0 < P3 and 0 <= i1 < P2 and i3 >= 0 and 16i3 < P0; RS3_affine_parallel[i0, i1, 0] : 0 <= i0 < P3 and 0 <= i1 < P2 }"
child:
  mark: "grid_parallel"
  child:
    schedule: "[P0, P1, P2, P3] -> [{ RS1_affine_parallel[i0, i1, i2, i3] -> [(i1)]; RS2_affine_parallel[i0, i1, i2, i3] -> [(i1)]; RS3_affine_parallel[i0, i1, i2] -> [(i1)]; RS0_affine_parallel[i0, i1, i2] -> [(i1)] }, { RS1_affine_parallel[i0, i1, i2, i3] -> [(i0)]; RS2_affine_parallel[i0, i1, i2, i3] -> [(i0)]; RS3_affine_parallel[i0, i1, i2] -> [(i0)]; RS0_affine_parallel[i0, i1, i2] -> [(i0)] }]"
    permutable: 1
    coincident: [ 1, 1 ]
    array_expansion: [ [ A_memref_alloca_res_10: 1, A_memref_alloca_res_7: 1, A_memref_alloca_res_4: 1 ], [ A_memref_alloca_res_10: 1, A_memref_alloca_res_7: 1, A_memref_alloca_res_4: 1 ] ]
    child:
      sequence:
      - filter: "[P0, P1, P2, P3] -> { RS0_affine_parallel[i0, i1, i2]; RS2_affine_parallel[i0, i1, i2, i3]; RS1_affine_parallel[i0, i1, i2, i3] }"
        child:
          schedule: "[P0, P1, P2, P3] -> [{ RS1_affine_parallel[i0, i1, i2, i3] -> [(i3)]; RS2_affine_parallel[i0, i1, i2, i3] -> [(21 + i3)]; RS0_affine_parallel[i0, i1, i2] -> [(0)] }]"
          permutable: 1
          coincident: [ 1 ]
          array_expansion: [ [ A_memref_alloca_res_10: 22, A_memref_alloca_res_7: 22, A_memref_alloca_res_4: 1 ] ]
          child:
            set:
            - filter: "[P0, P1, P2, P3] -> { RS2_affine_parallel[i0, i1, i2, i3]; RS1_affine_parallel[i0, i1, i2, i3] }"
              child:
                # YOU ARE HERE
                sequence:
                - filter: "[P0, P1, P2, P3] -> { RS2_affine_parallel[i0, i1, i2, i3] }"
                - filter: "[P0, P1, P2, P3] -> { RS1_affine_parallel[i0, i1, i2, i3] }"
            - filter: "[P0, P1, P2, P3] -> { RS0_affine_parallel[i0, i1, i2] }"
      - filter: "[P0, P1, P2, P3] -> { RS3_affine_parallel[i0, i1, i2] }"
Building ast for schedule node:
Executed: [P0, P1, P2, P3] -> { [[[] -> [i0, i1]] -> [i2]] -> RS1_affine_parallel[o0, o1, o2, o3] : o0 = i1 and o1 = i0 and o2 = 0 and o3 = 0 and i1 >= 0 and i1 < P3 and i0 >= 0 and i0 < P2 and P3 > 0 and P0 > 0 }
domain: "[P0, P1, P2, P3] -> { RS0_affine_parallel[i0, i1, 0] : 0 <= i0 < P3 and 0 <= i1 < P2; RS2_affine_parallel[i0, i1, 0, i3] : 0 <= i0 < P3 and 0 <= i1 < P2 and i3 >= 0 and 16i3 < P0; RS1_affine_parallel[i0, i1, 0, i3] : 0 <= i0 < P3 and 0 <= i1 < P2 and i3 >= 0 and 16i3 < P0; RS3_affine_parallel[i0, i1, 0] : 0 <= i0 < P3 and 0 <= i1 < P2 }"
child:
  mark: "grid_parallel"
  child:
    schedule: "[P0, P1, P2, P3] -> [{ RS1_affine_parallel[i0, i1, i2, i3] -> [(i1)]; RS2_affine_parallel[i0, i1, i2, i3] -> [(i1)]; RS3_affine_parallel[i0, i1, i2] -> [(i1)]; RS0_affine_parallel[i0, i1, i2] -> [(i1)] }, { RS1_affine_parallel[i0, i1, i2, i3] -> [(i0)]; RS2_affine_parallel[i0, i1, i2, i3] -> [(i0)]; RS3_affine_parallel[i0, i1, i2] -> [(i0)]; RS0_affine_parallel[i0, i1, i2] -> [(i0)] }]"
    permutable: 1
    coincident: [ 1, 1 ]
    array_expansion: [ [ A_memref_alloca_res_10: 1, A_memref_alloca_res_7: 1, A_memref_alloca_res_4: 1 ], [ A_memref_alloca_res_10: 1, A_memref_alloca_res_7: 1, A_memref_alloca_res_4: 1 ] ]
    child:
      sequence:
      - filter: "[P0, P1, P2, P3] -> { RS0_affine_parallel[i0, i1, i2]; RS2_affine_parallel[i0, i1, i2, i3]; RS1_affine_parallel[i0, i1, i2, i3] }"
        child:
          schedule: "[P0, P1, P2, P3] -> [{ RS1_affine_parallel[i0, i1, i2, i3] -> [(i3)]; RS2_affine_parallel[i0, i1, i2, i3] -> [(21 + i3)]; RS0_affine_parallel[i0, i1, i2] -> [(0)] }]"
          permutable: 1
          coincident: [ 1 ]
          array_expansion: [ [ A_memref_alloca_res_10: 22, A_memref_alloca_res_7: 22, A_memref_alloca_res_4: 1 ] ]
          child:
            set:
            - filter: "[P0, P1, P2, P3] -> { RS2_affine_parallel[i0, i1, i2, i3]; RS1_affine_parallel[i0, i1, i2, i3] }"
              child:
                sequence:
                - # YOU ARE HERE
                  filter: "[P0, P1, P2, P3] -> { RS2_affine_parallel[i0, i1, i2, i3] }"
                - filter: "[P0, P1, P2, P3] -> { RS1_affine_parallel[i0, i1, i2, i3] }"
            - filter: "[P0, P1, P2, P3] -> { RS0_affine_parallel[i0, i1, i2] }"
      - filter: "[P0, P1, P2, P3] -> { RS3_affine_parallel[i0, i1, i2] }"
Building ast for schedule node:
Executed: [P0, P1, P2, P3] -> { [[[] -> [i0, i1]] -> [i2]] -> RS1_affine_parallel[o0, o1, o2, o3] : o0 = i1 and o1 = i0 and o2 = 0 and o3 = 0 and i1 >= 0 and i1 < P3 and i0 >= 0 and i0 < P2 and P3 > 0 and P0 > 0 }
domain: "[P0, P1, P2, P3] -> { RS0_affine_parallel[i0, i1, 0] : 0 <= i0 < P3 and 0 <= i1 < P2; RS2_affine_parallel[i0, i1, 0, i3] : 0 <= i0 < P3 and 0 <= i1 < P2 and i3 >= 0 and 16i3 < P0; RS1_affine_parallel[i0, i1, 0, i3] : 0 <= i0 < P3 and 0 <= i1 < P2 and i3 >= 0 and 16i3 < P0; RS3_affine_parallel[i0, i1, 0] : 0 <= i0 < P3 and 0 <= i1 < P2 }"
child:
  mark: "grid_parallel"
  child:
    schedule: "[P0, P1, P2, P3] -> [{ RS1_affine_parallel[i0, i1, i2, i3] -> [(i1)]; RS2_affine_parallel[i0, i1, i2, i3] -> [(i1)]; RS3_affine_parallel[i0, i1, i2] -> [(i1)]; RS0_affine_parallel[i0, i1, i2] -> [(i1)] }, { RS1_affine_parallel[i0, i1, i2, i3] -> [(i0)]; RS2_affine_parallel[i0, i1, i2, i3] -> [(i0)]; RS3_affine_parallel[i0, i1, i2] -> [(i0)]; RS0_affine_parallel[i0, i1, i2] -> [(i0)] }]"
    permutable: 1
    coincident: [ 1, 1 ]
    array_expansion: [ [ A_memref_alloca_res_10: 1, A_memref_alloca_res_7: 1, A_memref_alloca_res_4: 1 ], [ A_memref_alloca_res_10: 1, A_memref_alloca_res_7: 1, A_memref_alloca_res_4: 1 ] ]
    child:
      sequence:
      - filter: "[P0, P1, P2, P3] -> { RS0_affine_parallel[i0, i1, i2]; RS2_affine_parallel[i0, i1, i2, i3]; RS1_affine_parallel[i0, i1, i2, i3] }"
        child:
          schedule: "[P0, P1, P2, P3] -> [{ RS1_affine_parallel[i0, i1, i2, i3] -> [(i3)]; RS2_affine_parallel[i0, i1, i2, i3] -> [(21 + i3)]; RS0_affine_parallel[i0, i1, i2] -> [(0)] }]"
          permutable: 1
          coincident: [ 1 ]
          array_expansion: [ [ A_memref_alloca_res_10: 22, A_memref_alloca_res_7: 22, A_memref_alloca_res_4: 1 ] ]
          child:
            set:
            - filter: "[P0, P1, P2, P3] -> { RS2_affine_parallel[i0, i1, i2, i3]; RS1_affine_parallel[i0, i1, i2, i3] }"
              child:
                sequence:
                - filter: "[P0, P1, P2, P3] -> { RS2_affine_parallel[i0, i1, i2, i3] }"
                - # YOU ARE HERE
                  filter: "[P0, P1, P2, P3] -> { RS1_affine_parallel[i0, i1, i2, i3] }"
            - filter: "[P0, P1, P2, P3] -> { RS0_affine_parallel[i0, i1, i2] }"
      - filter: "[P0, P1, P2, P3] -> { RS3_affine_parallel[i0, i1, i2] }"
Building ast for schedule node:
Executed: [P0, P1, P2, P3] -> { [[[] -> [i0, i1]] -> [i2]] -> RS1_affine_parallel[o0, o1, o2, o3] : o0 = i1 and o1 = i0 and o2 = 0 and o3 = 0 and i1 >= 0 and i1 < P3 and i0 >= 0 and i0 < P2 and P3 > 0 and P0 > 0 }
domain: "[P0, P1, P2, P3] -> { RS0_affine_parallel[i0, i1, 0] : 0 <= i0 < P3 and 0 <= i1 < P2; RS2_affine_parallel[i0, i1, 0, i3] : 0 <= i0 < P3 and 0 <= i1 < P2 and i3 >= 0 and 16i3 < P0; RS1_affine_parallel[i0, i1, 0, i3] : 0 <= i0 < P3 and 0 <= i1 < P2 and i3 >= 0 and 16i3 < P0; RS3_affine_parallel[i0, i1, 0] : 0 <= i0 < P3 and 0 <= i1 < P2 }"
child:
  mark: "grid_parallel"
  child:
    schedule: "[P0, P1, P2, P3] -> [{ RS1_affine_parallel[i0, i1, i2, i3] -> [(i1)]; RS2_affine_parallel[i0, i1, i2, i3] -> [(i1)]; RS3_affine_parallel[i0, i1, i2] -> [(i1)]; RS0_affine_parallel[i0, i1, i2] -> [(i1)] }, { RS1_affine_parallel[i0, i1, i2, i3] -> [(i0)]; RS2_affine_parallel[i0, i1, i2, i3] -> [(i0)]; RS3_affine_parallel[i0, i1, i2] -> [(i0)]; RS0_affine_parallel[i0, i1, i2] -> [(i0)] }]"
    permutable: 1
    coincident: [ 1, 1 ]
    array_expansion: [ [ A_memref_alloca_res_10: 1, A_memref_alloca_res_7: 1, A_memref_alloca_res_4: 1 ], [ A_memref_alloca_res_10: 1, A_memref_alloca_res_7: 1, A_memref_alloca_res_4: 1 ] ]
    child:
      sequence:
      - filter: "[P0, P1, P2, P3] -> { RS0_affine_parallel[i0, i1, i2]; RS2_affine_parallel[i0, i1, i2, i3]; RS1_affine_parallel[i0, i1, i2, i3] }"
        child:
          schedule: "[P0, P1, P2, P3] -> [{ RS1_affine_parallel[i0, i1, i2, i3] -> [(i3)]; RS2_affine_parallel[i0, i1, i2, i3] -> [(21 + i3)]; RS0_affine_parallel[i0, i1, i2] -> [(0)] }]"
          permutable: 1
          coincident: [ 1 ]
          array_expansion: [ [ A_memref_alloca_res_10: 22, A_memref_alloca_res_7: 22, A_memref_alloca_res_4: 1 ] ]
          child:
            set:
            - filter: "[P0, P1, P2, P3] -> { RS2_affine_parallel[i0, i1, i2, i3]; RS1_affine_parallel[i0, i1, i2, i3] }"
              child:
                sequence:
                - filter: "[P0, P1, P2, P3] -> { RS2_affine_parallel[i0, i1, i2, i3] }"
                - filter: "[P0, P1, P2, P3] -> { RS1_affine_parallel[i0, i1, i2, i3] }"
                  child:
                    # YOU ARE HERE
                    leaf
            - filter: "[P0, P1, P2, P3] -> { RS0_affine_parallel[i0, i1, i2] }"
      - filter: "[P0, P1, P2, P3] -> { RS3_affine_parallel[i0, i1, i2] }"
We have reached a schedule wtih executed:
[P0, P1, P2, P3] -> { [[[] -> [i0, i1]] -> [i2]] -> RS1_affine_parallel[o0, o1, o2, o3] : o0 = i1 and o1 = i0 and o2 = 0 and o3 = 0 and i1 >= 0 and i1 < P3 and i0 >= 0 and i0 < P2 and P3 > 0 and P0 > 0 }
Generating domain for:
[P0, P1, P2, P3] -> { [[[] -> [i0, i1]] -> [i2]] -> RS1_affine_parallel[o0, o1, o2, o3] : o0 = i1 and o1 = i0 and o2 = 0 and o3 = 0 and i1 >= 0 and i1 < P3 and i0 >= 0 and i0 < P2 and P3 > 0 and P0 > 0 }

Building call from executed:
[P0, P1, P2, P3] -> { [[[] -> [i0, i1]] -> [i2]] -> RS1_affine_parallel[o0, o1, o2, o3] : o0 = i1 and o1 = i0 and o2 = 0 and o3 = 0 and i1 >= 0 and i1 < P3 and i0 >= 0 and i0 < P2 and P3 > 0 and P0 > 0 }
BEFORE
[P0, P1, P2, P3] -> { [[[] -> [i0, i1]] -> [i2]] -> [A_memref_alloca_res_7[o0, o1, o2] -> RS1_affine_parallel[]] : exists (e0 = floor((1 - i2 + o2)/22): o0 = 0 and o1 = 0 and 22e0 = 1 - i2 + o2 and o2 >= 0 and o2 <= 21) }
PROJECTED OUT
[P0, P1, P2, P3] -> { [[[] -> [i0, i1]] -> [i2]] -> A_memref_alloca_res_7[o0, o1, o2] : exists (e0 = floor((1 - i2 + o2)/22): o0 = 0 and o1 = 0 and 22e0 = 1 - i2 + o2 and o2 >= 0 and o2 <= 21) }
Building call from executed:
[P0, P1, P2, P3] -> { [[[] -> [i0, i1]] -> [i2]] -> A_memref_alloca_res_7[o0, o1, o2] : exists (e0 = floor((1 - i2 + o2)/22): o0 = 0 and o1 = 0 and 22e0 = 1 - i2 + o2 and o2 >= 0 and o2 <= 21) }
BEFORE
[P0, P1, P2, P3] -> { [[[] -> [i0, i1]] -> [i2]] -> [A_memref_alloca_res_10[o0, o1, o2] -> RS1_affine_parallel[]] : exists (e0 = floor((1 - i2 + o2)/22): o0 = 0 and o1 = 0 and 22e0 = 1 - i2 + o2 and o2 >= 0 and o2 <= 21) }
PROJECTED OUT
[P0, P1, P2, P3] -> { [[[] -> [i0, i1]] -> [i2]] -> A_memref_alloca_res_10[o0, o1, o2] : exists (e0 = floor((1 - i2 + o2)/22): o0 = 0 and o1 = 0 and 22e0 = 1 - i2 + o2 and o2 >= 0 and o2 <= 21) }
Building call from executed:
[P0, P1, P2, P3] -> { [[[] -> [i0, i1]] -> [i2]] -> A_memref_alloca_res_10[o0, o1, o2] : exists (e0 = floor((1 - i2 + o2)/22): o0 = 0 and o1 = 0 and 22e0 = 1 - i2 + o2 and o2 >= 0 and o2 <= 21) }
TODO use the executed_ea
[P0, P1, P2, P3] -> { [[[] -> [i0, i1]] -> [i2]] -> [A_memref_alloca_res_10[o0, o1, o2] -> RS2_affine_parallel[]] : exists (e0 = floor((1 - i2 + o2)/22): o0 = 0 and o1 = 0 and 22e0 = 1 - i2 + o2 and o2 >= 0 and o2 <= 21); [[[] -> [i0, i1]] -> [i2]] -> [A_memref_alloca_res_4[o0, o1, o2] -> RS2_affine_parallel[]] : o0 = 0 and o1 = 0 and o2 = 0; [[[] -> [i0, i1]] -> [i2]] -> [A_memref_alloca_res_4[o0, o1, o2] -> RS0_affine_parallel[]] : o0 = 0 and o1 = 0 and o2 = 0; [[[] -> [i0, i1]] -> [i2]] -> [A_memref_alloca_res_7[o0, o1, o2] -> RS2_affine_parallel[]] : exists (e0 = floor((1 - i2 + o2)/22): o0 = 0 and o1 = 0 and 22e0 = 1 - i2 + o2 and o2 >= 0 and o2 <= 21); [[[] -> [i0, i1]] -> [i2]] -> [A_memref_alloca_res_7[o0, o1, o2] -> RS1_affine_parallel[]] : exists (e0 = floor((1 - i2 + o2)/22): o0 = 0 and o1 = 0 and 22e0 = 1 - i2 + o2 and o2 >= 0 and o2 <= 21); [[[] -> [i0, i1]] -> [i2]] -> [A_memref_alloca_res_10[o0, o1, o2] -> RS1_affine_parallel[]] : exists (e0 = floor((1 - i2 + o2)/22): o0 = 0 and o1 = 0 and 22e0 = 1 - i2 + o2 and o2 >= 0 and o2 <= 21) }
Generated graft for user:
user:
  op: call
  args:
  - id: RS1_affine_parallel@0x46988f10
  - id: c1
  - id: c0
  - val: 0
  - val: 0
  - op: call
    args:
    - id: A_memref_alloca_res_7@0x469c6770
    - val: 0
    - val: 0
    - val: 21
  - op: call
    args:
    - id: A_memref_alloca_res_10@0x46985f80
    - val: 0
    - val: 0
    - val: 21

Building ast for schedule node:
Executed: [P0, P1, P2, P3] -> { [[[] -> [i0, i1]] -> [i2]] -> RS1_affine_parallel[o0, o1, o2, o3] : o0 = i1 and o1 = i0 and o2 = 0 and o3 = 0 and i1 >= 0 and i1 < P3 and i0 >= 0 and i0 < P2 and P3 > 0 and P0 > 0; [[[] -> [i0, i1]] -> [i2]] -> RS0_affine_parallel[o0, o1, o2] : o0 = i1 and o1 = i0 and o2 = 0 and i1 >= 0 and i1 < P3 and i0 >= 0 and i0 < P2 and P3 > 0 }
domain: "[P0, P1, P2, P3] -> { RS0_affine_parallel[i0, i1, 0] : 0 <= i0 < P3 and 0 <= i1 < P2; RS2_affine_parallel[i0, i1, 0, i3] : 0 <= i0 < P3 and 0 <= i1 < P2 and i3 >= 0 and 16i3 < P0; RS1_affine_parallel[i0, i1, 0, i3] : 0 <= i0 < P3 and 0 <= i1 < P2 and i3 >= 0 and 16i3 < P0; RS3_affine_parallel[i0, i1, 0] : 0 <= i0 < P3 and 0 <= i1 < P2 }"
child:
  mark: "grid_parallel"
  child:
    schedule: "[P0, P1, P2, P3] -> [{ RS1_affine_parallel[i0, i1, i2, i3] -> [(i1)]; RS2_affine_parallel[i0, i1, i2, i3] -> [(i1)]; RS3_affine_parallel[i0, i1, i2] -> [(i1)]; RS0_affine_parallel[i0, i1, i2] -> [(i1)] }, { RS1_affine_parallel[i0, i1, i2, i3] -> [(i0)]; RS2_affine_parallel[i0, i1, i2, i3] -> [(i0)]; RS3_affine_parallel[i0, i1, i2] -> [(i0)]; RS0_affine_parallel[i0, i1, i2] -> [(i0)] }]"
    permutable: 1
    coincident: [ 1, 1 ]
    array_expansion: [ [ A_memref_alloca_res_10: 1, A_memref_alloca_res_7: 1, A_memref_alloca_res_4: 1 ], [ A_memref_alloca_res_10: 1, A_memref_alloca_res_7: 1, A_memref_alloca_res_4: 1 ] ]
    child:
      sequence:
      - filter: "[P0, P1, P2, P3] -> { RS0_affine_parallel[i0, i1, i2]; RS2_affine_parallel[i0, i1, i2, i3]; RS1_affine_parallel[i0, i1, i2, i3] }"
        child:
          schedule: "[P0, P1, P2, P3] -> [{ RS1_affine_parallel[i0, i1, i2, i3] -> [(i3)]; RS2_affine_parallel[i0, i1, i2, i3] -> [(21 + i3)]; RS0_affine_parallel[i0, i1, i2] -> [(0)] }]"
          permutable: 1
          coincident: [ 1 ]
          array_expansion: [ [ A_memref_alloca_res_10: 22, A_memref_alloca_res_7: 22, A_memref_alloca_res_4: 1 ] ]
          child:
            set:
            - filter: "[P0, P1, P2, P3] -> { RS2_affine_parallel[i0, i1, i2, i3]; RS1_affine_parallel[i0, i1, i2, i3] }"
              child:
                sequence:
                - filter: "[P0, P1, P2, P3] -> { RS2_affine_parallel[i0, i1, i2, i3] }"
                - filter: "[P0, P1, P2, P3] -> { RS1_affine_parallel[i0, i1, i2, i3] }"
            - # YOU ARE HERE
              filter: "[P0, P1, P2, P3] -> { RS0_affine_parallel[i0, i1, i2] }"
      - filter: "[P0, P1, P2, P3] -> { RS3_affine_parallel[i0, i1, i2] }"
Building ast for schedule node:
Executed: [P0, P1, P2, P3] -> { [[[] -> [i0, i1]] -> [i2]] -> RS0_affine_parallel[o0, o1, o2] : o0 = i1 and o1 = i0 and o2 = 0 and i1 >= 0 and i1 < P3 and i0 >= 0 and i0 < P2 and P3 > 0 }
domain: "[P0, P1, P2, P3] -> { RS0_affine_parallel[i0, i1, 0] : 0 <= i0 < P3 and 0 <= i1 < P2; RS2_affine_parallel[i0, i1, 0, i3] : 0 <= i0 < P3 and 0 <= i1 < P2 and i3 >= 0 and 16i3 < P0; RS1_affine_parallel[i0, i1, 0, i3] : 0 <= i0 < P3 and 0 <= i1 < P2 and i3 >= 0 and 16i3 < P0; RS3_affine_parallel[i0, i1, 0] : 0 <= i0 < P3 and 0 <= i1 < P2 }"
child:
  mark: "grid_parallel"
  child:
    schedule: "[P0, P1, P2, P3] -> [{ RS1_affine_parallel[i0, i1, i2, i3] -> [(i1)]; RS2_affine_parallel[i0, i1, i2, i3] -> [(i1)]; RS3_affine_parallel[i0, i1, i2] -> [(i1)]; RS0_affine_parallel[i0, i1, i2] -> [(i1)] }, { RS1_affine_parallel[i0, i1, i2, i3] -> [(i0)]; RS2_affine_parallel[i0, i1, i2, i3] -> [(i0)]; RS3_affine_parallel[i0, i1, i2] -> [(i0)]; RS0_affine_parallel[i0, i1, i2] -> [(i0)] }]"
    permutable: 1
    coincident: [ 1, 1 ]
    array_expansion: [ [ A_memref_alloca_res_10: 1, A_memref_alloca_res_7: 1, A_memref_alloca_res_4: 1 ], [ A_memref_alloca_res_10: 1, A_memref_alloca_res_7: 1, A_memref_alloca_res_4: 1 ] ]
    child:
      sequence:
      - filter: "[P0, P1, P2, P3] -> { RS0_affine_parallel[i0, i1, i2]; RS2_affine_parallel[i0, i1, i2, i3]; RS1_affine_parallel[i0, i1, i2, i3] }"
        child:
          schedule: "[P0, P1, P2, P3] -> [{ RS1_affine_parallel[i0, i1, i2, i3] -> [(i3)]; RS2_affine_parallel[i0, i1, i2, i3] -> [(21 + i3)]; RS0_affine_parallel[i0, i1, i2] -> [(0)] }]"
          permutable: 1
          coincident: [ 1 ]
          array_expansion: [ [ A_memref_alloca_res_10: 22, A_memref_alloca_res_7: 22, A_memref_alloca_res_4: 1 ] ]
          child:
            set:
            - filter: "[P0, P1, P2, P3] -> { RS2_affine_parallel[i0, i1, i2, i3]; RS1_affine_parallel[i0, i1, i2, i3] }"
              child:
                sequence:
                - filter: "[P0, P1, P2, P3] -> { RS2_affine_parallel[i0, i1, i2, i3] }"
                - filter: "[P0, P1, P2, P3] -> { RS1_affine_parallel[i0, i1, i2, i3] }"
            - filter: "[P0, P1, P2, P3] -> { RS0_affine_parallel[i0, i1, i2] }"
              child:
                # YOU ARE HERE
                leaf
      - filter: "[P0, P1, P2, P3] -> { RS3_affine_parallel[i0, i1, i2] }"
We have reached a schedule wtih executed:
[P0, P1, P2, P3] -> { [[[] -> [i0, i1]] -> [i2]] -> RS0_affine_parallel[o0, o1, o2] : o0 = i1 and o1 = i0 and o2 = 0 and i1 >= 0 and i1 < P3 and i0 >= 0 and i0 < P2 and P3 > 0 }
Generating domain for:
[P0, P1, P2, P3] -> { [[[] -> [i0, i1]] -> [i2]] -> RS0_affine_parallel[o0, o1, o2] : o0 = i1 and o1 = i0 and o2 = 0 and i1 >= 0 and i1 < P3 and i0 >= 0 and i0 < P2 and P3 > 0 }

Building call from executed:
[P0, P1, P2, P3] -> { [[[] -> [i0, i1]] -> [i2]] -> RS0_affine_parallel[o0, o1, o2] : o0 = i1 and o1 = i0 and o2 = 0 and i1 >= 0 and i1 < P3 and i0 >= 0 and i0 < P2 and P3 > 0 }
BEFORE
[P0, P1, P2, P3] -> { [[[] -> [i0, i1]] -> [i2]] -> [A_memref_alloca_res_4[o0, o1, o2] -> RS0_affine_parallel[]] : o0 = 0 and o1 = 0 and o2 = 0 }
PROJECTED OUT
[P0, P1, P2, P3] -> { [[[] -> [i0, i1]] -> [i2]] -> A_memref_alloca_res_4[o0, o1, o2] : o0 = 0 and o1 = 0 and o2 = 0 }
Building call from executed:
[P0, P1, P2, P3] -> { [[[] -> [i0, i1]] -> [i2]] -> A_memref_alloca_res_4[o0, o1, o2] : o0 = 0 and o1 = 0 and o2 = 0 }
TODO use the executed_ea
[P0, P1, P2, P3] -> { [[[] -> [i0, i1]] -> [i2]] -> [A_memref_alloca_res_10[o0, o1, o2] -> RS2_affine_parallel[]] : exists (e0 = floor((1 - i2 + o2)/22): o0 = 0 and o1 = 0 and 22e0 = 1 - i2 + o2 and o2 >= 0 and o2 <= 21); [[[] -> [i0, i1]] -> [i2]] -> [A_memref_alloca_res_4[o0, o1, o2] -> RS2_affine_parallel[]] : o0 = 0 and o1 = 0 and o2 = 0; [[[] -> [i0, i1]] -> [i2]] -> [A_memref_alloca_res_4[o0, o1, o2] -> RS0_affine_parallel[]] : o0 = 0 and o1 = 0 and o2 = 0; [[[] -> [i0, i1]] -> [i2]] -> [A_memref_alloca_res_7[o0, o1, o2] -> RS2_affine_parallel[]] : exists (e0 = floor((1 - i2 + o2)/22): o0 = 0 and o1 = 0 and 22e0 = 1 - i2 + o2 and o2 >= 0 and o2 <= 21); [[[] -> [i0, i1]] -> [i2]] -> [A_memref_alloca_res_7[o0, o1, o2] -> RS1_affine_parallel[]] : exists (e0 = floor((1 - i2 + o2)/22): o0 = 0 and o1 = 0 and 22e0 = 1 - i2 + o2 and o2 >= 0 and o2 <= 21); [[[] -> [i0, i1]] -> [i2]] -> [A_memref_alloca_res_10[o0, o1, o2] -> RS1_affine_parallel[]] : exists (e0 = floor((1 - i2 + o2)/22): o0 = 0 and o1 = 0 and 22e0 = 1 - i2 + o2 and o2 >= 0 and o2 <= 21) }
Generated graft for user:
user:
  op: call
  args:
  - id: RS0_affine_parallel@0x4699ea60
  - id: c1
  - id: c0
  - val: 0
  - op: call
    args:
    - id: A_memref_alloca_res_4@0x469c72c0
    - val: 0
    - val: 0
    - val: 0

Generated graft for band:

- guard:
    op: ge
    args:
    - id: P0@0x46974500
    - val: 1
  then:
    user:
      op: call
      args:
      - id: RS1_affine_parallel@0x46988f10
      - id: c1
      - id: c0
      - val: 0
      - val: 0
      - op: call
        args:
        - id: A_memref_alloca_res_7@0x469c6770
        - val: 0
        - val: 0
        - val: 21
      - op: call
        args:
        - id: A_memref_alloca_res_10@0x46985f80
        - val: 0
        - val: 0
        - val: 21
- user:
    op: call
    args:
    - id: RS0_affine_parallel@0x4699ea60
    - id: c1
    - id: c0
    - val: 0
    - op: call
      args:
      - id: A_memref_alloca_res_4@0x469c72c0
      - val: 0
      - val: 0
      - val: 0
[P0, P1, P2, P3] -> { [[[] -> [i0, i1]] -> [i2]] :  }
[P0, P1, P2, P3] -> { [[[] -> [i0, i1]] -> [i2]] }
graft for band end

Building ast for schedule node:
Executed: [P0, P1, P2, P3] -> { [[[] -> [i0, i1]] -> [i2]] -> RS1_affine_parallel[o0, o1, o2, o3] : o0 = i1 and o1 = i0 and o2 = 0 and o3 = i2 and i1 >= 0 and i1 < P3 and i0 >= 0 and i0 < P2 and i2 > 0 and 16i2 < P0 and P3 > 0 and i2 <= 20 }
domain: "[P0, P1, P2, P3] -> { RS0_affine_parallel[i0, i1, 0] : 0 <= i0 < P3 and 0 <= i1 < P2; RS2_affine_parallel[i0, i1, 0, i3] : 0 <= i0 < P3 and 0 <= i1 < P2 and i3 >= 0 and 16i3 < P0; RS1_affine_parallel[i0, i1, 0, i3] : 0 <= i0 < P3 and 0 <= i1 < P2 and i3 >= 0 and 16i3 < P0; RS3_affine_parallel[i0, i1, 0] : 0 <= i0 < P3 and 0 <= i1 < P2 }"
child:
  mark: "grid_parallel"
  child:
    schedule: "[P0, P1, P2, P3] -> [{ RS1_affine_parallel[i0, i1, i2, i3] -> [(i1)]; RS2_affine_parallel[i0, i1, i2, i3] -> [(i1)]; RS3_affine_parallel[i0, i1, i2] -> [(i1)]; RS0_affine_parallel[i0, i1, i2] -> [(i1)] }, { RS1_affine_parallel[i0, i1, i2, i3] -> [(i0)]; RS2_affine_parallel[i0, i1, i2, i3] -> [(i0)]; RS3_affine_parallel[i0, i1, i2] -> [(i0)]; RS0_affine_parallel[i0, i1, i2] -> [(i0)] }]"
    permutable: 1
    coincident: [ 1, 1 ]
    array_expansion: [ [ A_memref_alloca_res_10: 1, A_memref_alloca_res_7: 1, A_memref_alloca_res_4: 1 ], [ A_memref_alloca_res_10: 1, A_memref_alloca_res_7: 1, A_memref_alloca_res_4: 1 ] ]
    child:
      sequence:
      - filter: "[P0, P1, P2, P3] -> { RS0_affine_parallel[i0, i1, i2]; RS2_affine_parallel[i0, i1, i2, i3]; RS1_affine_parallel[i0, i1, i2, i3] }"
        child:
          schedule: "[P0, P1, P2, P3] -> [{ RS1_affine_parallel[i0, i1, i2, i3] -> [(i3)]; RS2_affine_parallel[i0, i1, i2, i3] -> [(21 + i3)]; RS0_affine_parallel[i0, i1, i2] -> [(0)] }]"
          permutable: 1
          coincident: [ 1 ]
          array_expansion: [ [ A_memref_alloca_res_10: 22, A_memref_alloca_res_7: 22, A_memref_alloca_res_4: 1 ] ]
          child:
            # YOU ARE HERE
            set:
            - filter: "[P0, P1, P2, P3] -> { RS2_affine_parallel[i0, i1, i2, i3]; RS1_affine_parallel[i0, i1, i2, i3] }"
              child:
                sequence:
                - filter: "[P0, P1, P2, P3] -> { RS2_affine_parallel[i0, i1, i2, i3] }"
                - filter: "[P0, P1, P2, P3] -> { RS1_affine_parallel[i0, i1, i2, i3] }"
            - filter: "[P0, P1, P2, P3] -> { RS0_affine_parallel[i0, i1, i2] }"
      - filter: "[P0, P1, P2, P3] -> { RS3_affine_parallel[i0, i1, i2] }"
Building ast for schedule node:
Executed: [P0, P1, P2, P3] -> { [[[] -> [i0, i1]] -> [i2]] -> RS1_affine_parallel[o0, o1, o2, o3] : o0 = i1 and o1 = i0 and o2 = 0 and o3 = i2 and i1 >= 0 and i1 < P3 and i0 >= 0 and i0 < P2 and i2 > 0 and 16i2 < P0 and P3 > 0 and i2 <= 20 }
domain: "[P0, P1, P2, P3] -> { RS0_affine_parallel[i0, i1, 0] : 0 <= i0 < P3 and 0 <= i1 < P2; RS2_affine_parallel[i0, i1, 0, i3] : 0 <= i0 < P3 and 0 <= i1 < P2 and i3 >= 0 and 16i3 < P0; RS1_affine_parallel[i0, i1, 0, i3] : 0 <= i0 < P3 and 0 <= i1 < P2 and i3 >= 0 and 16i3 < P0; RS3_affine_parallel[i0, i1, 0] : 0 <= i0 < P3 and 0 <= i1 < P2 }"
child:
  mark: "grid_parallel"
  child:
    schedule: "[P0, P1, P2, P3] -> [{ RS1_affine_parallel[i0, i1, i2, i3] -> [(i1)]; RS2_affine_parallel[i0, i1, i2, i3] -> [(i1)]; RS3_affine_parallel[i0, i1, i2] -> [(i1)]; RS0_affine_parallel[i0, i1, i2] -> [(i1)] }, { RS1_affine_parallel[i0, i1, i2, i3] -> [(i0)]; RS2_affine_parallel[i0, i1, i2, i3] -> [(i0)]; RS3_affine_parallel[i0, i1, i2] -> [(i0)]; RS0_affine_parallel[i0, i1, i2] -> [(i0)] }]"
    permutable: 1
    coincident: [ 1, 1 ]
    array_expansion: [ [ A_memref_alloca_res_10: 1, A_memref_alloca_res_7: 1, A_memref_alloca_res_4: 1 ], [ A_memref_alloca_res_10: 1, A_memref_alloca_res_7: 1, A_memref_alloca_res_4: 1 ] ]
    child:
      sequence:
      - filter: "[P0, P1, P2, P3] -> { RS0_affine_parallel[i0, i1, i2]; RS2_affine_parallel[i0, i1, i2, i3]; RS1_affine_parallel[i0, i1, i2, i3] }"
        child:
          schedule: "[P0, P1, P2, P3] -> [{ RS1_affine_parallel[i0, i1, i2, i3] -> [(i3)]; RS2_affine_parallel[i0, i1, i2, i3] -> [(21 + i3)]; RS0_affine_parallel[i0, i1, i2] -> [(0)] }]"
          permutable: 1
          coincident: [ 1 ]
          array_expansion: [ [ A_memref_alloca_res_10: 22, A_memref_alloca_res_7: 22, A_memref_alloca_res_4: 1 ] ]
          child:
            set:
            - # YOU ARE HERE
              filter: "[P0, P1, P2, P3] -> { RS2_affine_parallel[i0, i1, i2, i3]; RS1_affine_parallel[i0, i1, i2, i3] }"
              child:
                sequence:
                - filter: "[P0, P1, P2, P3] -> { RS2_affine_parallel[i0, i1, i2, i3] }"
                - filter: "[P0, P1, P2, P3] -> { RS1_affine_parallel[i0, i1, i2, i3] }"
            - filter: "[P0, P1, P2, P3] -> { RS0_affine_parallel[i0, i1, i2] }"
      - filter: "[P0, P1, P2, P3] -> { RS3_affine_parallel[i0, i1, i2] }"
Building ast for schedule node:
Executed: [P0, P1, P2, P3] -> { [[[] -> [i0, i1]] -> [i2]] -> RS1_affine_parallel[o0, o1, o2, o3] : o0 = i1 and o1 = i0 and o2 = 0 and o3 = i2 and i1 >= 0 and i1 < P3 and i0 >= 0 and i0 < P2 and i2 > 0 and 16i2 < P0 and P3 > 0 and i2 <= 20 }
domain: "[P0, P1, P2, P3] -> { RS0_affine_parallel[i0, i1, 0] : 0 <= i0 < P3 and 0 <= i1 < P2; RS2_affine_parallel[i0, i1, 0, i3] : 0 <= i0 < P3 and 0 <= i1 < P2 and i3 >= 0 and 16i3 < P0; RS1_affine_parallel[i0, i1, 0, i3] : 0 <= i0 < P3 and 0 <= i1 < P2 and i3 >= 0 and 16i3 < P0; RS3_affine_parallel[i0, i1, 0] : 0 <= i0 < P3 and 0 <= i1 < P2 }"
child:
  mark: "grid_parallel"
  child:
    schedule: "[P0, P1, P2, P3] -> [{ RS1_affine_parallel[i0, i1, i2, i3] -> [(i1)]; RS2_affine_parallel[i0, i1, i2, i3] -> [(i1)]; RS3_affine_parallel[i0, i1, i2] -> [(i1)]; RS0_affine_parallel[i0, i1, i2] -> [(i1)] }, { RS1_affine_parallel[i0, i1, i2, i3] -> [(i0)]; RS2_affine_parallel[i0, i1, i2, i3] -> [(i0)]; RS3_affine_parallel[i0, i1, i2] -> [(i0)]; RS0_affine_parallel[i0, i1, i2] -> [(i0)] }]"
    permutable: 1
    coincident: [ 1, 1 ]
    array_expansion: [ [ A_memref_alloca_res_10: 1, A_memref_alloca_res_7: 1, A_memref_alloca_res_4: 1 ], [ A_memref_alloca_res_10: 1, A_memref_alloca_res_7: 1, A_memref_alloca_res_4: 1 ] ]
    child:
      sequence:
      - filter: "[P0, P1, P2, P3] -> { RS0_affine_parallel[i0, i1, i2]; RS2_affine_parallel[i0, i1, i2, i3]; RS1_affine_parallel[i0, i1, i2, i3] }"
        child:
          schedule: "[P0, P1, P2, P3] -> [{ RS1_affine_parallel[i0, i1, i2, i3] -> [(i3)]; RS2_affine_parallel[i0, i1, i2, i3] -> [(21 + i3)]; RS0_affine_parallel[i0, i1, i2] -> [(0)] }]"
          permutable: 1
          coincident: [ 1 ]
          array_expansion: [ [ A_memref_alloca_res_10: 22, A_memref_alloca_res_7: 22, A_memref_alloca_res_4: 1 ] ]
          child:
            set:
            - filter: "[P0, P1, P2, P3] -> { RS2_affine_parallel[i0, i1, i2, i3]; RS1_affine_parallel[i0, i1, i2, i3] }"
              child:
                # YOU ARE HERE
                sequence:
                - filter: "[P0, P1, P2, P3] -> { RS2_affine_parallel[i0, i1, i2, i3] }"
                - filter: "[P0, P1, P2, P3] -> { RS1_affine_parallel[i0, i1, i2, i3] }"
            - filter: "[P0, P1, P2, P3] -> { RS0_affine_parallel[i0, i1, i2] }"
      - filter: "[P0, P1, P2, P3] -> { RS3_affine_parallel[i0, i1, i2] }"
Building ast for schedule node:
Executed: [P0, P1, P2, P3] -> { [[[] -> [i0, i1]] -> [i2]] -> RS1_affine_parallel[o0, o1, o2, o3] : o0 = i1 and o1 = i0 and o2 = 0 and o3 = i2 and i1 >= 0 and i1 < P3 and i0 >= 0 and i0 < P2 and i2 > 0 and 16i2 < P0 and P3 > 0 and i2 <= 20 }
domain: "[P0, P1, P2, P3] -> { RS0_affine_parallel[i0, i1, 0] : 0 <= i0 < P3 and 0 <= i1 < P2; RS2_affine_parallel[i0, i1, 0, i3] : 0 <= i0 < P3 and 0 <= i1 < P2 and i3 >= 0 and 16i3 < P0; RS1_affine_parallel[i0, i1, 0, i3] : 0 <= i0 < P3 and 0 <= i1 < P2 and i3 >= 0 and 16i3 < P0; RS3_affine_parallel[i0, i1, 0] : 0 <= i0 < P3 and 0 <= i1 < P2 }"
child:
  mark: "grid_parallel"
  child:
    schedule: "[P0, P1, P2, P3] -> [{ RS1_affine_parallel[i0, i1, i2, i3] -> [(i1)]; RS2_affine_parallel[i0, i1, i2, i3] -> [(i1)]; RS3_affine_parallel[i0, i1, i2] -> [(i1)]; RS0_affine_parallel[i0, i1, i2] -> [(i1)] }, { RS1_affine_parallel[i0, i1, i2, i3] -> [(i0)]; RS2_affine_parallel[i0, i1, i2, i3] -> [(i0)]; RS3_affine_parallel[i0, i1, i2] -> [(i0)]; RS0_affine_parallel[i0, i1, i2] -> [(i0)] }]"
    permutable: 1
    coincident: [ 1, 1 ]
    array_expansion: [ [ A_memref_alloca_res_10: 1, A_memref_alloca_res_7: 1, A_memref_alloca_res_4: 1 ], [ A_memref_alloca_res_10: 1, A_memref_alloca_res_7: 1, A_memref_alloca_res_4: 1 ] ]
    child:
      sequence:
      - filter: "[P0, P1, P2, P3] -> { RS0_affine_parallel[i0, i1, i2]; RS2_affine_parallel[i0, i1, i2, i3]; RS1_affine_parallel[i0, i1, i2, i3] }"
        child:
          schedule: "[P0, P1, P2, P3] -> [{ RS1_affine_parallel[i0, i1, i2, i3] -> [(i3)]; RS2_affine_parallel[i0, i1, i2, i3] -> [(21 + i3)]; RS0_affine_parallel[i0, i1, i2] -> [(0)] }]"
          permutable: 1
          coincident: [ 1 ]
          array_expansion: [ [ A_memref_alloca_res_10: 22, A_memref_alloca_res_7: 22, A_memref_alloca_res_4: 1 ] ]
          child:
            set:
            - filter: "[P0, P1, P2, P3] -> { RS2_affine_parallel[i0, i1, i2, i3]; RS1_affine_parallel[i0, i1, i2, i3] }"
              child:
                sequence:
                - # YOU ARE HERE
                  filter: "[P0, P1, P2, P3] -> { RS2_affine_parallel[i0, i1, i2, i3] }"
                - filter: "[P0, P1, P2, P3] -> { RS1_affine_parallel[i0, i1, i2, i3] }"
            - filter: "[P0, P1, P2, P3] -> { RS0_affine_parallel[i0, i1, i2] }"
      - filter: "[P0, P1, P2, P3] -> { RS3_affine_parallel[i0, i1, i2] }"
Building ast for schedule node:
Executed: [P0, P1, P2, P3] -> { [[[] -> [i0, i1]] -> [i2]] -> RS1_affine_parallel[o0, o1, o2, o3] : o0 = i1 and o1 = i0 and o2 = 0 and o3 = i2 and i1 >= 0 and i1 < P3 and i0 >= 0 and i0 < P2 and i2 > 0 and 16i2 < P0 and P3 > 0 and i2 <= 20 }
domain: "[P0, P1, P2, P3] -> { RS0_affine_parallel[i0, i1, 0] : 0 <= i0 < P3 and 0 <= i1 < P2; RS2_affine_parallel[i0, i1, 0, i3] : 0 <= i0 < P3 and 0 <= i1 < P2 and i3 >= 0 and 16i3 < P0; RS1_affine_parallel[i0, i1, 0, i3] : 0 <= i0 < P3 and 0 <= i1 < P2 and i3 >= 0 and 16i3 < P0; RS3_affine_parallel[i0, i1, 0] : 0 <= i0 < P3 and 0 <= i1 < P2 }"
child:
  mark: "grid_parallel"
  child:
    schedule: "[P0, P1, P2, P3] -> [{ RS1_affine_parallel[i0, i1, i2, i3] -> [(i1)]; RS2_affine_parallel[i0, i1, i2, i3] -> [(i1)]; RS3_affine_parallel[i0, i1, i2] -> [(i1)]; RS0_affine_parallel[i0, i1, i2] -> [(i1)] }, { RS1_affine_parallel[i0, i1, i2, i3] -> [(i0)]; RS2_affine_parallel[i0, i1, i2, i3] -> [(i0)]; RS3_affine_parallel[i0, i1, i2] -> [(i0)]; RS0_affine_parallel[i0, i1, i2] -> [(i0)] }]"
    permutable: 1
    coincident: [ 1, 1 ]
    array_expansion: [ [ A_memref_alloca_res_10: 1, A_memref_alloca_res_7: 1, A_memref_alloca_res_4: 1 ], [ A_memref_alloca_res_10: 1, A_memref_alloca_res_7: 1, A_memref_alloca_res_4: 1 ] ]
    child:
      sequence:
      - filter: "[P0, P1, P2, P3] -> { RS0_affine_parallel[i0, i1, i2]; RS2_affine_parallel[i0, i1, i2, i3]; RS1_affine_parallel[i0, i1, i2, i3] }"
        child:
          schedule: "[P0, P1, P2, P3] -> [{ RS1_affine_parallel[i0, i1, i2, i3] -> [(i3)]; RS2_affine_parallel[i0, i1, i2, i3] -> [(21 + i3)]; RS0_affine_parallel[i0, i1, i2] -> [(0)] }]"
          permutable: 1
          coincident: [ 1 ]
          array_expansion: [ [ A_memref_alloca_res_10: 22, A_memref_alloca_res_7: 22, A_memref_alloca_res_4: 1 ] ]
          child:
            set:
            - filter: "[P0, P1, P2, P3] -> { RS2_affine_parallel[i0, i1, i2, i3]; RS1_affine_parallel[i0, i1, i2, i3] }"
              child:
                sequence:
                - filter: "[P0, P1, P2, P3] -> { RS2_affine_parallel[i0, i1, i2, i3] }"
                - # YOU ARE HERE
                  filter: "[P0, P1, P2, P3] -> { RS1_affine_parallel[i0, i1, i2, i3] }"
            - filter: "[P0, P1, P2, P3] -> { RS0_affine_parallel[i0, i1, i2] }"
      - filter: "[P0, P1, P2, P3] -> { RS3_affine_parallel[i0, i1, i2] }"
Building ast for schedule node:
Executed: [P0, P1, P2, P3] -> { [[[] -> [i0, i1]] -> [i2]] -> RS1_affine_parallel[o0, o1, o2, o3] : o0 = i1 and o1 = i0 and o2 = 0 and o3 = i2 and i1 >= 0 and i1 < P3 and i0 >= 0 and i0 < P2 and i2 > 0 and 16i2 < P0 and P3 > 0 and i2 <= 20 }
domain: "[P0, P1, P2, P3] -> { RS0_affine_parallel[i0, i1, 0] : 0 <= i0 < P3 and 0 <= i1 < P2; RS2_affine_parallel[i0, i1, 0, i3] : 0 <= i0 < P3 and 0 <= i1 < P2 and i3 >= 0 and 16i3 < P0; RS1_affine_parallel[i0, i1, 0, i3] : 0 <= i0 < P3 and 0 <= i1 < P2 and i3 >= 0 and 16i3 < P0; RS3_affine_parallel[i0, i1, 0] : 0 <= i0 < P3 and 0 <= i1 < P2 }"
child:
  mark: "grid_parallel"
  child:
    schedule: "[P0, P1, P2, P3] -> [{ RS1_affine_parallel[i0, i1, i2, i3] -> [(i1)]; RS2_affine_parallel[i0, i1, i2, i3] -> [(i1)]; RS3_affine_parallel[i0, i1, i2] -> [(i1)]; RS0_affine_parallel[i0, i1, i2] -> [(i1)] }, { RS1_affine_parallel[i0, i1, i2, i3] -> [(i0)]; RS2_affine_parallel[i0, i1, i2, i3] -> [(i0)]; RS3_affine_parallel[i0, i1, i2] -> [(i0)]; RS0_affine_parallel[i0, i1, i2] -> [(i0)] }]"
    permutable: 1
    coincident: [ 1, 1 ]
    array_expansion: [ [ A_memref_alloca_res_10: 1, A_memref_alloca_res_7: 1, A_memref_alloca_res_4: 1 ], [ A_memref_alloca_res_10: 1, A_memref_alloca_res_7: 1, A_memref_alloca_res_4: 1 ] ]
    child:
      sequence:
      - filter: "[P0, P1, P2, P3] -> { RS0_affine_parallel[i0, i1, i2]; RS2_affine_parallel[i0, i1, i2, i3]; RS1_affine_parallel[i0, i1, i2, i3] }"
        child:
          schedule: "[P0, P1, P2, P3] -> [{ RS1_affine_parallel[i0, i1, i2, i3] -> [(i3)]; RS2_affine_parallel[i0, i1, i2, i3] -> [(21 + i3)]; RS0_affine_parallel[i0, i1, i2] -> [(0)] }]"
          permutable: 1
          coincident: [ 1 ]
          array_expansion: [ [ A_memref_alloca_res_10: 22, A_memref_alloca_res_7: 22, A_memref_alloca_res_4: 1 ] ]
          child:
            set:
            - filter: "[P0, P1, P2, P3] -> { RS2_affine_parallel[i0, i1, i2, i3]; RS1_affine_parallel[i0, i1, i2, i3] }"
              child:
                sequence:
                - filter: "[P0, P1, P2, P3] -> { RS2_affine_parallel[i0, i1, i2, i3] }"
                - filter: "[P0, P1, P2, P3] -> { RS1_affine_parallel[i0, i1, i2, i3] }"
                  child:
                    # YOU ARE HERE
                    leaf
            - filter: "[P0, P1, P2, P3] -> { RS0_affine_parallel[i0, i1, i2] }"
      - filter: "[P0, P1, P2, P3] -> { RS3_affine_parallel[i0, i1, i2] }"
We have reached a schedule wtih executed:
[P0, P1, P2, P3] -> { [[[] -> [i0, i1]] -> [i2]] -> RS1_affine_parallel[o0, o1, o2, o3] : o0 = i1 and o1 = i0 and o2 = 0 and o3 = i2 and i1 >= 0 and i1 < P3 and i0 >= 0 and i0 < P2 and i2 > 0 and 16i2 < P0 and P3 > 0 and i2 <= 20 }
Generating domain for:
[P0, P1, P2, P3] -> { [[[] -> [i0, i1]] -> [i2]] -> RS1_affine_parallel[o0, o1, o2, o3] : o0 = i1 and o1 = i0 and o2 = 0 and o3 = i2 and i1 >= 0 and i1 < P3 and i0 >= 0 and i0 < P2 and i2 > 0 and 16i2 < P0 and P3 > 0 and i2 <= 20 }

Building call from executed:
[P0, P1, P2, P3] -> { [[[] -> [i0, i1]] -> [i2]] -> RS1_affine_parallel[o0, o1, o2, o3] : o0 = i1 and o1 = i0 and o2 = 0 and o3 = i2 and i1 >= 0 and i1 < P3 and i0 >= 0 and i0 < P2 and i2 > 0 and 16i2 < P0 and P3 > 0 and i2 <= 20 }
BEFORE
[P0, P1, P2, P3] -> { [[[] -> [i0, i1]] -> [i2]] -> [A_memref_alloca_res_7[o0, o1, o2] -> RS1_affine_parallel[]] : exists (e0 = floor((1 - i2 + o2)/22): o0 = 0 and o1 = 0 and 22e0 = 1 - i2 + o2 and o2 >= 0 and o2 <= 21) }
PROJECTED OUT
[P0, P1, P2, P3] -> { [[[] -> [i0, i1]] -> [i2]] -> A_memref_alloca_res_7[o0, o1, o2] : exists (e0 = floor((1 - i2 + o2)/22): o0 = 0 and o1 = 0 and 22e0 = 1 - i2 + o2 and o2 >= 0 and o2 <= 21) }
Building call from executed:
[P0, P1, P2, P3] -> { [[[] -> [i0, i1]] -> [i2]] -> A_memref_alloca_res_7[o0, o1, o2] : exists (e0 = floor((1 - i2 + o2)/22): o0 = 0 and o1 = 0 and 22e0 = 1 - i2 + o2 and o2 >= 0 and o2 <= 21) }
BEFORE
[P0, P1, P2, P3] -> { [[[] -> [i0, i1]] -> [i2]] -> [A_memref_alloca_res_10[o0, o1, o2] -> RS1_affine_parallel[]] : exists (e0 = floor((1 - i2 + o2)/22): o0 = 0 and o1 = 0 and 22e0 = 1 - i2 + o2 and o2 >= 0 and o2 <= 21) }
PROJECTED OUT
[P0, P1, P2, P3] -> { [[[] -> [i0, i1]] -> [i2]] -> A_memref_alloca_res_10[o0, o1, o2] : exists (e0 = floor((1 - i2 + o2)/22): o0 = 0 and o1 = 0 and 22e0 = 1 - i2 + o2 and o2 >= 0 and o2 <= 21) }
Building call from executed:
[P0, P1, P2, P3] -> { [[[] -> [i0, i1]] -> [i2]] -> A_memref_alloca_res_10[o0, o1, o2] : exists (e0 = floor((1 - i2 + o2)/22): o0 = 0 and o1 = 0 and 22e0 = 1 - i2 + o2 and o2 >= 0 and o2 <= 21) }
TODO use the executed_ea
[P0, P1, P2, P3] -> { [[[] -> [i0, i1]] -> [i2]] -> [A_memref_alloca_res_10[o0, o1, o2] -> RS2_affine_parallel[]] : exists (e0 = floor((1 - i2 + o2)/22): o0 = 0 and o1 = 0 and 22e0 = 1 - i2 + o2 and o2 >= 0 and o2 <= 21); [[[] -> [i0, i1]] -> [i2]] -> [A_memref_alloca_res_4[o0, o1, o2] -> RS2_affine_parallel[]] : o0 = 0 and o1 = 0 and o2 = 0; [[[] -> [i0, i1]] -> [i2]] -> [A_memref_alloca_res_4[o0, o1, o2] -> RS0_affine_parallel[]] : o0 = 0 and o1 = 0 and o2 = 0; [[[] -> [i0, i1]] -> [i2]] -> [A_memref_alloca_res_7[o0, o1, o2] -> RS2_affine_parallel[]] : exists (e0 = floor((1 - i2 + o2)/22): o0 = 0 and o1 = 0 and 22e0 = 1 - i2 + o2 and o2 >= 0 and o2 <= 21); [[[] -> [i0, i1]] -> [i2]] -> [A_memref_alloca_res_7[o0, o1, o2] -> RS1_affine_parallel[]] : exists (e0 = floor((1 - i2 + o2)/22): o0 = 0 and o1 = 0 and 22e0 = 1 - i2 + o2 and o2 >= 0 and o2 <= 21); [[[] -> [i0, i1]] -> [i2]] -> [A_memref_alloca_res_10[o0, o1, o2] -> RS1_affine_parallel[]] : exists (e0 = floor((1 - i2 + o2)/22): o0 = 0 and o1 = 0 and 22e0 = 1 - i2 + o2 and o2 >= 0 and o2 <= 21) }
Generated graft for user:
user:
  op: call
  args:
  - id: RS1_affine_parallel@0x46988f10
  - id: c1
  - id: c0
  - val: 0
  - id: c2
  - op: call
    args:
    - id: A_memref_alloca_res_7@0x469c6770
    - val: 0
    - val: 0
    - op: sub
      args:
      - id: c2
      - val: 1
  - op: call
    args:
    - id: A_memref_alloca_res_10@0x46985f80
    - val: 0
    - val: 0
    - op: sub
      args:
      - id: c2
      - val: 1

Building ast for schedule node:
Executed: [P0, P1, P2, P3] -> { [[[] -> [i0, i1]] -> [i2]] -> RS1_affine_parallel[o0, o1, o2, o3] : o0 = i1 and o1 = i0 and o2 = 0 and o3 = i2 and i1 >= 0 and i1 < P3 and i0 >= 0 and i0 < P2 and i2 > 0 and 16i2 < P0 and P3 > 0 and i2 <= 20 }
domain: "[P0, P1, P2, P3] -> { RS0_affine_parallel[i0, i1, 0] : 0 <= i0 < P3 and 0 <= i1 < P2; RS2_affine_parallel[i0, i1, 0, i3] : 0 <= i0 < P3 and 0 <= i1 < P2 and i3 >= 0 and 16i3 < P0; RS1_affine_parallel[i0, i1, 0, i3] : 0 <= i0 < P3 and 0 <= i1 < P2 and i3 >= 0 and 16i3 < P0; RS3_affine_parallel[i0, i1, 0] : 0 <= i0 < P3 and 0 <= i1 < P2 }"
child:
  mark: "grid_parallel"
  child:
    schedule: "[P0, P1, P2, P3] -> [{ RS1_affine_parallel[i0, i1, i2, i3] -> [(i1)]; RS2_affine_parallel[i0, i1, i2, i3] -> [(i1)]; RS3_affine_parallel[i0, i1, i2] -> [(i1)]; RS0_affine_parallel[i0, i1, i2] -> [(i1)] }, { RS1_affine_parallel[i0, i1, i2, i3] -> [(i0)]; RS2_affine_parallel[i0, i1, i2, i3] -> [(i0)]; RS3_affine_parallel[i0, i1, i2] -> [(i0)]; RS0_affine_parallel[i0, i1, i2] -> [(i0)] }]"
    permutable: 1
    coincident: [ 1, 1 ]
    array_expansion: [ [ A_memref_alloca_res_10: 1, A_memref_alloca_res_7: 1, A_memref_alloca_res_4: 1 ], [ A_memref_alloca_res_10: 1, A_memref_alloca_res_7: 1, A_memref_alloca_res_4: 1 ] ]
    child:
      sequence:
      - filter: "[P0, P1, P2, P3] -> { RS0_affine_parallel[i0, i1, i2]; RS2_affine_parallel[i0, i1, i2, i3]; RS1_affine_parallel[i0, i1, i2, i3] }"
        child:
          schedule: "[P0, P1, P2, P3] -> [{ RS1_affine_parallel[i0, i1, i2, i3] -> [(i3)]; RS2_affine_parallel[i0, i1, i2, i3] -> [(21 + i3)]; RS0_affine_parallel[i0, i1, i2] -> [(0)] }]"
          permutable: 1
          coincident: [ 1 ]
          array_expansion: [ [ A_memref_alloca_res_10: 22, A_memref_alloca_res_7: 22, A_memref_alloca_res_4: 1 ] ]
          child:
            set:
            - filter: "[P0, P1, P2, P3] -> { RS2_affine_parallel[i0, i1, i2, i3]; RS1_affine_parallel[i0, i1, i2, i3] }"
              child:
                sequence:
                - filter: "[P0, P1, P2, P3] -> { RS2_affine_parallel[i0, i1, i2, i3] }"
                - filter: "[P0, P1, P2, P3] -> { RS1_affine_parallel[i0, i1, i2, i3] }"
            - # YOU ARE HERE
              filter: "[P0, P1, P2, P3] -> { RS0_affine_parallel[i0, i1, i2] }"
      - filter: "[P0, P1, P2, P3] -> { RS3_affine_parallel[i0, i1, i2] }"
Generated graft for band:
iterator:
  id: c2
init:
  val: 1
cond:
  op: le
  args:
  - id: c2
  - op: min
    args:
    - val: 20
    - op: fdiv_q
      args:
      - op: sub
        args:
        - id: P0@0x46974500
        - val: 1
      - val: 16
inc:
  val: 1
body:
  user:
    op: call
    args:
    - id: RS1_affine_parallel@0x46988f10
    - id: c1
    - id: c0
    - val: 0
    - id: c2
    - op: call
      args:
      - id: A_memref_alloca_res_7@0x469c6770
      - val: 0
      - val: 0
      - op: sub
        args:
        - id: c2
        - val: 1
    - op: call
      args:
      - id: A_memref_alloca_res_10@0x46985f80
      - val: 0
      - val: 0
      - op: sub
        args:
        - id: c2
        - val: 1
[P0, P1, P2, P3] -> { [[[] -> [i0, i1]] -> [i2]] : P0 >= 17 }
[P0, P1, P2, P3] -> { [[[] -> [i0, i1]] -> [i2]] }
graft for band end

Building ast for schedule node:
Executed: [P0, P1, P2, P3] -> { [[[] -> [i0, i1]] -> [i2]] -> RS2_affine_parallel[o0, o1, o2, o3] : o0 = i1 and o1 = i0 and o2 = 0 and o3 = -21 + i2 and i1 >= 0 and i1 < P3 and i0 >= 0 and i0 < P2 and i2 >= 21 and 16i2 <= 335 + P0 and P3 > 0; [[[] -> [i0, i1]] -> [i2]] -> RS1_affine_parallel[o0, o1, o2, o3] : o0 = i1 and o1 = i0 and o2 = 0 and o3 = i2 and i1 >= 0 and i1 < P3 and i0 >= 0 and i0 < P2 and i2 >= 21 and 16i2 < P0 and P3 > 0 }
domain: "[P0, P1, P2, P3] -> { RS0_affine_parallel[i0, i1, 0] : 0 <= i0 < P3 and 0 <= i1 < P2; RS2_affine_parallel[i0, i1, 0, i3] : 0 <= i0 < P3 and 0 <= i1 < P2 and i3 >= 0 and 16i3 < P0; RS1_affine_parallel[i0, i1, 0, i3] : 0 <= i0 < P3 and 0 <= i1 < P2 and i3 >= 0 and 16i3 < P0; RS3_affine_parallel[i0, i1, 0] : 0 <= i0 < P3 and 0 <= i1 < P2 }"
child:
  mark: "grid_parallel"
  child:
    schedule: "[P0, P1, P2, P3] -> [{ RS1_affine_parallel[i0, i1, i2, i3] -> [(i1)]; RS2_affine_parallel[i0, i1, i2, i3] -> [(i1)]; RS3_affine_parallel[i0, i1, i2] -> [(i1)]; RS0_affine_parallel[i0, i1, i2] -> [(i1)] }, { RS1_affine_parallel[i0, i1, i2, i3] -> [(i0)]; RS2_affine_parallel[i0, i1, i2, i3] -> [(i0)]; RS3_affine_parallel[i0, i1, i2] -> [(i0)]; RS0_affine_parallel[i0, i1, i2] -> [(i0)] }]"
    permutable: 1
    coincident: [ 1, 1 ]
    array_expansion: [ [ A_memref_alloca_res_10: 1, A_memref_alloca_res_7: 1, A_memref_alloca_res_4: 1 ], [ A_memref_alloca_res_10: 1, A_memref_alloca_res_7: 1, A_memref_alloca_res_4: 1 ] ]
    child:
      sequence:
      - filter: "[P0, P1, P2, P3] -> { RS0_affine_parallel[i0, i1, i2]; RS2_affine_parallel[i0, i1, i2, i3]; RS1_affine_parallel[i0, i1, i2, i3] }"
        child:
          schedule: "[P0, P1, P2, P3] -> [{ RS1_affine_parallel[i0, i1, i2, i3] -> [(i3)]; RS2_affine_parallel[i0, i1, i2, i3] -> [(21 + i3)]; RS0_affine_parallel[i0, i1, i2] -> [(0)] }]"
          permutable: 1
          coincident: [ 1 ]
          array_expansion: [ [ A_memref_alloca_res_10: 22, A_memref_alloca_res_7: 22, A_memref_alloca_res_4: 1 ] ]
          child:
            # YOU ARE HERE
            set:
            - filter: "[P0, P1, P2, P3] -> { RS2_affine_parallel[i0, i1, i2, i3]; RS1_affine_parallel[i0, i1, i2, i3] }"
              child:
                sequence:
                - filter: "[P0, P1, P2, P3] -> { RS2_affine_parallel[i0, i1, i2, i3] }"
                - filter: "[P0, P1, P2, P3] -> { RS1_affine_parallel[i0, i1, i2, i3] }"
            - filter: "[P0, P1, P2, P3] -> { RS0_affine_parallel[i0, i1, i2] }"
      - filter: "[P0, P1, P2, P3] -> { RS3_affine_parallel[i0, i1, i2] }"
Building ast for schedule node:
Executed: [P0, P1, P2, P3] -> { [[[] -> [i0, i1]] -> [i2]] -> RS2_affine_parallel[o0, o1, o2, o3] : o0 = i1 and o1 = i0 and o2 = 0 and o3 = -21 + i2 and i1 >= 0 and i1 < P3 and i0 >= 0 and i0 < P2 and i2 >= 21 and 16i2 <= 335 + P0 and P3 > 0; [[[] -> [i0, i1]] -> [i2]] -> RS1_affine_parallel[o0, o1, o2, o3] : o0 = i1 and o1 = i0 and o2 = 0 and o3 = i2 and i1 >= 0 and i1 < P3 and i0 >= 0 and i0 < P2 and i2 >= 21 and 16i2 < P0 and P3 > 0 }
domain: "[P0, P1, P2, P3] -> { RS0_affine_parallel[i0, i1, 0] : 0 <= i0 < P3 and 0 <= i1 < P2; RS2_affine_parallel[i0, i1, 0, i3] : 0 <= i0 < P3 and 0 <= i1 < P2 and i3 >= 0 and 16i3 < P0; RS1_affine_parallel[i0, i1, 0, i3] : 0 <= i0 < P3 and 0 <= i1 < P2 and i3 >= 0 and 16i3 < P0; RS3_affine_parallel[i0, i1, 0] : 0 <= i0 < P3 and 0 <= i1 < P2 }"
child:
  mark: "grid_parallel"
  child:
    schedule: "[P0, P1, P2, P3] -> [{ RS1_affine_parallel[i0, i1, i2, i3] -> [(i1)]; RS2_affine_parallel[i0, i1, i2, i3] -> [(i1)]; RS3_affine_parallel[i0, i1, i2] -> [(i1)]; RS0_affine_parallel[i0, i1, i2] -> [(i1)] }, { RS1_affine_parallel[i0, i1, i2, i3] -> [(i0)]; RS2_affine_parallel[i0, i1, i2, i3] -> [(i0)]; RS3_affine_parallel[i0, i1, i2] -> [(i0)]; RS0_affine_parallel[i0, i1, i2] -> [(i0)] }]"
    permutable: 1
    coincident: [ 1, 1 ]
    array_expansion: [ [ A_memref_alloca_res_10: 1, A_memref_alloca_res_7: 1, A_memref_alloca_res_4: 1 ], [ A_memref_alloca_res_10: 1, A_memref_alloca_res_7: 1, A_memref_alloca_res_4: 1 ] ]
    child:
      sequence:
      - filter: "[P0, P1, P2, P3] -> { RS0_affine_parallel[i0, i1, i2]; RS2_affine_parallel[i0, i1, i2, i3]; RS1_affine_parallel[i0, i1, i2, i3] }"
        child:
          schedule: "[P0, P1, P2, P3] -> [{ RS1_affine_parallel[i0, i1, i2, i3] -> [(i3)]; RS2_affine_parallel[i0, i1, i2, i3] -> [(21 + i3)]; RS0_affine_parallel[i0, i1, i2] -> [(0)] }]"
          permutable: 1
          coincident: [ 1 ]
          array_expansion: [ [ A_memref_alloca_res_10: 22, A_memref_alloca_res_7: 22, A_memref_alloca_res_4: 1 ] ]
          child:
            set:
            - # YOU ARE HERE
              filter: "[P0, P1, P2, P3] -> { RS2_affine_parallel[i0, i1, i2, i3]; RS1_affine_parallel[i0, i1, i2, i3] }"
              child:
                sequence:
                - filter: "[P0, P1, P2, P3] -> { RS2_affine_parallel[i0, i1, i2, i3] }"
                - filter: "[P0, P1, P2, P3] -> { RS1_affine_parallel[i0, i1, i2, i3] }"
            - filter: "[P0, P1, P2, P3] -> { RS0_affine_parallel[i0, i1, i2] }"
      - filter: "[P0, P1, P2, P3] -> { RS3_affine_parallel[i0, i1, i2] }"
Building ast for schedule node:
Executed: [P0, P1, P2, P3] -> { [[[] -> [i0, i1]] -> [i2]] -> RS2_affine_parallel[o0, o1, o2, o3] : o0 = i1 and o1 = i0 and o2 = 0 and o3 = -21 + i2 and i1 >= 0 and i1 < P3 and i0 >= 0 and i0 < P2 and i2 >= 21 and 16i2 <= 335 + P0 and P3 > 0; [[[] -> [i0, i1]] -> [i2]] -> RS1_affine_parallel[o0, o1, o2, o3] : o0 = i1 and o1 = i0 and o2 = 0 and o3 = i2 and i1 >= 0 and i1 < P3 and i0 >= 0 and i0 < P2 and i2 >= 21 and 16i2 < P0 and P3 > 0 }
domain: "[P0, P1, P2, P3] -> { RS0_affine_parallel[i0, i1, 0] : 0 <= i0 < P3 and 0 <= i1 < P2; RS2_affine_parallel[i0, i1, 0, i3] : 0 <= i0 < P3 and 0 <= i1 < P2 and i3 >= 0 and 16i3 < P0; RS1_affine_parallel[i0, i1, 0, i3] : 0 <= i0 < P3 and 0 <= i1 < P2 and i3 >= 0 and 16i3 < P0; RS3_affine_parallel[i0, i1, 0] : 0 <= i0 < P3 and 0 <= i1 < P2 }"
child:
  mark: "grid_parallel"
  child:
    schedule: "[P0, P1, P2, P3] -> [{ RS1_affine_parallel[i0, i1, i2, i3] -> [(i1)]; RS2_affine_parallel[i0, i1, i2, i3] -> [(i1)]; RS3_affine_parallel[i0, i1, i2] -> [(i1)]; RS0_affine_parallel[i0, i1, i2] -> [(i1)] }, { RS1_affine_parallel[i0, i1, i2, i3] -> [(i0)]; RS2_affine_parallel[i0, i1, i2, i3] -> [(i0)]; RS3_affine_parallel[i0, i1, i2] -> [(i0)]; RS0_affine_parallel[i0, i1, i2] -> [(i0)] }]"
    permutable: 1
    coincident: [ 1, 1 ]
    array_expansion: [ [ A_memref_alloca_res_10: 1, A_memref_alloca_res_7: 1, A_memref_alloca_res_4: 1 ], [ A_memref_alloca_res_10: 1, A_memref_alloca_res_7: 1, A_memref_alloca_res_4: 1 ] ]
    child:
      sequence:
      - filter: "[P0, P1, P2, P3] -> { RS0_affine_parallel[i0, i1, i2]; RS2_affine_parallel[i0, i1, i2, i3]; RS1_affine_parallel[i0, i1, i2, i3] }"
        child:
          schedule: "[P0, P1, P2, P3] -> [{ RS1_affine_parallel[i0, i1, i2, i3] -> [(i3)]; RS2_affine_parallel[i0, i1, i2, i3] -> [(21 + i3)]; RS0_affine_parallel[i0, i1, i2] -> [(0)] }]"
          permutable: 1
          coincident: [ 1 ]
          array_expansion: [ [ A_memref_alloca_res_10: 22, A_memref_alloca_res_7: 22, A_memref_alloca_res_4: 1 ] ]
          child:
            set:
            - filter: "[P0, P1, P2, P3] -> { RS2_affine_parallel[i0, i1, i2, i3]; RS1_affine_parallel[i0, i1, i2, i3] }"
              child:
                # YOU ARE HERE
                sequence:
                - filter: "[P0, P1, P2, P3] -> { RS2_affine_parallel[i0, i1, i2, i3] }"
                - filter: "[P0, P1, P2, P3] -> { RS1_affine_parallel[i0, i1, i2, i3] }"
            - filter: "[P0, P1, P2, P3] -> { RS0_affine_parallel[i0, i1, i2] }"
      - filter: "[P0, P1, P2, P3] -> { RS3_affine_parallel[i0, i1, i2] }"
Building ast for schedule node:
Executed: [P0, P1, P2, P3] -> { [[[] -> [i0, i1]] -> [i2]] -> RS2_affine_parallel[o0, o1, o2, o3] : o0 = i1 and o1 = i0 and o2 = 0 and o3 = -21 + i2 and i1 >= 0 and i1 < P3 and i0 >= 0 and i0 < P2 and i2 >= 21 and 16i2 <= 335 + P0 and P3 > 0; [[[] -> [i0, i1]] -> [i2]] -> RS1_affine_parallel[o0, o1, o2, o3] : o0 = i1 and o1 = i0 and o2 = 0 and o3 = i2 and i1 >= 0 and i1 < P3 and i0 >= 0 and i0 < P2 and i2 >= 21 and 16i2 < P0 and P3 > 0 }
domain: "[P0, P1, P2, P3] -> { RS0_affine_parallel[i0, i1, 0] : 0 <= i0 < P3 and 0 <= i1 < P2; RS2_affine_parallel[i0, i1, 0, i3] : 0 <= i0 < P3 and 0 <= i1 < P2 and i3 >= 0 and 16i3 < P0; RS1_affine_parallel[i0, i1, 0, i3] : 0 <= i0 < P3 and 0 <= i1 < P2 and i3 >= 0 and 16i3 < P0; RS3_affine_parallel[i0, i1, 0] : 0 <= i0 < P3 and 0 <= i1 < P2 }"
child:
  mark: "grid_parallel"
  child:
    schedule: "[P0, P1, P2, P3] -> [{ RS1_affine_parallel[i0, i1, i2, i3] -> [(i1)]; RS2_affine_parallel[i0, i1, i2, i3] -> [(i1)]; RS3_affine_parallel[i0, i1, i2] -> [(i1)]; RS0_affine_parallel[i0, i1, i2] -> [(i1)] }, { RS1_affine_parallel[i0, i1, i2, i3] -> [(i0)]; RS2_affine_parallel[i0, i1, i2, i3] -> [(i0)]; RS3_affine_parallel[i0, i1, i2] -> [(i0)]; RS0_affine_parallel[i0, i1, i2] -> [(i0)] }]"
    permutable: 1
    coincident: [ 1, 1 ]
    array_expansion: [ [ A_memref_alloca_res_10: 1, A_memref_alloca_res_7: 1, A_memref_alloca_res_4: 1 ], [ A_memref_alloca_res_10: 1, A_memref_alloca_res_7: 1, A_memref_alloca_res_4: 1 ] ]
    child:
      sequence:
      - filter: "[P0, P1, P2, P3] -> { RS0_affine_parallel[i0, i1, i2]; RS2_affine_parallel[i0, i1, i2, i3]; RS1_affine_parallel[i0, i1, i2, i3] }"
        child:
          schedule: "[P0, P1, P2, P3] -> [{ RS1_affine_parallel[i0, i1, i2, i3] -> [(i3)]; RS2_affine_parallel[i0, i1, i2, i3] -> [(21 + i3)]; RS0_affine_parallel[i0, i1, i2] -> [(0)] }]"
          permutable: 1
          coincident: [ 1 ]
          array_expansion: [ [ A_memref_alloca_res_10: 22, A_memref_alloca_res_7: 22, A_memref_alloca_res_4: 1 ] ]
          child:
            set:
            - filter: "[P0, P1, P2, P3] -> { RS2_affine_parallel[i0, i1, i2, i3]; RS1_affine_parallel[i0, i1, i2, i3] }"
              child:
                sequence:
                - # YOU ARE HERE
                  filter: "[P0, P1, P2, P3] -> { RS2_affine_parallel[i0, i1, i2, i3] }"
                - filter: "[P0, P1, P2, P3] -> { RS1_affine_parallel[i0, i1, i2, i3] }"
            - filter: "[P0, P1, P2, P3] -> { RS0_affine_parallel[i0, i1, i2] }"
      - filter: "[P0, P1, P2, P3] -> { RS3_affine_parallel[i0, i1, i2] }"
Building ast for schedule node:
Executed: [P0, P1, P2, P3] -> { [[[] -> [i0, i1]] -> [i2]] -> RS2_affine_parallel[o0, o1, o2, o3] : o0 = i1 and o1 = i0 and o2 = 0 and o3 = -21 + i2 and i1 >= 0 and i1 < P3 and i0 >= 0 and i0 < P2 and i2 >= 21 and 16i2 <= 335 + P0 and P3 > 0 }
domain: "[P0, P1, P2, P3] -> { RS0_affine_parallel[i0, i1, 0] : 0 <= i0 < P3 and 0 <= i1 < P2; RS2_affine_parallel[i0, i1, 0, i3] : 0 <= i0 < P3 and 0 <= i1 < P2 and i3 >= 0 and 16i3 < P0; RS1_affine_parallel[i0, i1, 0, i3] : 0 <= i0 < P3 and 0 <= i1 < P2 and i3 >= 0 and 16i3 < P0; RS3_affine_parallel[i0, i1, 0] : 0 <= i0 < P3 and 0 <= i1 < P2 }"
child:
  mark: "grid_parallel"
  child:
    schedule: "[P0, P1, P2, P3] -> [{ RS1_affine_parallel[i0, i1, i2, i3] -> [(i1)]; RS2_affine_parallel[i0, i1, i2, i3] -> [(i1)]; RS3_affine_parallel[i0, i1, i2] -> [(i1)]; RS0_affine_parallel[i0, i1, i2] -> [(i1)] }, { RS1_affine_parallel[i0, i1, i2, i3] -> [(i0)]; RS2_affine_parallel[i0, i1, i2, i3] -> [(i0)]; RS3_affine_parallel[i0, i1, i2] -> [(i0)]; RS0_affine_parallel[i0, i1, i2] -> [(i0)] }]"
    permutable: 1
    coincident: [ 1, 1 ]
    array_expansion: [ [ A_memref_alloca_res_10: 1, A_memref_alloca_res_7: 1, A_memref_alloca_res_4: 1 ], [ A_memref_alloca_res_10: 1, A_memref_alloca_res_7: 1, A_memref_alloca_res_4: 1 ] ]
    child:
      sequence:
      - filter: "[P0, P1, P2, P3] -> { RS0_affine_parallel[i0, i1, i2]; RS2_affine_parallel[i0, i1, i2, i3]; RS1_affine_parallel[i0, i1, i2, i3] }"
        child:
          schedule: "[P0, P1, P2, P3] -> [{ RS1_affine_parallel[i0, i1, i2, i3] -> [(i3)]; RS2_affine_parallel[i0, i1, i2, i3] -> [(21 + i3)]; RS0_affine_parallel[i0, i1, i2] -> [(0)] }]"
          permutable: 1
          coincident: [ 1 ]
          array_expansion: [ [ A_memref_alloca_res_10: 22, A_memref_alloca_res_7: 22, A_memref_alloca_res_4: 1 ] ]
          child:
            set:
            - filter: "[P0, P1, P2, P3] -> { RS2_affine_parallel[i0, i1, i2, i3]; RS1_affine_parallel[i0, i1, i2, i3] }"
              child:
                sequence:
                - filter: "[P0, P1, P2, P3] -> { RS2_affine_parallel[i0, i1, i2, i3] }"
                  child:
                    # YOU ARE HERE
                    leaf
                - filter: "[P0, P1, P2, P3] -> { RS1_affine_parallel[i0, i1, i2, i3] }"
            - filter: "[P0, P1, P2, P3] -> { RS0_affine_parallel[i0, i1, i2] }"
      - filter: "[P0, P1, P2, P3] -> { RS3_affine_parallel[i0, i1, i2] }"
We have reached a schedule wtih executed:
[P0, P1, P2, P3] -> { [[[] -> [i0, i1]] -> [i2]] -> RS2_affine_parallel[o0, o1, o2, o3] : o0 = i1 and o1 = i0 and o2 = 0 and o3 = -21 + i2 and i1 >= 0 and i1 < P3 and i0 >= 0 and i0 < P2 and i2 >= 21 and 16i2 <= 335 + P0 and P3 > 0 }
Generating domain for:
[P0, P1, P2, P3] -> { [[[] -> [i0, i1]] -> [i2]] -> RS2_affine_parallel[o0, o1, o2, o3] : o0 = i1 and o1 = i0 and o2 = 0 and o3 = -21 + i2 and i1 >= 0 and i1 < P3 and i0 >= 0 and i0 < P2 and i2 >= 21 and 16i2 <= 335 + P0 and P3 > 0 }

Building call from executed:
[P0, P1, P2, P3] -> { [[[] -> [i0, i1]] -> [i2]] -> RS2_affine_parallel[o0, o1, o2, o3] : o0 = i1 and o1 = i0 and o2 = 0 and o3 = -21 + i2 and i1 >= 0 and i1 < P3 and i0 >= 0 and i0 < P2 and i2 >= 21 and 16i2 <= 335 + P0 and P3 > 0 }
BEFORE
[P0, P1, P2, P3] -> { [[[] -> [i0, i1]] -> [i2]] -> [A_memref_alloca_res_4[o0, o1, o2] -> RS2_affine_parallel[]] : o0 = 0 and o1 = 0 and o2 = 0 }
PROJECTED OUT
[P0, P1, P2, P3] -> { [[[] -> [i0, i1]] -> [i2]] -> A_memref_alloca_res_4[o0, o1, o2] : o0 = 0 and o1 = 0 and o2 = 0 }
Building call from executed:
[P0, P1, P2, P3] -> { [[[] -> [i0, i1]] -> [i2]] -> A_memref_alloca_res_4[o0, o1, o2] : o0 = 0 and o1 = 0 and o2 = 0 }
BEFORE
[P0, P1, P2, P3] -> { [[[] -> [i0, i1]] -> [i2]] -> [A_memref_alloca_res_7[o0, o1, o2] -> RS2_affine_parallel[]] : exists (e0 = floor((1 - i2 + o2)/22): o0 = 0 and o1 = 0 and 22e0 = 1 - i2 + o2 and o2 >= 0 and o2 <= 21) }
PROJECTED OUT
[P0, P1, P2, P3] -> { [[[] -> [i0, i1]] -> [i2]] -> A_memref_alloca_res_7[o0, o1, o2] : exists (e0 = floor((1 - i2 + o2)/22): o0 = 0 and o1 = 0 and 22e0 = 1 - i2 + o2 and o2 >= 0 and o2 <= 21) }
Building call from executed:
[P0, P1, P2, P3] -> { [[[] -> [i0, i1]] -> [i2]] -> A_memref_alloca_res_7[o0, o1, o2] : exists (e0 = floor((1 - i2 + o2)/22): o0 = 0 and o1 = 0 and 22e0 = 1 - i2 + o2 and o2 >= 0 and o2 <= 21) }
BEFORE
[P0, P1, P2, P3] -> { [[[] -> [i0, i1]] -> [i2]] -> [A_memref_alloca_res_10[o0, o1, o2] -> RS2_affine_parallel[]] : exists (e0 = floor((1 - i2 + o2)/22): o0 = 0 and o1 = 0 and 22e0 = 1 - i2 + o2 and o2 >= 0 and o2 <= 21) }
PROJECTED OUT
[P0, P1, P2, P3] -> { [[[] -> [i0, i1]] -> [i2]] -> A_memref_alloca_res_10[o0, o1, o2] : exists (e0 = floor((1 - i2 + o2)/22): o0 = 0 and o1 = 0 and 22e0 = 1 - i2 + o2 and o2 >= 0 and o2 <= 21) }
Building call from executed:
[P0, P1, P2, P3] -> { [[[] -> [i0, i1]] -> [i2]] -> A_memref_alloca_res_10[o0, o1, o2] : exists (e0 = floor((1 - i2 + o2)/22): o0 = 0 and o1 = 0 and 22e0 = 1 - i2 + o2 and o2 >= 0 and o2 <= 21) }
TODO use the executed_ea
[P0, P1, P2, P3] -> { [[[] -> [i0, i1]] -> [i2]] -> [A_memref_alloca_res_10[o0, o1, o2] -> RS2_affine_parallel[]] : exists (e0 = floor((1 - i2 + o2)/22): o0 = 0 and o1 = 0 and 22e0 = 1 - i2 + o2 and o2 >= 0 and o2 <= 21); [[[] -> [i0, i1]] -> [i2]] -> [A_memref_alloca_res_4[o0, o1, o2] -> RS2_affine_parallel[]] : o0 = 0 and o1 = 0 and o2 = 0; [[[] -> [i0, i1]] -> [i2]] -> [A_memref_alloca_res_4[o0, o1, o2] -> RS0_affine_parallel[]] : o0 = 0 and o1 = 0 and o2 = 0; [[[] -> [i0, i1]] -> [i2]] -> [A_memref_alloca_res_7[o0, o1, o2] -> RS2_affine_parallel[]] : exists (e0 = floor((1 - i2 + o2)/22): o0 = 0 and o1 = 0 and 22e0 = 1 - i2 + o2 and o2 >= 0 and o2 <= 21); [[[] -> [i0, i1]] -> [i2]] -> [A_memref_alloca_res_7[o0, o1, o2] -> RS1_affine_parallel[]] : exists (e0 = floor((1 - i2 + o2)/22): o0 = 0 and o1 = 0 and 22e0 = 1 - i2 + o2 and o2 >= 0 and o2 <= 21); [[[] -> [i0, i1]] -> [i2]] -> [A_memref_alloca_res_10[o0, o1, o2] -> RS1_affine_parallel[]] : exists (e0 = floor((1 - i2 + o2)/22): o0 = 0 and o1 = 0 and 22e0 = 1 - i2 + o2 and o2 >= 0 and o2 <= 21) }
Generated graft for user:
user:
  op: call
  args:
  - id: RS2_affine_parallel@0x46998260
  - id: c1
  - id: c0
  - val: 0
  - op: sub
    args:
    - id: c2
    - val: 21
  - op: call
    args:
    - id: A_memref_alloca_res_4@0x469c72c0
    - val: 0
    - val: 0
    - val: 0
  - op: call
    args:
    - id: A_memref_alloca_res_7@0x469c6770
    - val: 0
    - val: 0
    - op: pdiv_r
      args:
      - op: sub
        args:
        - id: c2
        - val: 1
      - val: 22
  - op: call
    args:
    - id: A_memref_alloca_res_10@0x46985f80
    - val: 0
    - val: 0
    - op: pdiv_r
      args:
      - op: sub
        args:
        - id: c2
        - val: 1
      - val: 22

Building ast for schedule node:
Executed: [P0, P1, P2, P3] -> { [[[] -> [i0, i1]] -> [i2]] -> RS2_affine_parallel[o0, o1, o2, o3] : o0 = i1 and o1 = i0 and o2 = 0 and o3 = -21 + i2 and i1 >= 0 and i1 < P3 and i0 >= 0 and i0 < P2 and i2 >= 21 and 16i2 <= 335 + P0 and P3 > 0; [[[] -> [i0, i1]] -> [i2]] -> RS1_affine_parallel[o0, o1, o2, o3] : o0 = i1 and o1 = i0 and o2 = 0 and o3 = i2 and i1 >= 0 and i1 < P3 and i0 >= 0 and i0 < P2 and i2 >= 21 and 16i2 < P0 and P3 > 0 }
domain: "[P0, P1, P2, P3] -> { RS0_affine_parallel[i0, i1, 0] : 0 <= i0 < P3 and 0 <= i1 < P2; RS2_affine_parallel[i0, i1, 0, i3] : 0 <= i0 < P3 and 0 <= i1 < P2 and i3 >= 0 and 16i3 < P0; RS1_affine_parallel[i0, i1, 0, i3] : 0 <= i0 < P3 and 0 <= i1 < P2 and i3 >= 0 and 16i3 < P0; RS3_affine_parallel[i0, i1, 0] : 0 <= i0 < P3 and 0 <= i1 < P2 }"
child:
  mark: "grid_parallel"
  child:
    schedule: "[P0, P1, P2, P3] -> [{ RS1_affine_parallel[i0, i1, i2, i3] -> [(i1)]; RS2_affine_parallel[i0, i1, i2, i3] -> [(i1)]; RS3_affine_parallel[i0, i1, i2] -> [(i1)]; RS0_affine_parallel[i0, i1, i2] -> [(i1)] }, { RS1_affine_parallel[i0, i1, i2, i3] -> [(i0)]; RS2_affine_parallel[i0, i1, i2, i3] -> [(i0)]; RS3_affine_parallel[i0, i1, i2] -> [(i0)]; RS0_affine_parallel[i0, i1, i2] -> [(i0)] }]"
    permutable: 1
    coincident: [ 1, 1 ]
    array_expansion: [ [ A_memref_alloca_res_10: 1, A_memref_alloca_res_7: 1, A_memref_alloca_res_4: 1 ], [ A_memref_alloca_res_10: 1, A_memref_alloca_res_7: 1, A_memref_alloca_res_4: 1 ] ]
    child:
      sequence:
      - filter: "[P0, P1, P2, P3] -> { RS0_affine_parallel[i0, i1, i2]; RS2_affine_parallel[i0, i1, i2, i3]; RS1_affine_parallel[i0, i1, i2, i3] }"
        child:
          schedule: "[P0, P1, P2, P3] -> [{ RS1_affine_parallel[i0, i1, i2, i3] -> [(i3)]; RS2_affine_parallel[i0, i1, i2, i3] -> [(21 + i3)]; RS0_affine_parallel[i0, i1, i2] -> [(0)] }]"
          permutable: 1
          coincident: [ 1 ]
          array_expansion: [ [ A_memref_alloca_res_10: 22, A_memref_alloca_res_7: 22, A_memref_alloca_res_4: 1 ] ]
          child:
            set:
            - filter: "[P0, P1, P2, P3] -> { RS2_affine_parallel[i0, i1, i2, i3]; RS1_affine_parallel[i0, i1, i2, i3] }"
              child:
                sequence:
                - filter: "[P0, P1, P2, P3] -> { RS2_affine_parallel[i0, i1, i2, i3] }"
                - # YOU ARE HERE
                  filter: "[P0, P1, P2, P3] -> { RS1_affine_parallel[i0, i1, i2, i3] }"
            - filter: "[P0, P1, P2, P3] -> { RS0_affine_parallel[i0, i1, i2] }"
      - filter: "[P0, P1, P2, P3] -> { RS3_affine_parallel[i0, i1, i2] }"
Building ast for schedule node:
Executed: [P0, P1, P2, P3] -> { [[[] -> [i0, i1]] -> [i2]] -> RS1_affine_parallel[o0, o1, o2, o3] : o0 = i1 and o1 = i0 and o2 = 0 and o3 = i2 and i1 >= 0 and i1 < P3 and i0 >= 0 and i0 < P2 and i2 >= 21 and 16i2 < P0 and P3 > 0 }
domain: "[P0, P1, P2, P3] -> { RS0_affine_parallel[i0, i1, 0] : 0 <= i0 < P3 and 0 <= i1 < P2; RS2_affine_parallel[i0, i1, 0, i3] : 0 <= i0 < P3 and 0 <= i1 < P2 and i3 >= 0 and 16i3 < P0; RS1_affine_parallel[i0, i1, 0, i3] : 0 <= i0 < P3 and 0 <= i1 < P2 and i3 >= 0 and 16i3 < P0; RS3_affine_parallel[i0, i1, 0] : 0 <= i0 < P3 and 0 <= i1 < P2 }"
child:
  mark: "grid_parallel"
  child:
    schedule: "[P0, P1, P2, P3] -> [{ RS1_affine_parallel[i0, i1, i2, i3] -> [(i1)]; RS2_affine_parallel[i0, i1, i2, i3] -> [(i1)]; RS3_affine_parallel[i0, i1, i2] -> [(i1)]; RS0_affine_parallel[i0, i1, i2] -> [(i1)] }, { RS1_affine_parallel[i0, i1, i2, i3] -> [(i0)]; RS2_affine_parallel[i0, i1, i2, i3] -> [(i0)]; RS3_affine_parallel[i0, i1, i2] -> [(i0)]; RS0_affine_parallel[i0, i1, i2] -> [(i0)] }]"
    permutable: 1
    coincident: [ 1, 1 ]
    array_expansion: [ [ A_memref_alloca_res_10: 1, A_memref_alloca_res_7: 1, A_memref_alloca_res_4: 1 ], [ A_memref_alloca_res_10: 1, A_memref_alloca_res_7: 1, A_memref_alloca_res_4: 1 ] ]
    child:
      sequence:
      - filter: "[P0, P1, P2, P3] -> { RS0_affine_parallel[i0, i1, i2]; RS2_affine_parallel[i0, i1, i2, i3]; RS1_affine_parallel[i0, i1, i2, i3] }"
        child:
          schedule: "[P0, P1, P2, P3] -> [{ RS1_affine_parallel[i0, i1, i2, i3] -> [(i3)]; RS2_affine_parallel[i0, i1, i2, i3] -> [(21 + i3)]; RS0_affine_parallel[i0, i1, i2] -> [(0)] }]"
          permutable: 1
          coincident: [ 1 ]
          array_expansion: [ [ A_memref_alloca_res_10: 22, A_memref_alloca_res_7: 22, A_memref_alloca_res_4: 1 ] ]
          child:
            set:
            - filter: "[P0, P1, P2, P3] -> { RS2_affine_parallel[i0, i1, i2, i3]; RS1_affine_parallel[i0, i1, i2, i3] }"
              child:
                sequence:
                - filter: "[P0, P1, P2, P3] -> { RS2_affine_parallel[i0, i1, i2, i3] }"
                - filter: "[P0, P1, P2, P3] -> { RS1_affine_parallel[i0, i1, i2, i3] }"
                  child:
                    # YOU ARE HERE
                    leaf
            - filter: "[P0, P1, P2, P3] -> { RS0_affine_parallel[i0, i1, i2] }"
      - filter: "[P0, P1, P2, P3] -> { RS3_affine_parallel[i0, i1, i2] }"
We have reached a schedule wtih executed:
[P0, P1, P2, P3] -> { [[[] -> [i0, i1]] -> [i2]] -> RS1_affine_parallel[o0, o1, o2, o3] : o0 = i1 and o1 = i0 and o2 = 0 and o3 = i2 and i1 >= 0 and i1 < P3 and i0 >= 0 and i0 < P2 and i2 >= 21 and 16i2 < P0 and P3 > 0 }
Generating domain for:
[P0, P1, P2, P3] -> { [[[] -> [i0, i1]] -> [i2]] -> RS1_affine_parallel[o0, o1, o2, o3] : o0 = i1 and o1 = i0 and o2 = 0 and o3 = i2 and i1 >= 0 and i1 < P3 and i0 >= 0 and i0 < P2 and i2 >= 21 and 16i2 < P0 and P3 > 0 }

Building call from executed:
[P0, P1, P2, P3] -> { [[[] -> [i0, i1]] -> [i2]] -> RS1_affine_parallel[o0, o1, o2, o3] : o0 = i1 and o1 = i0 and o2 = 0 and o3 = i2 and i1 >= 0 and i1 < P3 and i0 >= 0 and i0 < P2 and i2 >= 21 and 16i2 < P0 and P3 > 0 }
BEFORE
[P0, P1, P2, P3] -> { [[[] -> [i0, i1]] -> [i2]] -> [A_memref_alloca_res_7[o0, o1, o2] -> RS1_affine_parallel[]] : exists (e0 = floor((1 - i2 + o2)/22): o0 = 0 and o1 = 0 and 22e0 = 1 - i2 + o2 and o2 >= 0 and o2 <= 21) }
PROJECTED OUT
[P0, P1, P2, P3] -> { [[[] -> [i0, i1]] -> [i2]] -> A_memref_alloca_res_7[o0, o1, o2] : exists (e0 = floor((1 - i2 + o2)/22): o0 = 0 and o1 = 0 and 22e0 = 1 - i2 + o2 and o2 >= 0 and o2 <= 21) }
Building call from executed:
[P0, P1, P2, P3] -> { [[[] -> [i0, i1]] -> [i2]] -> A_memref_alloca_res_7[o0, o1, o2] : exists (e0 = floor((1 - i2 + o2)/22): o0 = 0 and o1 = 0 and 22e0 = 1 - i2 + o2 and o2 >= 0 and o2 <= 21) }
BEFORE
[P0, P1, P2, P3] -> { [[[] -> [i0, i1]] -> [i2]] -> [A_memref_alloca_res_10[o0, o1, o2] -> RS1_affine_parallel[]] : exists (e0 = floor((1 - i2 + o2)/22): o0 = 0 and o1 = 0 and 22e0 = 1 - i2 + o2 and o2 >= 0 and o2 <= 21) }
PROJECTED OUT
[P0, P1, P2, P3] -> { [[[] -> [i0, i1]] -> [i2]] -> A_memref_alloca_res_10[o0, o1, o2] : exists (e0 = floor((1 - i2 + o2)/22): o0 = 0 and o1 = 0 and 22e0 = 1 - i2 + o2 and o2 >= 0 and o2 <= 21) }
Building call from executed:
[P0, P1, P2, P3] -> { [[[] -> [i0, i1]] -> [i2]] -> A_memref_alloca_res_10[o0, o1, o2] : exists (e0 = floor((1 - i2 + o2)/22): o0 = 0 and o1 = 0 and 22e0 = 1 - i2 + o2 and o2 >= 0 and o2 <= 21) }
TODO use the executed_ea
[P0, P1, P2, P3] -> { [[[] -> [i0, i1]] -> [i2]] -> [A_memref_alloca_res_10[o0, o1, o2] -> RS2_affine_parallel[]] : exists (e0 = floor((1 - i2 + o2)/22): o0 = 0 and o1 = 0 and 22e0 = 1 - i2 + o2 and o2 >= 0 and o2 <= 21); [[[] -> [i0, i1]] -> [i2]] -> [A_memref_alloca_res_4[o0, o1, o2] -> RS2_affine_parallel[]] : o0 = 0 and o1 = 0 and o2 = 0; [[[] -> [i0, i1]] -> [i2]] -> [A_memref_alloca_res_4[o0, o1, o2] -> RS0_affine_parallel[]] : o0 = 0 and o1 = 0 and o2 = 0; [[[] -> [i0, i1]] -> [i2]] -> [A_memref_alloca_res_7[o0, o1, o2] -> RS2_affine_parallel[]] : exists (e0 = floor((1 - i2 + o2)/22): o0 = 0 and o1 = 0 and 22e0 = 1 - i2 + o2 and o2 >= 0 and o2 <= 21); [[[] -> [i0, i1]] -> [i2]] -> [A_memref_alloca_res_7[o0, o1, o2] -> RS1_affine_parallel[]] : exists (e0 = floor((1 - i2 + o2)/22): o0 = 0 and o1 = 0 and 22e0 = 1 - i2 + o2 and o2 >= 0 and o2 <= 21); [[[] -> [i0, i1]] -> [i2]] -> [A_memref_alloca_res_10[o0, o1, o2] -> RS1_affine_parallel[]] : exists (e0 = floor((1 - i2 + o2)/22): o0 = 0 and o1 = 0 and 22e0 = 1 - i2 + o2 and o2 >= 0 and o2 <= 21) }
Generated graft for user:
user:
  op: call
  args:
  - id: RS1_affine_parallel@0x46988f10
  - id: c1
  - id: c0
  - val: 0
  - id: c2
  - op: call
    args:
    - id: A_memref_alloca_res_7@0x469c6770
    - val: 0
    - val: 0
    - op: pdiv_r
      args:
      - op: sub
        args:
        - id: c2
        - val: 1
      - val: 22
  - op: call
    args:
    - id: A_memref_alloca_res_10@0x46985f80
    - val: 0
    - val: 0
    - op: pdiv_r
      args:
      - op: sub
        args:
        - id: c2
        - val: 1
      - val: 22

Building ast for schedule node:
Executed: [P0, P1, P2, P3] -> { [[[] -> [i0, i1]] -> [i2]] -> RS2_affine_parallel[o0, o1, o2, o3] : o0 = i1 and o1 = i0 and o2 = 0 and o3 = -21 + i2 and i1 >= 0 and i1 < P3 and i0 >= 0 and i0 < P2 and i2 >= 21 and 16i2 <= 335 + P0 and P3 > 0; [[[] -> [i0, i1]] -> [i2]] -> RS1_affine_parallel[o0, o1, o2, o3] : o0 = i1 and o1 = i0 and o2 = 0 and o3 = i2 and i1 >= 0 and i1 < P3 and i0 >= 0 and i0 < P2 and i2 >= 21 and 16i2 < P0 and P3 > 0 }
domain: "[P0, P1, P2, P3] -> { RS0_affine_parallel[i0, i1, 0] : 0 <= i0 < P3 and 0 <= i1 < P2; RS2_affine_parallel[i0, i1, 0, i3] : 0 <= i0 < P3 and 0 <= i1 < P2 and i3 >= 0 and 16i3 < P0; RS1_affine_parallel[i0, i1, 0, i3] : 0 <= i0 < P3 and 0 <= i1 < P2 and i3 >= 0 and 16i3 < P0; RS3_affine_parallel[i0, i1, 0] : 0 <= i0 < P3 and 0 <= i1 < P2 }"
child:
  mark: "grid_parallel"
  child:
    schedule: "[P0, P1, P2, P3] -> [{ RS1_affine_parallel[i0, i1, i2, i3] -> [(i1)]; RS2_affine_parallel[i0, i1, i2, i3] -> [(i1)]; RS3_affine_parallel[i0, i1, i2] -> [(i1)]; RS0_affine_parallel[i0, i1, i2] -> [(i1)] }, { RS1_affine_parallel[i0, i1, i2, i3] -> [(i0)]; RS2_affine_parallel[i0, i1, i2, i3] -> [(i0)]; RS3_affine_parallel[i0, i1, i2] -> [(i0)]; RS0_affine_parallel[i0, i1, i2] -> [(i0)] }]"
    permutable: 1
    coincident: [ 1, 1 ]
    array_expansion: [ [ A_memref_alloca_res_10: 1, A_memref_alloca_res_7: 1, A_memref_alloca_res_4: 1 ], [ A_memref_alloca_res_10: 1, A_memref_alloca_res_7: 1, A_memref_alloca_res_4: 1 ] ]
    child:
      sequence:
      - filter: "[P0, P1, P2, P3] -> { RS0_affine_parallel[i0, i1, i2]; RS2_affine_parallel[i0, i1, i2, i3]; RS1_affine_parallel[i0, i1, i2, i3] }"
        child:
          schedule: "[P0, P1, P2, P3] -> [{ RS1_affine_parallel[i0, i1, i2, i3] -> [(i3)]; RS2_affine_parallel[i0, i1, i2, i3] -> [(21 + i3)]; RS0_affine_parallel[i0, i1, i2] -> [(0)] }]"
          permutable: 1
          coincident: [ 1 ]
          array_expansion: [ [ A_memref_alloca_res_10: 22, A_memref_alloca_res_7: 22, A_memref_alloca_res_4: 1 ] ]
          child:
            set:
            - filter: "[P0, P1, P2, P3] -> { RS2_affine_parallel[i0, i1, i2, i3]; RS1_affine_parallel[i0, i1, i2, i3] }"
              child:
                sequence:
                - filter: "[P0, P1, P2, P3] -> { RS2_affine_parallel[i0, i1, i2, i3] }"
                - filter: "[P0, P1, P2, P3] -> { RS1_affine_parallel[i0, i1, i2, i3] }"
            - # YOU ARE HERE
              filter: "[P0, P1, P2, P3] -> { RS0_affine_parallel[i0, i1, i2] }"
      - filter: "[P0, P1, P2, P3] -> { RS3_affine_parallel[i0, i1, i2] }"
Generated graft for band:
iterator:
  id: c2
init:
  val: 21
cond:
  op: le
  args:
  - id: c2
  - op: add
    args:
    - op: fdiv_q
      args:
      - op: sub
        args:
        - id: P0@0x46974500
        - val: 1
      - val: 16
    - val: 21
inc:
  val: 1
body:
- user:
    op: call
    args:
    - id: RS2_affine_parallel@0x46998260
    - id: c1
    - id: c0
    - val: 0
    - op: sub
      args:
      - id: c2
      - val: 21
    - op: call
      args:
      - id: A_memref_alloca_res_4@0x469c72c0
      - val: 0
      - val: 0
      - val: 0
    - op: call
      args:
      - id: A_memref_alloca_res_7@0x469c6770
      - val: 0
      - val: 0
      - op: pdiv_r
        args:
        - op: sub
          args:
          - id: c2
          - val: 1
        - val: 22
    - op: call
      args:
      - id: A_memref_alloca_res_10@0x46985f80
      - val: 0
      - val: 0
      - op: pdiv_r
        args:
        - op: sub
          args:
          - id: c2
          - val: 1
        - val: 22
- guard:
    op: ge
    args:
    - id: P0@0x46974500
    - op: add
      args:
      - op: mul
        args:
        - val: 16
        - id: c2
      - val: 1
  then:
    user:
      op: call
      args:
      - id: RS1_affine_parallel@0x46988f10
      - id: c1
      - id: c0
      - val: 0
      - id: c2
      - op: call
        args:
        - id: A_memref_alloca_res_7@0x469c6770
        - val: 0
        - val: 0
        - op: pdiv_r
          args:
          - op: sub
            args:
            - id: c2
            - val: 1
          - val: 22
      - op: call
        args:
        - id: A_memref_alloca_res_10@0x46985f80
        - val: 0
        - val: 0
        - op: pdiv_r
          args:
          - op: sub
            args:
            - id: c2
            - val: 1
          - val: 22
[P0, P1, P2, P3] -> { [[[] -> [i0, i1]] -> [i2]] : P0 > 0 }
[P0, P1, P2, P3] -> { [[[] -> [i0, i1]] -> [i2]] }
graft for band end

Building ast for schedule node:
Executed: [P0, P1, P2, P3] -> { [[] -> [i0, i1]] -> RS1_affine_parallel[o0, o1, o2, o3] : o0 = i1 and o1 = i0 and o2 = 0 and i1 >= 0 and i1 < P3 and i0 >= 0 and i0 < P2 and o3 >= 0 and 16o3 < P0 and P3 > 0; [[] -> [i0, i1]] -> RS2_affine_parallel[o0, o1, o2, o3] : o0 = i1 and o1 = i0 and o2 = 0 and i1 >= 0 and i1 < P3 and i0 >= 0 and i0 < P2 and o3 >= 0 and 16o3 < P0 and P3 > 0; [[] -> [i0, i1]] -> RS0_affine_parallel[o0, o1, o2] : o0 = i1 and o1 = i0 and o2 = 0 and i1 >= 0 and i1 < P3 and i0 >= 0 and i0 < P2 and P3 > 0; [[] -> [i0, i1]] -> RS3_affine_parallel[o0, o1, o2] : o0 = i1 and o1 = i0 and o2 = 0 and i1 >= 0 and i1 < P3 and i0 >= 0 and i0 < P2 and P3 > 0 }
domain: "[P0, P1, P2, P3] -> { RS0_affine_parallel[i0, i1, 0] : 0 <= i0 < P3 and 0 <= i1 < P2; RS2_affine_parallel[i0, i1, 0, i3] : 0 <= i0 < P3 and 0 <= i1 < P2 and i3 >= 0 and 16i3 < P0; RS1_affine_parallel[i0, i1, 0, i3] : 0 <= i0 < P3 and 0 <= i1 < P2 and i3 >= 0 and 16i3 < P0; RS3_affine_parallel[i0, i1, 0] : 0 <= i0 < P3 and 0 <= i1 < P2 }"
child:
  mark: "grid_parallel"
  child:
    schedule: "[P0, P1, P2, P3] -> [{ RS1_affine_parallel[i0, i1, i2, i3] -> [(i1)]; RS2_affine_parallel[i0, i1, i2, i3] -> [(i1)]; RS3_affine_parallel[i0, i1, i2] -> [(i1)]; RS0_affine_parallel[i0, i1, i2] -> [(i1)] }, { RS1_affine_parallel[i0, i1, i2, i3] -> [(i0)]; RS2_affine_parallel[i0, i1, i2, i3] -> [(i0)]; RS3_affine_parallel[i0, i1, i2] -> [(i0)]; RS0_affine_parallel[i0, i1, i2] -> [(i0)] }]"
    permutable: 1
    coincident: [ 1, 1 ]
    array_expansion: [ [ A_memref_alloca_res_10: 1, A_memref_alloca_res_7: 1, A_memref_alloca_res_4: 1 ], [ A_memref_alloca_res_10: 1, A_memref_alloca_res_7: 1, A_memref_alloca_res_4: 1 ] ]
    child:
      sequence:
      - filter: "[P0, P1, P2, P3] -> { RS0_affine_parallel[i0, i1, i2]; RS2_affine_parallel[i0, i1, i2, i3]; RS1_affine_parallel[i0, i1, i2, i3] }"
        child:
          schedule: "[P0, P1, P2, P3] -> [{ RS1_affine_parallel[i0, i1, i2, i3] -> [(i3)]; RS2_affine_parallel[i0, i1, i2, i3] -> [(21 + i3)]; RS0_affine_parallel[i0, i1, i2] -> [(0)] }]"
          permutable: 1
          coincident: [ 1 ]
          array_expansion: [ [ A_memref_alloca_res_10: 22, A_memref_alloca_res_7: 22, A_memref_alloca_res_4: 1 ] ]
          child:
            set:
            - filter: "[P0, P1, P2, P3] -> { RS2_affine_parallel[i0, i1, i2, i3]; RS1_affine_parallel[i0, i1, i2, i3] }"
              child:
                sequence:
                - filter: "[P0, P1, P2, P3] -> { RS2_affine_parallel[i0, i1, i2, i3] }"
                - filter: "[P0, P1, P2, P3] -> { RS1_affine_parallel[i0, i1, i2, i3] }"
            - filter: "[P0, P1, P2, P3] -> { RS0_affine_parallel[i0, i1, i2] }"
      - # YOU ARE HERE
        filter: "[P0, P1, P2, P3] -> { RS3_affine_parallel[i0, i1, i2] }"
Building ast for schedule node:
Executed: [P0, P1, P2, P3] -> { [[] -> [i0, i1]] -> RS3_affine_parallel[o0, o1, o2] : o0 = i1 and o1 = i0 and o2 = 0 and i1 >= 0 and i1 < P3 and i0 >= 0 and i0 < P2 and P3 > 0 }
domain: "[P0, P1, P2, P3] -> { RS0_affine_parallel[i0, i1, 0] : 0 <= i0 < P3 and 0 <= i1 < P2; RS2_affine_parallel[i0, i1, 0, i3] : 0 <= i0 < P3 and 0 <= i1 < P2 and i3 >= 0 and 16i3 < P0; RS1_affine_parallel[i0, i1, 0, i3] : 0 <= i0 < P3 and 0 <= i1 < P2 and i3 >= 0 and 16i3 < P0; RS3_affine_parallel[i0, i1, 0] : 0 <= i0 < P3 and 0 <= i1 < P2 }"
child:
  mark: "grid_parallel"
  child:
    schedule: "[P0, P1, P2, P3] -> [{ RS1_affine_parallel[i0, i1, i2, i3] -> [(i1)]; RS2_affine_parallel[i0, i1, i2, i3] -> [(i1)]; RS3_affine_parallel[i0, i1, i2] -> [(i1)]; RS0_affine_parallel[i0, i1, i2] -> [(i1)] }, { RS1_affine_parallel[i0, i1, i2, i3] -> [(i0)]; RS2_affine_parallel[i0, i1, i2, i3] -> [(i0)]; RS3_affine_parallel[i0, i1, i2] -> [(i0)]; RS0_affine_parallel[i0, i1, i2] -> [(i0)] }]"
    permutable: 1
    coincident: [ 1, 1 ]
    array_expansion: [ [ A_memref_alloca_res_10: 1, A_memref_alloca_res_7: 1, A_memref_alloca_res_4: 1 ], [ A_memref_alloca_res_10: 1, A_memref_alloca_res_7: 1, A_memref_alloca_res_4: 1 ] ]
    child:
      sequence:
      - filter: "[P0, P1, P2, P3] -> { RS0_affine_parallel[i0, i1, i2]; RS2_affine_parallel[i0, i1, i2, i3]; RS1_affine_parallel[i0, i1, i2, i3] }"
        child:
          schedule: "[P0, P1, P2, P3] -> [{ RS1_affine_parallel[i0, i1, i2, i3] -> [(i3)]; RS2_affine_parallel[i0, i1, i2, i3] -> [(21 + i3)]; RS0_affine_parallel[i0, i1, i2] -> [(0)] }]"
          permutable: 1
          coincident: [ 1 ]
          array_expansion: [ [ A_memref_alloca_res_10: 22, A_memref_alloca_res_7: 22, A_memref_alloca_res_4: 1 ] ]
          child:
            set:
            - filter: "[P0, P1, P2, P3] -> { RS2_affine_parallel[i0, i1, i2, i3]; RS1_affine_parallel[i0, i1, i2, i3] }"
              child:
                sequence:
                - filter: "[P0, P1, P2, P3] -> { RS2_affine_parallel[i0, i1, i2, i3] }"
                - filter: "[P0, P1, P2, P3] -> { RS1_affine_parallel[i0, i1, i2, i3] }"
            - filter: "[P0, P1, P2, P3] -> { RS0_affine_parallel[i0, i1, i2] }"
      - filter: "[P0, P1, P2, P3] -> { RS3_affine_parallel[i0, i1, i2] }"
        child:
          # YOU ARE HERE
          leaf
We have reached a schedule wtih executed:
[P0, P1, P2, P3] -> { [[] -> [i0, i1]] -> RS3_affine_parallel[o0, o1, o2] : o0 = i1 and o1 = i0 and o2 = 0 and i1 >= 0 and i1 < P3 and i0 >= 0 and i0 < P2 and P3 > 0 }
Generating domain for:
[P0, P1, P2, P3] -> { [[] -> [i0, i1]] -> RS3_affine_parallel[o0, o1, o2] : o0 = i1 and o1 = i0 and o2 = 0 and i1 >= 0 and i1 < P3 and i0 >= 0 and i0 < P2 and P3 > 0 }

Building call from executed:
[P0, P1, P2, P3] -> { [[] -> [i0, i1]] -> RS3_affine_parallel[o0, o1, o2] : o0 = i1 and o1 = i0 and o2 = 0 and i1 >= 0 and i1 < P3 and i0 >= 0 and i0 < P2 and P3 > 0 }
BEFORE
[P0, P1, P2, P3] -> { [[] -> [i0, i1]] -> [A_memref_alloca_res_4[o0, o1] -> RS3_affine_parallel[]] : o0 = 0 and o1 = 0 }
PROJECTED OUT
[P0, P1, P2, P3] -> { [[] -> [i0, i1]] -> A_memref_alloca_res_4[o0, o1] : o0 = 0 and o1 = 0 }
Building call from executed:
[P0, P1, P2, P3] -> { [[] -> [i0, i1]] -> A_memref_alloca_res_4[o0, o1] : o0 = 0 and o1 = 0 }
TODO use the executed_ea
[P0, P1, P2, P3] -> { [[] -> [i0, i1]] -> [A_memref_alloca_res_7[o0, o1] -> RS1_affine_parallel[]] : o0 = 0 and o1 = 0; [[] -> [i0, i1]] -> [A_memref_alloca_res_4[o0, o1] -> RS2_affine_parallel[]] : o0 = 0 and o1 = 0; [[] -> [i0, i1]] -> [A_memref_alloca_res_4[o0, o1] -> RS0_affine_parallel[]] : o0 = 0 and o1 = 0; [[] -> [i0, i1]] -> [A_memref_alloca_res_10[o0, o1] -> RS2_affine_parallel[]] : o0 = 0 and o1 = 0; [[] -> [i0, i1]] -> [A_memref_alloca_res_4[o0, o1] -> RS3_affine_parallel[]] : o0 = 0 and o1 = 0; [[] -> [i0, i1]] -> [A_memref_alloca_res_7[o0, o1] -> RS2_affine_parallel[]] : o0 = 0 and o1 = 0; [[] -> [i0, i1]] -> [A_memref_alloca_res_10[o0, o1] -> RS1_affine_parallel[]] : o0 = 0 and o1 = 0 }
Generated graft for user:
user:
  op: call
  args:
  - id: RS3_affine_parallel@0x4699ff70
  - id: c1
  - id: c0
  - val: 0
  - op: call
    args:
    - id: A_memref_alloca_res_4@0x469c72c0
    - val: 0
    - val: 0

Generated graft for band:
iterator:
  id: c1
init:
  val: 0
cond:
  op: lt
  args:
  - id: c1
  - id: P3@0x4698d660
inc:
  val: 1
body:
- 
  - guard:
      op: ge
      args:
      - id: P0@0x46974500
      - val: 1
    then:
      user:
        op: call
        args:
        - id: RS1_affine_parallel@0x46988f10
        - id: c1
        - id: c0
        - val: 0
        - val: 0
        - op: call
          args:
          - id: A_memref_alloca_res_7@0x469c6770
          - val: 0
          - val: 0
          - val: 21
        - op: call
          args:
          - id: A_memref_alloca_res_10@0x46985f80
          - val: 0
          - val: 0
          - val: 21
  - user:
      op: call
      args:
      - id: RS0_affine_parallel@0x4699ea60
      - id: c1
      - id: c0
      - val: 0
      - op: call
        args:
        - id: A_memref_alloca_res_4@0x469c72c0
        - val: 0
        - val: 0
        - val: 0
- iterator:
    id: c2
  init:
    val: 1
  cond:
    op: le
    args:
    - id: c2
    - op: min
      args:
      - val: 20
      - op: fdiv_q
        args:
        - op: sub
          args:
          - id: P0@0x46974500
          - val: 1
        - val: 16
  inc:
    val: 1
  body:
    user:
      op: call
      args:
      - id: RS1_affine_parallel@0x46988f10
      - id: c1
      - id: c0
      - val: 0
      - id: c2
      - op: call
        args:
        - id: A_memref_alloca_res_7@0x469c6770
        - val: 0
        - val: 0
        - op: sub
          args:
          - id: c2
          - val: 1
      - op: call
        args:
        - id: A_memref_alloca_res_10@0x46985f80
        - val: 0
        - val: 0
        - op: sub
          args:
          - id: c2
          - val: 1
- iterator:
    id: c2
  init:
    val: 21
  cond:
    op: le
    args:
    - id: c2
    - op: add
      args:
      - op: fdiv_q
        args:
        - op: sub
          args:
          - id: P0@0x46974500
          - val: 1
        - val: 16
      - val: 21
  inc:
    val: 1
  body:
  - user:
      op: call
      args:
      - id: RS2_affine_parallel@0x46998260
      - id: c1
      - id: c0
      - val: 0
      - op: sub
        args:
        - id: c2
        - val: 21
      - op: call
        args:
        - id: A_memref_alloca_res_4@0x469c72c0
        - val: 0
        - val: 0
        - val: 0
      - op: call
        args:
        - id: A_memref_alloca_res_7@0x469c6770
        - val: 0
        - val: 0
        - op: pdiv_r
          args:
          - op: sub
            args:
            - id: c2
            - val: 1
          - val: 22
      - op: call
        args:
        - id: A_memref_alloca_res_10@0x46985f80
        - val: 0
        - val: 0
        - op: pdiv_r
          args:
          - op: sub
            args:
            - id: c2
            - val: 1
          - val: 22
  - guard:
      op: ge
      args:
      - id: P0@0x46974500
      - op: add
        args:
        - op: mul
          args:
          - val: 16
          - id: c2
        - val: 1
    then:
      user:
        op: call
        args:
        - id: RS1_affine_parallel@0x46988f10
        - id: c1
        - id: c0
        - val: 0
        - id: c2
        - op: call
          args:
          - id: A_memref_alloca_res_7@0x469c6770
          - val: 0
          - val: 0
          - op: pdiv_r
            args:
            - op: sub
              args:
              - id: c2
              - val: 1
            - val: 22
        - op: call
          args:
          - id: A_memref_alloca_res_10@0x46985f80
          - val: 0
          - val: 0
          - op: pdiv_r
            args:
            - op: sub
              args:
              - id: c2
              - val: 1
            - val: 22
- user:
    op: call
    args:
    - id: RS3_affine_parallel@0x4699ff70
    - id: c1
    - id: c0
    - val: 0
    - op: call
      args:
      - id: A_memref_alloca_res_4@0x469c72c0
      - val: 0
      - val: 0
[P0, P1, P2, P3] -> { [[] -> [i0, i1]] : P3 > 0 }
[P0, P1, P2, P3] -> { [[] -> [i0, i1]] }
graft for band end

Generated graft for band:
iterator:
  id: c0
init:
  val: 0
cond:
  op: lt
  args:
  - id: c0
  - id: P2@0x4698d570
inc:
  val: 1
body:
  iterator:
    id: c1
  init:
    val: 0
  cond:
    op: lt
    args:
    - id: c1
    - id: P3@0x4698d660
  inc:
    val: 1
  body:
  - 
    - guard:
        op: ge
        args:
        - id: P0@0x46974500
        - val: 1
      then:
        user:
          op: call
          args:
          - id: RS1_affine_parallel@0x46988f10
          - id: c1
          - id: c0
          - val: 0
          - val: 0
          - op: call
            args:
            - id: A_memref_alloca_res_7@0x469c6770
            - val: 0
            - val: 0
            - val: 21
          - op: call
            args:
            - id: A_memref_alloca_res_10@0x46985f80
            - val: 0
            - val: 0
            - val: 21
    - user:
        op: call
        args:
        - id: RS0_affine_parallel@0x4699ea60
        - id: c1
        - id: c0
        - val: 0
        - op: call
          args:
          - id: A_memref_alloca_res_4@0x469c72c0
          - val: 0
          - val: 0
          - val: 0
  - iterator:
      id: c2
    init:
      val: 1
    cond:
      op: le
      args:
      - id: c2
      - op: min
        args:
        - val: 20
        - op: fdiv_q
          args:
          - op: sub
            args:
            - id: P0@0x46974500
            - val: 1
          - val: 16
    inc:
      val: 1
    body:
      user:
        op: call
        args:
        - id: RS1_affine_parallel@0x46988f10
        - id: c1
        - id: c0
        - val: 0
        - id: c2
        - op: call
          args:
          - id: A_memref_alloca_res_7@0x469c6770
          - val: 0
          - val: 0
          - op: sub
            args:
            - id: c2
            - val: 1
        - op: call
          args:
          - id: A_memref_alloca_res_10@0x46985f80
          - val: 0
          - val: 0
          - op: sub
            args:
            - id: c2
            - val: 1
  - iterator:
      id: c2
    init:
      val: 21
    cond:
      op: le
      args:
      - id: c2
      - op: add
        args:
        - op: fdiv_q
          args:
          - op: sub
            args:
            - id: P0@0x46974500
            - val: 1
          - val: 16
        - val: 21
    inc:
      val: 1
    body:
    - user:
        op: call
        args:
        - id: RS2_affine_parallel@0x46998260
        - id: c1
        - id: c0
        - val: 0
        - op: sub
          args:
          - id: c2
          - val: 21
        - op: call
          args:
          - id: A_memref_alloca_res_4@0x469c72c0
          - val: 0
          - val: 0
          - val: 0
        - op: call
          args:
          - id: A_memref_alloca_res_7@0x469c6770
          - val: 0
          - val: 0
          - op: pdiv_r
            args:
            - op: sub
              args:
              - id: c2
              - val: 1
            - val: 22
        - op: call
          args:
          - id: A_memref_alloca_res_10@0x46985f80
          - val: 0
          - val: 0
          - op: pdiv_r
            args:
            - op: sub
              args:
              - id: c2
              - val: 1
            - val: 22
    - guard:
        op: ge
        args:
        - id: P0@0x46974500
        - op: add
          args:
          - op: mul
            args:
            - val: 16
            - id: c2
          - val: 1
      then:
        user:
          op: call
          args:
          - id: RS1_affine_parallel@0x46988f10
          - id: c1
          - id: c0
          - val: 0
          - id: c2
          - op: call
            args:
            - id: A_memref_alloca_res_7@0x469c6770
            - val: 0
            - val: 0
            - op: pdiv_r
              args:
              - op: sub
                args:
                - id: c2
                - val: 1
              - val: 22
          - op: call
            args:
            - id: A_memref_alloca_res_10@0x46985f80
            - val: 0
            - val: 0
            - op: pdiv_r
              args:
              - op: sub
                args:
                - id: c2
                - val: 1
              - val: 22
  - user:
      op: call
      args:
      - id: RS3_affine_parallel@0x4699ff70
      - id: c1
      - id: c0
      - val: 0
      - op: call
        args:
        - id: A_memref_alloca_res_4@0x469c72c0
        - val: 0
        - val: 0
[P0, P1, P2, P3] -> { [[] -> [i0, i1]] : P3 > 0 and P2 > 0 }
[P0, P1, P2, P3] -> { [[] -> [i0, i1]] }
graft for band end

Unsupported isl ast expression
UNREACHABLE executed at /scr/ivan/src/transformer-llvm-project/mlir/lib/Conversion/Polymer/Support/IslScop.cc:728!
PLEASE submit a bug report to https://github.com/llvm/llvm-project/issues/ and include the crash backtrace.
Stack dump:
0.	Program arguments: /scr/ivan/opt/transformer-llvm-project/debug/build/bin/mlir-opt /scr/ivan/src/transformer-llvm-project/mlir/test/Conversion/GPULaunchToCall/llvm-to-affine-access3.mlir --cse --canonicalize --gpu-affine-opt -debug-only=gpu-affine-opt,polymer-dependence
 #0 0x0000000008051d91 llvm::sys::PrintStackTrace(llvm::raw_ostream&, int) /scr/ivan/src/transformer-llvm-project/llvm/lib/Support/Unix/Signals.inc:723:11
 #1 0x000000000805228b PrintStackTraceSignalHandler(void*) /scr/ivan/src/transformer-llvm-project/llvm/lib/Support/Unix/Signals.inc:798:1
 #2 0x0000000008050286 llvm::sys::RunSignalHandlers() /scr/ivan/src/transformer-llvm-project/llvm/lib/Support/Signals.cpp:105:5
 #3 0x0000000008052a25 SignalHandler(int) /scr/ivan/src/transformer-llvm-project/llvm/lib/Support/Unix/Signals.inc:413:1
 #4 0x00007f255ca53710 __restore_rt (/lib64/libc.so.6+0x40710)
 #5 0x00007f255caab144 __pthread_kill_implementation (/lib64/libc.so.6+0x98144)
 #6 0x00007f255ca5365e gsignal (/lib64/libc.so.6+0x4065e)
 #7 0x00007f255ca3b902 abort (/lib64/libc.so.6+0x28902)
 #8 0x0000000007f393b0 llvm::install_out_of_memory_new_handler() /scr/ivan/src/transformer-llvm-project/llvm/lib/Support/ErrorHandling.cpp:194:0
 #9 0x000000000e141905 polymer::IslMLIRBuilder::createOp(isl_ast_expr*) /scr/ivan/src/transformer-llvm-project/mlir/lib/Conversion/Polymer/Support/IslScop.cc:0:7
#10 0x000000000e14098b polymer::IslMLIRBuilder::create(isl_ast_expr*) /scr/ivan/src/transformer-llvm-project/mlir/lib/Conversion/Polymer/Support/IslScop.cc:996:14
#11 0x000000000e13f795 polymer::IslMLIRBuilder::createUser(isl_ast_node*) /scr/ivan/src/transformer-llvm-project/mlir/lib/Conversion/Polymer/Support/IslScop.cc:1019:17
#12 0x000000000e13be31 polymer::IslMLIRBuilder::create(isl_ast_node*) /scr/ivan/src/transformer-llvm-project/mlir/lib/Conversion/Polymer/Support/IslScop.cc:1363:7
#13 0x000000000e13f595 polymer::IslMLIRBuilder::createIf(isl_ast_node*) /scr/ivan/src/transformer-llvm-project/mlir/lib/Conversion/Polymer/Support/IslScop.cc:1124:9
#14 0x000000000e13be1f polymer::IslMLIRBuilder::create(isl_ast_node*) /scr/ivan/src/transformer-llvm-project/mlir/lib/Conversion/Polymer/Support/IslScop.cc:1360:7
#15 0x000000000e13fd8f polymer::IslMLIRBuilder::createBlock(isl_ast_node*) /scr/ivan/src/transformer-llvm-project/mlir/lib/Conversion/Polymer/Support/IslScop.cc:1138:61
#16 0x000000000e13be43 polymer::IslMLIRBuilder::create(isl_ast_node*) /scr/ivan/src/transformer-llvm-project/mlir/lib/Conversion/Polymer/Support/IslScop.cc:1366:7
#17 0x000000000e13fd8f polymer::IslMLIRBuilder::createBlock(isl_ast_node*) /scr/ivan/src/transformer-llvm-project/mlir/lib/Conversion/Polymer/Support/IslScop.cc:1138:61
#18 0x000000000e13be43 polymer::IslMLIRBuilder::create(isl_ast_node*) /scr/ivan/src/transformer-llvm-project/mlir/lib/Conversion/Polymer/Support/IslScop.cc:1366:7
#19 0x000000000e1403e4 polymer::IslMLIRBuilder::createParallel(isl_ast_node*, unsigned int) /scr/ivan/src/transformer-llvm-project/mlir/lib/Conversion/Polymer/Support/IslScop.cc:1302:23
#20 0x000000000e13f00b polymer::IslMLIRBuilder::createMark(isl_ast_node*) /scr/ivan/src/transformer-llvm-project/mlir/lib/Conversion/Polymer/Support/IslScop.cc:1098:18
#21 0x000000000e13bdfb polymer::IslMLIRBuilder::create(isl_ast_node*) /scr/ivan/src/transformer-llvm-project/mlir/lib/Conversion/Polymer/Support/IslScop.cc:1354:7
#22 0x000000000e13590b polymer::IslScop::applySchedule(isl_schedule*, mlir::Operation*) /scr/ivan/src/transformer-llvm-project/mlir/lib/Conversion/Polymer/Support/IslScop.cc:1461:3
#23 0x000000000cade4aa mlir::gpu::affine_opt::transform(mlir::LLVM::LLVMFuncOp) /scr/ivan/src/transformer-llvm-project/mlir/lib/Conversion/GPULaunchToCall/GPUAffineOpt.cpp:510:41
#24 0x000000000caeb00b GPUAffineOptPass::runOnOperation()::'lambda'(mlir::gpu::GPUModuleOp)::operator()(mlir::gpu::GPUModuleOp) const::'lambda'(mlir::LLVM::LLVMFuncOp)::operator()(mlir::LLVM::LLVMFuncOp) const /scr/ivan/src/transformer-llvm-project/mlir/lib/Conversion/GPULaunchToCall/GPUAffineOpt.cpp:820:11
#25 0x000000000caeac73 std::enable_if<!llvm::is_one_of<mlir::LLVM::LLVMFuncOp, mlir::Operation*, mlir::Region*, mlir::Block*>::value && std::is_same<void, void>::value, void>::type mlir::detail::walk<(mlir::WalkOrder)1, mlir::ForwardIterator, GPUAffineOptPass::runOnOperation()::'lambda'(mlir::gpu::GPUModuleOp)::operator()(mlir::gpu::GPUModuleOp) const::'lambda'(mlir::LLVM::LLVMFuncOp), mlir::LLVM::LLVMFuncOp, void>(mlir::Operation*, GPUAffineOptPass::runOnOperation()::'lambda'(mlir::gpu::GPUModuleOp)::operator()(mlir::gpu::GPUModuleOp) const::'lambda'(mlir::LLVM::LLVMFuncOp)&&)::'lambda'(mlir::Operation*)::operator()(mlir::Operation*) const /scr/ivan/src/transformer-llvm-project/mlir/include/mlir/IR/Visitors.h:339:3
#26 0x000000000caeac0d void llvm::function_ref<void (mlir::Operation*)>::callback_fn<std::enable_if<!llvm::is_one_of<mlir::LLVM::LLVMFuncOp, mlir::Operation*, mlir::Region*, mlir::Block*>::value && std::is_same<void, void>::value, void>::type mlir::detail::walk<(mlir::WalkOrder)1, mlir::ForwardIterator, GPUAffineOptPass::runOnOperation()::'lambda'(mlir::gpu::GPUModuleOp)::operator()(mlir::gpu::GPUModuleOp) const::'lambda'(mlir::LLVM::LLVMFuncOp), mlir::LLVM::LLVMFuncOp, void>(mlir::Operation*, GPUAffineOptPass::runOnOperation()::'lambda'(mlir::gpu::GPUModuleOp)::operator()(mlir::gpu::GPUModuleOp) const::'lambda'(mlir::LLVM::LLVMFuncOp)&&)::'lambda'(mlir::Operation*)>(long, mlir::Operation*) /scr/ivan/src/transformer-llvm-project/llvm/include/llvm/ADT/STLFunctionalExtras.h:45:5
#27 0x0000000008164d41 llvm::function_ref<void (mlir::Operation*)>::operator()(mlir::Operation*) const /scr/ivan/src/transformer-llvm-project/llvm/include/llvm/ADT/STLFunctionalExtras.h:68:5
#28 0x0000000008164d0e void mlir::detail::walk<mlir::ForwardIterator>(mlir::Operation*, llvm::function_ref<void (mlir::Operation*)>, mlir::WalkOrder) /scr/ivan/src/transformer-llvm-project/mlir/include/mlir/IR/Visitors.h:187:1
#29 0x0000000008164cbd void mlir::detail::walk<mlir::ForwardIterator>(mlir::Operation*, llvm::function_ref<void (mlir::Operation*)>, mlir::WalkOrder) /scr/ivan/src/transformer-llvm-project/mlir/include/mlir/IR/Visitors.h:179:27
#30 0x000000000caeabba std::enable_if<!llvm::is_one_of<mlir::LLVM::LLVMFuncOp, mlir::Operation*, mlir::Region*, mlir::Block*>::value && std::is_same<void, void>::value, void>::type mlir::detail::walk<(mlir::WalkOrder)1, mlir::ForwardIterator, GPUAffineOptPass::runOnOperation()::'lambda'(mlir::gpu::GPUModuleOp)::operator()(mlir::gpu::GPUModuleOp) const::'lambda'(mlir::LLVM::LLVMFuncOp), mlir::LLVM::LLVMFuncOp, void>(mlir::Operation*, GPUAffineOptPass::runOnOperation()::'lambda'(mlir::gpu::GPUModuleOp)::operator()(mlir::gpu::GPUModuleOp) const::'lambda'(mlir::LLVM::LLVMFuncOp)&&) /scr/ivan/src/transformer-llvm-project/mlir/include/mlir/IR/Visitors.h:340:3
#31 0x000000000caeab5d std::enable_if<llvm::function_traits<std::decay<GPUAffineOptPass::runOnOperation()::'lambda'(mlir::gpu::GPUModuleOp)::operator()(mlir::gpu::GPUModuleOp) const::'lambda'(mlir::LLVM::LLVMFuncOp)>::type>::num_args == 1, void>::type mlir::Operation::walk<(mlir::WalkOrder)1, mlir::ForwardIterator, GPUAffineOptPass::runOnOperation()::'lambda'(mlir::gpu::GPUModuleOp)::operator()(mlir::gpu::GPUModuleOp) const::'lambda'(mlir::LLVM::LLVMFuncOp), void>(GPUAffineOptPass::runOnOperation()::'lambda'(mlir::gpu::GPUModuleOp)::operator()(mlir::gpu::GPUModuleOp) const::'lambda'(mlir::LLVM::LLVMFuncOp)&&) /scr/ivan/src/transformer-llvm-project/mlir/include/mlir/IR/Operation.h:794:5
#32 0x000000000caeab24 GPUAffineOptPass::runOnOperation()::'lambda'(mlir::gpu::GPUModuleOp)::operator()(mlir::gpu::GPUModuleOp) const /scr/ivan/src/transformer-llvm-project/mlir/lib/Conversion/GPULaunchToCall/GPUAffineOpt.cpp:835:5
#33 0x000000000caeaa73 std::enable_if<!llvm::is_one_of<mlir::gpu::GPUModuleOp, mlir::Operation*, mlir::Region*, mlir::Block*>::value && std::is_same<void, void>::value, void>::type mlir::detail::walk<(mlir::WalkOrder)1, mlir::ForwardIterator, GPUAffineOptPass::runOnOperation()::'lambda'(mlir::gpu::GPUModuleOp), mlir::gpu::GPUModuleOp, void>(mlir::Operation*, GPUAffineOptPass::runOnOperation()::'lambda'(mlir::gpu::GPUModuleOp)&&)::'lambda'(mlir::Operation*)::operator()(mlir::Operation*) const /scr/ivan/src/transformer-llvm-project/mlir/include/mlir/IR/Visitors.h:339:3
#34 0x000000000caeaa0d void llvm::function_ref<void (mlir::Operation*)>::callback_fn<std::enable_if<!llvm::is_one_of<mlir::gpu::GPUModuleOp, mlir::Operation*, mlir::Region*, mlir::Block*>::value && std::is_same<void, void>::value, void>::type mlir::detail::walk<(mlir::WalkOrder)1, mlir::ForwardIterator, GPUAffineOptPass::runOnOperation()::'lambda'(mlir::gpu::GPUModuleOp), mlir::gpu::GPUModuleOp, void>(mlir::Operation*, GPUAffineOptPass::runOnOperation()::'lambda'(mlir::gpu::GPUModuleOp)&&)::'lambda'(mlir::Operation*)>(long, mlir::Operation*) /scr/ivan/src/transformer-llvm-project/llvm/include/llvm/ADT/STLFunctionalExtras.h:45:5
#35 0x0000000008164d41 llvm::function_ref<void (mlir::Operation*)>::operator()(mlir::Operation*) const /scr/ivan/src/transformer-llvm-project/llvm/include/llvm/ADT/STLFunctionalExtras.h:68:5
#36 0x0000000008164d0e void mlir::detail::walk<mlir::ForwardIterator>(mlir::Operation*, llvm::function_ref<void (mlir::Operation*)>, mlir::WalkOrder) /scr/ivan/src/transformer-llvm-project/mlir/include/mlir/IR/Visitors.h:187:1
#37 0x0000000008164cbd void mlir::detail::walk<mlir::ForwardIterator>(mlir::Operation*, llvm::function_ref<void (mlir::Operation*)>, mlir::WalkOrder) /scr/ivan/src/transformer-llvm-project/mlir/include/mlir/IR/Visitors.h:179:27
#38 0x000000000caea9ba std::enable_if<!llvm::is_one_of<mlir::gpu::GPUModuleOp, mlir::Operation*, mlir::Region*, mlir::Block*>::value && std::is_same<void, void>::value, void>::type mlir::detail::walk<(mlir::WalkOrder)1, mlir::ForwardIterator, GPUAffineOptPass::runOnOperation()::'lambda'(mlir::gpu::GPUModuleOp), mlir::gpu::GPUModuleOp, void>(mlir::Operation*, GPUAffineOptPass::runOnOperation()::'lambda'(mlir::gpu::GPUModuleOp)&&) /scr/ivan/src/transformer-llvm-project/mlir/include/mlir/IR/Visitors.h:340:3
#39 0x000000000caea95d std::enable_if<llvm::function_traits<std::decay<GPUAffineOptPass::runOnOperation()::'lambda'(mlir::gpu::GPUModuleOp)>::type>::num_args == 1, void>::type mlir::Operation::walk<(mlir::WalkOrder)1, mlir::ForwardIterator, GPUAffineOptPass::runOnOperation()::'lambda'(mlir::gpu::GPUModuleOp), void>(GPUAffineOptPass::runOnOperation()::'lambda'(mlir::gpu::GPUModuleOp)&&) /scr/ivan/src/transformer-llvm-project/mlir/include/mlir/IR/Operation.h:794:5
#40 0x000000000caea81c GPUAffineOptPass::runOnOperation() /scr/ivan/src/transformer-llvm-project/mlir/lib/Conversion/GPULaunchToCall/GPUAffineOpt.cpp:836:3
#41 0x000000000dd5613b mlir::detail::OpToOpPassAdaptor::run(mlir::Pass*, mlir::Operation*, mlir::AnalysisManager, bool, unsigned int)::$_1::operator()() const /scr/ivan/src/transformer-llvm-project/mlir/lib/Pass/Pass.cpp:0:17
#42 0x000000000dd560d5 void llvm::function_ref<void ()>::callback_fn<mlir::detail::OpToOpPassAdaptor::run(mlir::Pass*, mlir::Operation*, mlir::AnalysisManager, bool, unsigned int)::$_1>(long) /scr/ivan/src/transformer-llvm-project/llvm/include/llvm/ADT/STLFunctionalExtras.h:45:5
#43 0x0000000007f5cc79 llvm::function_ref<void ()>::operator()() const /scr/ivan/src/transformer-llvm-project/llvm/include/llvm/ADT/STLFunctionalExtras.h:68:5
#44 0x000000000dd58e95 void mlir::MLIRContext::executeAction<mlir::PassExecutionAction, mlir::Pass&>(llvm::function_ref<void ()>, llvm::ArrayRef<mlir::IRUnit>, mlir::Pass&) /scr/ivan/src/transformer-llvm-project/mlir/include/mlir/IR/MLIRContext.h:276:3
#45 0x000000000dd51823 mlir::detail::OpToOpPassAdaptor::run(mlir::Pass*, mlir::Operation*, mlir::AnalysisManager, bool, unsigned int) /scr/ivan/src/transformer-llvm-project/mlir/lib/Pass/Pass.cpp:533:17
#46 0x000000000dd51da4 mlir::detail::OpToOpPassAdaptor::runPipeline(mlir::OpPassManager&, mlir::Operation*, mlir::AnalysisManager, bool, unsigned int, mlir::PassInstrumentor*, mlir::PassInstrumentation::PipelineParentInfo const*) /scr/ivan/src/transformer-llvm-project/mlir/lib/Pass/Pass.cpp:593:16
#47 0x000000000dd538d8 mlir::PassManager::runPasses(mlir::Operation*, mlir::AnalysisManager) /scr/ivan/src/transformer-llvm-project/mlir/lib/Pass/Pass.cpp:904:10
#48 0x000000000dd53802 mlir::PassManager::run(mlir::Operation*) /scr/ivan/src/transformer-llvm-project/mlir/lib/Pass/Pass.cpp:884:60
#49 0x000000000dd47e52 performActions(llvm::raw_ostream&, std::shared_ptr<llvm::SourceMgr> const&, mlir::MLIRContext*, mlir::MlirOptMainConfig const&) /scr/ivan/src/transformer-llvm-project/mlir/lib/Tools/mlir-opt/MlirOptMain.cpp:408:17
#50 0x000000000dd47a88 processBuffer(llvm::raw_ostream&, std::unique_ptr<llvm::MemoryBuffer, std::default_delete<llvm::MemoryBuffer>>, mlir::MlirOptMainConfig const&, mlir::DialectRegistry&, llvm::ThreadPoolInterface*) /scr/ivan/src/transformer-llvm-project/mlir/lib/Tools/mlir-opt/MlirOptMain.cpp:473:12
#51 0x000000000dd4786c mlir::MlirOptMain(llvm::raw_ostream&, std::unique_ptr<llvm::MemoryBuffer, std::default_delete<llvm::MemoryBuffer>>, mlir::DialectRegistry&, mlir::MlirOptMainConfig const&)::$_0::operator()(std::unique_ptr<llvm::MemoryBuffer, std::default_delete<llvm::MemoryBuffer>>, llvm::raw_ostream&) const /scr/ivan/src/transformer-llvm-project/mlir/lib/Tools/mlir-opt/MlirOptMain.cpp:548:12
#52 0x000000000dd47806 llvm::LogicalResult llvm::function_ref<llvm::LogicalResult (std::unique_ptr<llvm::MemoryBuffer, std::default_delete<llvm::MemoryBuffer>>, llvm::raw_ostream&)>::callback_fn<mlir::MlirOptMain(llvm::raw_ostream&, std::unique_ptr<llvm::MemoryBuffer, std::default_delete<llvm::MemoryBuffer>>, mlir::DialectRegistry&, mlir::MlirOptMainConfig const&)::$_0>(long, std::unique_ptr<llvm::MemoryBuffer, std::default_delete<llvm::MemoryBuffer>>, llvm::raw_ostream&) /scr/ivan/src/transformer-llvm-project/llvm/include/llvm/ADT/STLFunctionalExtras.h:45:12
#53 0x000000000dee8fd2 llvm::function_ref<llvm::LogicalResult (std::unique_ptr<llvm::MemoryBuffer, std::default_delete<llvm::MemoryBuffer>>, llvm::raw_ostream&)>::operator()(std::unique_ptr<llvm::MemoryBuffer, std::default_delete<llvm::MemoryBuffer>>, llvm::raw_ostream&) const /scr/ivan/src/transformer-llvm-project/llvm/include/llvm/ADT/STLFunctionalExtras.h:68:12
#54 0x000000000dee85bc mlir::splitAndProcessBuffer(std::unique_ptr<llvm::MemoryBuffer, std::default_delete<llvm::MemoryBuffer>>, llvm::function_ref<llvm::LogicalResult (std::unique_ptr<llvm::MemoryBuffer, std::default_delete<llvm::MemoryBuffer>>, llvm::raw_ostream&)>, llvm::raw_ostream&, llvm::StringRef, llvm::StringRef) /scr/ivan/src/transformer-llvm-project/mlir/lib/Support/ToolUtilities.cpp:27:12
#55 0x000000000dd44135 mlir::MlirOptMain(llvm::raw_ostream&, std::unique_ptr<llvm::MemoryBuffer, std::default_delete<llvm::MemoryBuffer>>, mlir::DialectRegistry&, mlir::MlirOptMainConfig const&) /scr/ivan/src/transformer-llvm-project/mlir/lib/Tools/mlir-opt/MlirOptMain.cpp:551:10
#56 0x000000000dd44499 mlir::MlirOptMain(int, char**, llvm::StringRef, llvm::StringRef, mlir::DialectRegistry&) /scr/ivan/src/transformer-llvm-project/mlir/lib/Tools/mlir-opt/MlirOptMain.cpp:589:14
#57 0x000000000dd44668 mlir::MlirOptMain(int, char**, llvm::StringRef, mlir::DialectRegistry&) /scr/ivan/src/transformer-llvm-project/mlir/lib/Tools/mlir-opt/MlirOptMain.cpp:605:10
#58 0x0000000007ed0b43 main /scr/ivan/src/transformer-llvm-project/mlir/tools/mlir-opt/mlir-opt.cpp:317:33
#59 0x00007f255ca3d088 __libc_start_call_main (/lib64/libc.so.6+0x2a088)
#60 0x00007f255ca3d14b __libc_start_main@GLIBC_2.2.5 (/lib64/libc.so.6+0x2a14b)
#61 0x0000000007ed0765 _start (/scr/ivan/opt/transformer-llvm-project/debug/build/bin/mlir-opt+0x7ed0765)
